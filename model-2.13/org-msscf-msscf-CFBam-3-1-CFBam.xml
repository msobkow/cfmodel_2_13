<?xml version="1.0" encoding="utf-8"?>
<!--
 *	MSS Code Factory 3.1 CFBam - Business Application Model
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)
 *
 *	MSS Code Factory Business Application Model is distributed under
 *	Mark Stephen Sobkow's Proprietary BAM License, Version 1.0.
 *
 *	MSS Code Factory Business Application Model is proprietary code
 *	which may not be modified in any way without a commercial license,
 *	not even if you are an educational institution.
 *
 *	The binaries may be used by the public to execute the MSS Code
 *	Factory tool itself, but they may not link their own applications
 *	to those binaries without a commercial use license.  A commercial
 *	use license will allow you to link to the binaries, and to extend
 *	the unmodified binaries and interfaces in your own application code.
 *
 *	MSS Code Factory Business Application Model source is published so
 *	that you may study it for academic purposes, to perform security
 *	verification reviews, and for commercial use licensers to debug
 *	their applications.
 *
 *	Registered .edu educational institutions are permitted to install
 *	and link the binaries as if they had a commercial use license
 *	for research and courseware projects.  Such projects may not be
 *	used to produce commercial or business code, and may not be deployed
 *	to commercial or business interests, including the educational
 *	institution's own departments outside that performing the research
 *	or teaching the course.
 *
 *	Any use of MSS Code Factory Business Application Model binaries or
 *	source in a production environment under any other circumstances
 *	without a commercial license from Mark Stephen Sobkow is strictly
 *	forbidden.
 *
 *	MSS Code Factory Business Application Model is distributed in the
 *	hope that it will be useful, but WITHOUT ANY WARRANTY; without
 *	even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 *	PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory Business Application Model
 *	can be made at https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 *-->
<MSSBam
		xmlns="uri://org.msscf/msscf/2.0.13/mssbam"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:xs="http://www.w3.org/2001/XMLSchema"
		xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/mssbam file:/opt/msscf/2.0.13/xsd/mssbam-2.13.xsd"
		Name="CFBam"
		Revision="3.1"
		Description="MSS Code Factory CFBam - Business Application Model"
		ProjectRoot="com.github.msobkow.CFBam.3.1" >
	<Tld Name="com" >
		<TopDomain Name="github" >
			<TopProject Name="msobkow" >
				<SubProject Name="CFBam" >
					<MajorVersion Name="3" >
						<MinorVersion Name="1" >
<SchemaDef Name="CFBam"
		DbName="CFBam31"
		Description="Code Factory Business Application Model"
		CopyrightHolder="Mark Stephen Sobkow"
		CopyrightPeriod="2020"
		AuthorEMail="mark.sobkow@gmail.com"
		ProjectURL="http://msobkow.github.com/"
		PublishURI="https://msscf.sourceforge.io/com-github-msobkow-CFBam-3-1-CFBam.xml"
		CommonLicenseName="Mark Stephen Sobkow's Proprietary BAM Server , Version 1.0" CommonLicenseCode="MSSBam10" >
		ClientImplLicenseName="Mark Stephen Sobkow's Proprietary BAM Client License, Version 1.0" ClientImplLicenseCode="MSSBamClient10"
		ClientXFaceLicenseName="Mark Stephen Sobkow's Proprietary BAM Client License, Version 1.0" ClientXFaceLicenseCode="MSSBamClient10"
		ServerImplLicenseName="Mark Stephen Sobkow's Proprietary BAM Server Implementation License, Version 1.0" ServerImplLicenseCode="MSSBamSrv10"
		ServerXFaceLicenseName="Mark Stephen Sobkow's Proprietary BAM Server Interface License, Version 1.0" ServerXFaceLicenseCode="MSSBamXSrv10" >
			<CommonLicense>
MSS Code Factory 3.1 CFBam - Business Application Model

Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)

MSS Code Factory Business Application Model is distributed under
Mark Stephen Sobkow's Proprietary BAM License, Version 1.0.

MSS Code Factory Business Application Model is proprietary code
which may not be modified in any way without a commercial license,
not even if you are an educational institution.

The binaries may be used by the public to execute the MSS Code
Factory tool itself, but they may not link their own applications
to those binaries without a commercial use license.  A commercial
use license will allow you to link to the binaries, and to extend
the unmodified binaries and interfaces in your own application code.

MSS Code Factory Business Application Model source is published so
that you may study it for academic purposes, to perform security
verification reviews, and for commercial use licensers to debug
their applications.

Registered .edu educational institutions are permitted to install
and link the binaries as if they had a commercial use license
for research and courseware projects.  Such projects may not be
used to produce commercial or business code, and may not be deployed
to commercial or business interests, including the educational
institution's own departments outside that performing the research
or teaching the course.

Any use of MSS Code Factory Business Application Model binaries or
source in a production environment under any other circumstances
without a commercial license from Mark Stephen Sobkow is strictly
forbidden.

MSS Code Factory Business Application Model is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without
even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

Donations to support MSS Code Factory Business Application Model
can be made at https://www.paypal.com/paypalme2/MarkSobkow

Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.</CommonLicense>

			<ClientXFaceLicense>
MSS Code Factory 3.1 CFBam - Business Application Model Client

Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)

MSS Code Factory Business Application Model Client is distributed
under Mark Stephen Sobkow's Proprietary BAM Client License, Version 1.0.

MSS Code Factory Business Application Model Client is proprietary code
which may not be modified in any way without a commercial license, not
even if you are an educational institution.

The binaries may be used by the public to execute the MSS Code
Factory tool itself, and to compile and link their own GPLv3 applications
to those binaries without a commercial use license, allowing them to
import, modify, validate, and export business application models using
the defined client interfaces.

You may not compile and link applications under any other license than
the GPLv3 unless you have a commercial use license for MSS Code Factory
Business Application Model Client.

The source is published so that you may study it for academic purposes,
to perform security verification reviews, and for commercial use
licensers to debug their applications and extensions.

Registered .edu educational institutions are permitted to install
and link the binaries as if they had a commercial use license
for research and courseware projects.  Such projects may not be
used to produce commercial or business code, and may not be deployed
to commercial or business interests, including the educational
institution's own departments outside that performing the research
or teaching the course.

Any use of MSS Code Factory Business Application Model Client
binaries or source in a production environment under any other
circumstances without a commercial license from Mark Stephen
Sobkow is strictly forbidden.

MSS Code Factory Business Application Model Client is distributed
in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.

Donations to support MSS Code Factory Business Application Model
Client can be made at https://www.paypal.com/paypalme2/MarkSobkow

Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.</ClientXFaceLicense>

			<ClientImplLicense>
MSS Code Factory 3.1 CFBam - Business Application Model Client

Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)

MSS Code Factory Business Application Model Client is distributed
under Mark Stephen Sobkow's Proprietary BAM Client License, Version 1.0.

MSS Code Factory Business Application Model Client is proprietary code
which may not be modified in any way without a commercial license, not
even if you are an educational institution.

The binaries may be used by the public to execute the MSS Code
Factory tool itself, and to compile and link their own GPLv3 applications
to those binaries without a commercial use license, allowing them to
import, modify, validate, and export business application models using
the defined client interfaces.

You may not compile and link applications under any other license than
the GPLv3 unless you have a commercial use license for MSS Code Factory
Business Application Model Client.

The source is published so that you may study it for academic purposes,
to perform security verification reviews, and for commercial use
licensers to debug their applications and extensions.

Registered .edu educational institutions are permitted to install
and link the binaries as if they had a commercial use license
for research and courseware projects.  Such projects may not be
used to produce commercial or business code, and may not be deployed
to commercial or business interests, including the educational
institution's own departments outside that performing the research
or teaching the course.

Any use of MSS Code Factory Business Application Model Client
binaries or source in a production environment under any other
circumstances without a commercial license from Mark Stephen
Sobkow is strictly forbidden.

MSS Code Factory Business Application Model Client is distributed
in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.

Donations to support MSS Code Factory Business Application Model
Client can be made at https://www.paypal.com/paypalme2/MarkSobkow

Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.</ClientImplLicense>

			<ServerXFaceLicense>
MSS Code Factory 3.1 CFBam - Business Application Model Server Interface

Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)

MSS Code Factory Business Application Model Server Interface
is distributed under Mark Stephen Sobkow's Proprietary BAM Server
Interface License, Version 1.0.

MSS Code Factory Business Application Model Server Interface
is proprietary code which may not be modified in any way without
a commercial license, not even if you are an educational institution.

The binaries may be used by the public to execute the MSS Code
Factory tool itself, but they may not link their own applications
to those binaries without a commercial use license.  A commercial
use license will allow you to link to the binaries, and to extend
the unmodified binaries and interfaces in your own application code.

MSS Code Factory Business Application Model Server Interface
source is published so that you may study it for academic purposes,
to perform security verification reviews, and for commercial use
licensers to debug their extensions and runtimes.

Registered .edu educational institutions are permitted to install
and link the binaries as if they had a commercial use license
for research and courseware projects.  Such projects may not be
used to produce commercial or business code, and may not be deployed
to commercial or business interests, including the educational
institution's own departments outside that performing the research
or teaching the course.

Any use of MSS Code Factory Business Application Model Server
Interface binaries or source in a production environment
under any other circumstances without a commercial license from
Mark Stephen Sobkow is strictly forbidden.

MSS Code Factory Business Application Model Server Interface
is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.

Donations to support MSS Code Factory Business Application Model
Server Interface can be made at
https://www.paypal.com/paypalme2/MarkSobkow

Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.</ServerXFaceLicense>

			<ServerImplLicense>
MSS Code Factory 3.1 CFBam - Business Application Model Server Implementation

Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)

MSS Code Factory Business Application Model Server Implementation
is distributed under Mark Stephen Sobkow's Proprietary BAM Server
Implementation License, Version 1.0.

MSS Code Factory Business Application Model Server Implementation
is proprietary code which may not be modified in any way without
a commercial license, not even if you are an educational institution.

The binaries may be used by the public to execute the MSS Code
Factory tool itself, but they may not link their own applications
to those binaries without a commercial use license.  A commercial
use license will allow you to link to the binaries, and to extend
the unmodified binaries and interfaces in your own application code.

MSS Code Factory Business Application Model Server Implementation
source is published so that you may study it for academic purposes,
to perform security verification reviews, and for commercial use
licensers to debug their extensions and runtimes.

Registered .edu educational institutions are permitted to install
and link the binaries as if they had a commercial use license
for research and courseware projects.  Such projects may not be
used to produce commercial or business code, and may not be deployed
to commercial or business interests, including the educational
institution's own departments outside that performing the research
or teaching the course.

Any use of MSS Code Factory Business Application Model Server
Implementation binaries or source in a production environment
under any other circumstances without a commercial license from
Mark Stephen Sobkow is strictly forbidden.

MSS Code Factory Business Application Model Server Implementation
is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.

Donations to support MSS Code Factory Business Application Model
Server Implementation can be made at
https://www.paypal.com/paypalme2/MarkSobkow

Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.</ServerImplLicense>

	<SchemaRef Name="CFSec"
			RefModelName="com-github-msobkow-CFSec-3-1-CFSec"
			IncludeRoot="com.github.msobkow.CFSec.3.1.CFSec" />

	<SchemaRef Name="CFInt"
			RefModelName="com-github-msobkow-CFInt-3-1-CFInt"
			IncludeRoot="com.github.msobkow.CFInt.3.1.CFInt" />

	<Id64Gen Name="ChainIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="1006"
			BlockSize="1" />

	<StringType Name="DescriptionType"
			IsNullable="false"
			MaxLen="127"
			InitValue="" />

	<Id64Gen Name="EnumTagIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="1005"
			BlockSize="1" />

	<Id64Gen Name="IndexColIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="1002"
			BlockSize="1" />

	<EnumType Name="LoaderBehaviourEnum"
			IsNullable="false"
			MinValue="0"
			InitValue="0" >
		<EnumTag Name="Insert" />
		<EnumTag Name="Update" />
		<EnumTag Name="Replace" />
	</EnumType>

	<StringType Name="NameType"
			IsNullable="false"
			MaxLen="192"
			InitValue="" />

	<Id64Gen Name="ParamIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="1007"
			BlockSize="1" />

	<Id64Gen Name="RelationColIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="1003"
			BlockSize="1" />

	<EnumType Name="RelationTypeEnum"
			IsNullable="false"
			MinValue="0"
			InitValue="0" >
		<EnumTag Name="Unknown" />
		<EnumTag Name="Lookup" />
		<EnumTag Name="Superclass" />
		<EnumTag Name="Container" />
		<EnumTag Name="Components" />
		<EnumTag Name="Owner" />
		<EnumTag Name="Parent" />
		<EnumTag Name="Children" />
	</EnumType>

	<Id64Gen Name="ScopeIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="1001"
			BlockSize="1" />

	<EnumType Name="SecScopeEnum"
			IsNullable="false"
			MinValue="0"
			InitValue="0" >
		<EnumTag Name="None" />
		<EnumTag Name="System" />
		<EnumTag Name="Cluster" />
		<EnumTag Name="Tenant" />
	</EnumType>

	<Id64Gen Name="ValueIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="1004"
			BlockSize="1" />

	<Table Name="Scope"
			TableClassCode="a801"
			DbName="scopedef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="ScopeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="scopedef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ScopeTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="scopedef_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="TenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="SchemaDef"
			TableClassCode="a802"
			DbName="schemadef"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="SchemaDefUNameIdx"
			QualTable="SubProject"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="MinorVersionId"
				Label="Minor Version Id"
				IsNullable="false"
				DataType="MinorVersionIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="DbName"
				Label="Db Name"
				IsNullable="true"
				MaxLen="12" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<StringCol Name="PublicLicenseName"
				IsNullable="false"
				DbName="pub_lic_nm"
				MaxLen="127"
				InitValue="" />
		<TextCol Name="PublicLicenseText"
				IsNullable="false"
				DbName="pub_lic_txt"
				MaxLen="32767"
				InitValue="" />
		<StringCol Name="ImplementationLicenseName"
				IsNullable="true"
				DbName="impl_lic_nm"
				MaxLen="127"
				InitValue="" />
		<TextCol Name="ImplementationLicenseText"
				IsNullable="true"
				DbName="impl_lic_txt"
				MaxLen="32767" />
		<StringCol Name="CopyrightPeriod"
				Label="Copyright Period"
				IsNullable="false"
				DbName="CopyPerd"
				MaxLen="10"
				InitValue="2020" />
		<StringCol Name="CopyrightHolder"
				Label="Copyright Holder"
				IsNullable="false"
				DbName="CopyHold"
				MaxLen="511"
				InitValue="YourNameHere" />
		<StringCol Name="AuthorEMail"
				Label="Author EMail"
				IsNullable="false"
				DbName="AuthEMail"
				MaxLen="512"
				InitValue="" />
		<StringCol Name="ProjectURL"
				Label="Project URL"
				IsNullable="false"
				DbName="ProjURL"
				MaxLen="1024"
				InitValue="" />
		<StringCol Name="PublishURI"
				Label="Publish URI"
				IsNullable="false"
				DbName="PubURI"
				MaxLen="512"
				InitValue="" />
		<TextCol Name="JSchemaObjImport"
				IsNullable="true"
				DbName="jobj_import"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JSchemaObjInterface"
				IsNullable="true"
				DbName="jobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JSchemaObjMembers"
				IsNullable="true"
				DbName="jobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JSchemaObjImplementation"
				IsNullable="true"
				DbName="jobj_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JDb2LUWSchemaObjMembers"
				IsNullable="true"
				DbName="jdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JDb2LUWSchemaObjImpl"
				IsNullable="true"
				DbName="jdb2_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JDb2LUWSchemaObjImport"
				IsNullable="true"
				DbName="jdb2_import"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMSSqlSchemaObjMembers"
				IsNullable="true"
				DbName="jmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMSSqlSchemaObjImpl"
				IsNullable="true"
				DbName="jmssql_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMSSqlSchemaObjImport"
				IsNullable="true"
				DbName="jmssql_import"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMySqlSchemaObjMembers"
				IsNullable="true"
				DbName="jmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMySqlSchemaObjImpl"
				IsNullable="true"
				DbName="jmysql_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMySqlSchemaObjImport"
				IsNullable="true"
				DbName="jmysql_import"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JOracleSchemaObjMembers"
				IsNullable="true"
				DbName="joracle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JOracleSchemaObjImpl"
				IsNullable="true"
				DbName="joracle_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JOracleSchemaObjImport"
				IsNullable="true"
				DbName="joracle_import"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JPgSqlSchemaObjMembers"
				IsNullable="true"
				DbName="jpgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JPgSqlSchemaObjImpl"
				IsNullable="true"
				DbName="jpgsql_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JPgSqlSchemaObjImport"
				IsNullable="true"
				DbName="jpgsql_import"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JRamSchemaObjMembers"
				IsNullable="true"
				DbName="jram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JRamSchemaObjImpl"
				IsNullable="true"
				DbName="jram_soimpl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JRamSchemaObjImport"
				IsNullable="true"
				DbName="jram_imprt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgSchemaImport"
				IsNullable="true"
				DbName="javaxmsgschimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgSchemaFormatters"
				IsNullable="true"
				DbName="javaxmsgschfmts"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgClientSchemaImport"
				IsNullable="true"
				DbName="javaxmsgcltschimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgClientSchemaBody"
				IsNullable="true"
				DbName="javaxmsgcltschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRqstSchemaBody"
				IsNullable="true"
				DbName="javaxmsgrqstschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRqstSchemaImport"
				IsNullable="true"
				DbName="javaxmsgrqstschimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRqstSchemaWireParsers"
				IsNullable="true"
				DbName="javaxmsgrqstschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRqstSchemaXsdSpec"
				IsNullable="true"
				DbName="javaxmsgrqstschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRqstSchemaXsdElementList"
				IsNullable="true"
				DbName="javaxmsgrqstschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRspnSchemaBody"
				IsNullable="true"
				DbName="javaxmsgrspnschemabody"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRspnSchemaImport"
				IsNullable="true"
				DbName="javaxmsgrspnschimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRspnSchemaWireParsers"
				IsNullable="true"
				DbName="javaxmsgrspnschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRspnSchemaXsdElementList"
				IsNullable="true"
				DbName="javaxmsgrspnschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRspnSchemaXsdSpec"
				IsNullable="true"
				DbName="javaxmsgrspnschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppSchemaObjInclude"
				IsNullable="true"
				DbName="cppobj_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppSchemaObjInterface"
				IsNullable="true"
				DbName="cppobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppSchemaObjMembers"
				IsNullable="true"
				DbName="cppobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppSchemaObjImplementation"
				IsNullable="true"
				DbName="cppobj_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppDb2LUWSchemaObjMembers"
				IsNullable="true"
				DbName="cppdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppDb2LUWSchemaObjImpl"
				IsNullable="true"
				DbName="cppdb2_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppDb2LUWSchemaObjInclude"
				IsNullable="true"
				DbName="cppdb2_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMSSqlSchemaObjMembers"
				IsNullable="true"
				DbName="cppmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMSSqlSchemaObjImpl"
				IsNullable="true"
				DbName="cppmssql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMSSqlSchemaObjInclude"
				IsNullable="true"
				DbName="cppmssql_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMySqlSchemaObjMembers"
				IsNullable="true"
				DbName="cppmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMySqlSchemaObjImpl"
				IsNullable="true"
				DbName="cppmysql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMySqlSchemaObjInclude"
				IsNullable="true"
				DbName="cppmysql_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppOracleSchemaObjMembers"
				IsNullable="true"
				DbName="cpporacle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppOracleSchemaObjImpl"
				IsNullable="true"
				DbName="cpporacle_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppOracleSchemaObjInclude"
				IsNullable="true"
				DbName="cpporacle_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppPgSqlSchemaObjMembers"
				IsNullable="true"
				DbName="cpppgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppPgSqlSchemaObjImpl"
				IsNullable="true"
				DbName="cpppgsql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppPgSqlSchemaObjInclude"
				IsNullable="true"
				DbName="cpppgsql_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppRamSchemaObjMembers"
				IsNullable="true"
				DbName="cppram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppRamSchemaObjImpl"
				IsNullable="true"
				DbName="cppram_soincl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppRamSchemaObjInclude"
				IsNullable="true"
				DbName="cppram_incrt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgSchemaInclude"
				IsNullable="true"
				DbName="cppxmsgschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgSchemaFormatters"
				IsNullable="true"
				DbName="cppxmsgschfmts"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgClientSchemaInclude"
				IsNullable="true"
				DbName="cppxmsgcltschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgClientSchemaBody"
				IsNullable="true"
				DbName="cppxmsgcltschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRqstSchemaBody"
				IsNullable="true"
				DbName="cppxmsgrqstschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRqstSchemaInclude"
				IsNullable="true"
				DbName="cppxmsgrqstschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRqstSchemaWireParsers"
				IsNullable="true"
				DbName="cppxmsgrqstschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRqstSchemaXsdSpec"
				IsNullable="true"
				DbName="cppxmsgrqstschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRqstSchemaXsdElementList"
				IsNullable="true"
				DbName="cppxmsgrqstschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRspnSchemaBody"
				IsNullable="true"
				DbName="cppxmsgrspnschemabody"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRspnSchemaInclude"
				IsNullable="true"
				DbName="cppxmsgrspnschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRspnSchemaWireParsers"
				IsNullable="true"
				DbName="cppxmsgrspnschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRspnSchemaXsdElementList"
				IsNullable="true"
				DbName="cppxmsgrspnschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRspnSchemaXsdSpec"
				IsNullable="true"
				DbName="cppxmsgrspnschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppSchemaObjInclude"
				IsNullable="true"
				DbName="hppobj_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppSchemaObjInterface"
				IsNullable="true"
				DbName="hppobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppSchemaObjMembers"
				IsNullable="true"
				DbName="hppobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppSchemaObjImplementation"
				IsNullable="true"
				DbName="hppobj_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppDb2LUWSchemaObjMembers"
				IsNullable="true"
				DbName="hppdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppDb2LUWSchemaObjImpl"
				IsNullable="true"
				DbName="hppdb2_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppDb2LUWSchemaObjInclude"
				IsNullable="true"
				DbName="hppdb2_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMSSqlSchemaObjMembers"
				IsNullable="true"
				DbName="hppmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMSSqlSchemaObjImpl"
				IsNullable="true"
				DbName="hppmssql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMSSqlSchemaObjInclude"
				IsNullable="true"
				DbName="hppmssql_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMySqlSchemaObjMembers"
				IsNullable="true"
				DbName="hppmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMySqlSchemaObjImpl"
				IsNullable="true"
				DbName="hppmysql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMySqlSchemaObjInclude"
				IsNullable="true"
				DbName="hppmysql_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppOracleSchemaObjMembers"
				IsNullable="true"
				DbName="hpporacle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppOracleSchemaObjImpl"
				IsNullable="true"
				DbName="hpporacle_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppOracleSchemaObjInclude"
				IsNullable="true"
				DbName="hpporacle_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppPgSqlSchemaObjMembers"
				IsNullable="true"
				DbName="hpppgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppPgSqlSchemaObjImpl"
				IsNullable="true"
				DbName="hpppgsql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppPgSqlSchemaObjInclude"
				IsNullable="true"
				DbName="hpppgsql_include"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppRamSchemaObjMembers"
				IsNullable="true"
				DbName="hppram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppRamSchemaObjImpl"
				IsNullable="true"
				DbName="hppram_soincl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppRamSchemaObjInclude"
				IsNullable="true"
				DbName="hppram_incrt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgSchemaInclude"
				IsNullable="true"
				DbName="hppxmsgschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgSchemaFormatters"
				IsNullable="true"
				DbName="hppxmsgschfmts"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgClientSchemaInclude"
				IsNullable="true"
				DbName="hppxmsgcltschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgClientSchemaBody"
				IsNullable="true"
				DbName="hppxmsgcltschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRqstSchemaBody"
				IsNullable="true"
				DbName="hppxmsgrqstschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRqstSchemaInclude"
				IsNullable="true"
				DbName="hppxmsgrqstschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRqstSchemaWireParsers"
				IsNullable="true"
				DbName="hppxmsgrqstschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRqstSchemaXsdSpec"
				IsNullable="true"
				DbName="hppxmsgrqstschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRqstSchemaXsdElementList"
				IsNullable="true"
				DbName="hppxmsgrqstschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRspnSchemaBody"
				IsNullable="true"
				DbName="hppxmsgrspnschemabody"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRspnSchemaInclude"
				IsNullable="true"
				DbName="hppxmsgrspnschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRspnSchemaWireParsers"
				IsNullable="true"
				DbName="hppxmsgrspnschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRspnSchemaXsdElementList"
				IsNullable="true"
				DbName="hppxmsgrspnschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRspnSchemaXsdSpec"
				IsNullable="true"
				DbName="hppxmsgrspnschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsSchemaObjUsing"
				IsNullable="true"
				DbName="csobj_using"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsSchemaObjInterface"
				IsNullable="true"
				DbName="csobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsSchemaObjMembers"
				IsNullable="true"
				DbName="csobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsSchemaObjImplementation"
				IsNullable="true"
				DbName="csobj_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsDb2LUWSchemaObjMembers"
				IsNullable="true"
				DbName="csdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsDb2LUWSchemaObjImpl"
				IsNullable="true"
				DbName="csdb2_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsDb2LUWSchemaObjUsing"
				IsNullable="true"
				DbName="csdb2_using"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMSSqlSchemaObjMembers"
				IsNullable="true"
				DbName="csmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMSSqlSchemaObjImpl"
				IsNullable="true"
				DbName="csmssql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMSSqlSchemaObjUsing"
				IsNullable="true"
				DbName="csmssql_using"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMySqlSchemaObjMembers"
				IsNullable="true"
				DbName="csmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMySqlSchemaObjImpl"
				IsNullable="true"
				DbName="csmysql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMySqlSchemaObjUsing"
				IsNullable="true"
				DbName="csmysql_using"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsOracleSchemaObjMembers"
				IsNullable="true"
				DbName="csoracle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsOracleSchemaObjImpl"
				IsNullable="true"
				DbName="csoracle_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsOracleSchemaObjUsing"
				IsNullable="true"
				DbName="csoracle_using"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsPgSqlSchemaObjMembers"
				IsNullable="true"
				DbName="cspgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsPgSqlSchemaObjImpl"
				IsNullable="true"
				DbName="cspgsql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsPgSqlSchemaObjUsing"
				IsNullable="true"
				DbName="cspgsql_using"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsRamSchemaObjMembers"
				IsNullable="true"
				DbName="csram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsRamSchemaObjImpl"
				IsNullable="true"
				DbName="csram_soincl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsRamSchemaObjUsing"
				IsNullable="true"
				DbName="csram_incrt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgSchemaUsing"
				IsNullable="true"
				DbName="csxmsgschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgSchemaFormatters"
				IsNullable="true"
				DbName="csxmsgschfmts"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgClientSchemaUsing"
				IsNullable="true"
				DbName="csxmsgcltschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgClientSchemaBody"
				IsNullable="true"
				DbName="csxmsgcltschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRqstSchemaBody"
				IsNullable="true"
				DbName="csxmsgrqstschbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRqstSchemaUsing"
				IsNullable="true"
				DbName="csxmsgrqstschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRqstSchemaWireParsers"
				IsNullable="true"
				DbName="csxmsgrqstschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRqstSchemaXsdSpec"
				IsNullable="true"
				DbName="csxmsgrqstschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRqstSchemaXsdElementList"
				IsNullable="true"
				DbName="csxmsgrqstschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRspnSchemaBody"
				IsNullable="true"
				DbName="csxmsgrspnschemabody"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRspnSchemaUsing"
				IsNullable="true"
				DbName="csxmsgrspnschinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRspnSchemaWireParsers"
				IsNullable="true"
				DbName="csxmsgrspnschwirep"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRspnSchemaXsdElementList"
				IsNullable="true"
				DbName="csxmsgrspnschxsdeltlst"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRspnSchemaXsdSpec"
				IsNullable="true"
				DbName="csxmsgrspnschxsdspec"
				MaxLen="2000000"
				InitValue="" />
		<PrimaryIndex Name="SchemaDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="schemadef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="SchemaDefCTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemadef_ctenantidx"
				ShortName="CTenant"
				Suffix="CTenantIdx"
				Label="CTenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="SchemaDefMinorVersionIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemadef_mnvridx"
				ShortName="MinorVersionIdx"
				Suffix="MinorVersionIdx"
				Label="MinorVersionIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="MinorVersionId" IsAscending="true" />
		</Index>
		<Index Name="SchemaDefUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="schemadef_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="MinorVersionId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="SchemaAuthorEMailIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemadef_xauthem"
				Suffix="AuthEMailIdx"
				Label="Author EMail Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AuthorEMail" IsAscending="true" />
		</Index>
		<Index Name="SchemaProjectURLIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemadef_xprojurl"
				Suffix="ProjectURLIdx"
				Label="Project URL Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ProjectURL" IsAscending="true" />
		</Index>
		<Index Name="SchemaPublishURIIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="schemadef_xupuburi"
				Suffix="PubURIIdx"
				Label="PublishURIIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="PublishURI" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="schemadef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="SchemaDefIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="SchemaRef"
			TableClassCode="a804"
			DbName="schema_ref"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="SchemaId"
				Label="Schema Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="RefModelName"
				Label="Ref. Model Name"
				IsNullable="false"
				MaxLen="1024"
				InitValue="" />
		<StringCol Name="IncludeRoot"
				Label="Include Root"
				IsNullable="false"
				MaxLen="1024"
				InitValue="" />
		<TableCol Name="RefSchemaTenantId"
				Label="Ref. Schema Tenant Id"
				IsNullable="true"
				DbName="RefSchTentId"
				DataType="TenantIdGen" />
		<TableCol Name="RefSchemaId"
				Label="Ref. Schema Id"
				IsNullable="true"
				DbName="RefSchId"
				DataType="ScopeIdGen" />
		<TableCol Name="PrevTenantId"
				Label="Prev. Tenant Id"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				Label="Prev. Id"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<TableCol Name="NextTenantId"
				Label="Next Tenant Id"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				Label="Next Id"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="SchemaRefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="schemaref_pk"
				Suffix="IdIdx"
				Label="SchemaRefIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="SchemaRefSchemaIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemaref_schk"
				Suffix="SchemaIdx"
				Label="SchemaIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaId" IsAscending="true" />
		</Index>
		<Index Name="SchemaRefUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="schemaref_uname"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="SchemaRefRefSchemaIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemaref_rsck"
				Suffix="RefSchemaIdx"
				Label="RefSchemaIdx" >
			<IndexCol Name="RefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="RefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="SchemaRefPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemaref_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="SchemaRefNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="schemaref_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="schemaref_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="SchemaRefIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="ServerMethod"
			TableClassCode="a805"
			DbName="srvmeth"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="ServerMethodUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ScopeIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<StringCol Name="Suffix"
				IsNullable="true"
				MaxLen="16" />
		<BoolCol Name="IsInstanceMethod"
				Label="Is Instance Method"
				IsNullable="false"
				DbName="inst_meth"
				InitValue="true" />
		<BoolCol Name="IsServerOnly"
				Label="Is Server Only"
				IsNullable="false"
				DbName="srv_only"
				InitValue="false" />
		<TextCol Name="JMethodBody"
				Label="Java Method Body"
				IsNullable="false"
				DbName="jmeth_body"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMethodBody"
				Label="C++ Method Body"
				IsNullable="false"
				DbName="cppmeth_body"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMethodBody"
				Label="C-Sharp Method Body"
				IsNullable="false"
				DbName="csmeth_body"
				MaxLen="2000000"
				InitValue="" />
		<PrimaryIndex Name="ServerMethodIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="srvmeth_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ServerMethodUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="srvmeth_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="ServerMethodTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvmeth_tableidx"
				ShortName="Table"
				Suffix="MethTableIdx"
				Label="TableIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<Index Name="ServerMethodDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvmeth_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="srvmeth_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ServerMethodIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="ServerObjFunc"
			TableClassCode="a806"
			DbName="srvofunc"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ScopeIdGen" />
		<TableCol Name="RetTenantId"
				IsNullable="true"
				DbName="rettentid"
				DataType="TenantIdGen" />
		<TableCol Name="RetTableId"
				IsNullable="true"
				DbName="rettblid"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="ServerObjFuncIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="srvofunc_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ServerObjFuncRetTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvofunc_rettblk"
				ShortName="RetTblIdx"
				Suffix="RetTblIdx"
				Label="RetTableIdx" >
			<IndexCol Name="RetTenantId" IsAscending="true" />
			<IndexCol Name="RetTableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="srvofunc_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ServerObjFuncIdIdx"
				ToIndex="ServerMethod.ServerMethodIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="ServerProc"
			TableClassCode="a807"
			DbName="srvprc"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ScopeIdGen" />
		<StringCol Name="Dummy"
				IsNullable="true"
				DbName="dmy"
				MaxLen="16" />
		<PrimaryIndex Name="ServerProcIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="srvprc_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="srvprc_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ServerProcIdIdx"
				ToIndex="ServerMethod.ServerMethodIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Table"
			TableClassCode="a808"
			DbName="tbldef"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="TableUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="SchemaDefId"
				Label="Schema Def. Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="DbName"
				Label="Db Name"
				IsNullable="true"
				MaxLen="32" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="50" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="100" />
		<BoolCol Name="PageData"
				IsNullable="false"
				InitValue="false" />
		<TableCol Name="PrimaryIndexTenantId"
				Label="Primary Index Tenant Id"
				IsNullable="true"
				DbName="PrimIdxTentId"
				DataType="TenantIdGen" />
		<TableCol Name="PrimaryIndexId"
				Label="Primary Index Id"
				IsNullable="true"
				DbName="PrimIdxId"
				DataType="ScopeIdGen" />
		<StringCol Name="TableClassCode"
				Label="Table Class Code"
				IsNullable="false"
				DbName="TblClsCd"
				MaxLen="4"
				InitValue="" />
		<TableCol Name="LookupIndexTenantId"
				Label="Lookup Index Tenant Id"
				IsNullable="true"
				DbName="LookIdxTentId"
				DataType="TenantIdGen" />
		<TableCol Name="LookupIndexId"
				Label="Lookup Index Id"
				IsNullable="true"
				DbName="LookIdxId"
				DataType="ScopeIdGen" />
		<TableCol Name="AltIndexTenantId"
				Label="Alt. Index Tenant Id"
				IsNullable="true"
				DbName="AltIdxTentId"
				DataType="TenantIdGen" />
		<TableCol Name="AltIndexId"
				Label="Alt. Index Id"
				IsNullable="true"
				DbName="AltIdxId"
				DataType="ScopeIdGen" />
		<TableCol Name="QualifyingTenantId"
				Label="Qualifying Tenant Id"
				IsNullable="true"
				DbName="QualTentId"
				DataType="TenantIdGen" />
		<TableCol Name="QualifyingTableId"
				Label="Qualifying Table Id"
				IsNullable="true"
				DbName="QualTblId"
				DataType="ScopeIdGen" />
		<BoolCol Name="IsInstantiable"
				Label="Is Instantiable"
				IsNullable="false"
				InitValue="true" />
		<BoolCol Name="HasHistory"
				Label="Has History"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="HasAuditColumns"
				Label="Has Audit Columns"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="IsMutable"
				Label="Is Mutable"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="IsServerOnly"
				Label="Is Server Table Only"
				IsNullable="false"
				InitValue="false" />
		<TableCol Name="LoaderBehaviour"
				Label="Loader Behaviour"
				IsNullable="false"
				DbName="LoadBehavId"
				DataType="LoaderBehaviourEnum" />
		<TableCol Name="SecScope"
				Label="Security Scope"
				IsNullable="false"
				DbName="SecScopeId"
				DataType="SecScopeEnum" />
		<TextCol Name="JObjMembers"
				IsNullable="true"
				DbName="jobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JObjInterface"
				IsNullable="true"
				DbName="jobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JObjImport"
				IsNullable="true"
				DbName="jobj_objimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JObjImplementation"
				IsNullable="true"
				DbName="jobj_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JEditObjMembers"
				IsNullable="true"
				DbName="jedt_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JEditObjInterface"
				IsNullable="true"
				DbName="jedt_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JEditObjImport"
				IsNullable="true"
				DbName="jtbl_eobjimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JEditObjImplementation"
				IsNullable="true"
				DbName="jedt_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableImport"
				IsNullable="true"
				DbName="jtbl_imp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableMembers"
				IsNullable="true"
				DbName="jtbl_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableInterface"
				IsNullable="true"
				DbName="jtbl_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableImplementation"
				IsNullable="true"
				DbName="jtbl_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableObjImport"
				IsNullable="true"
				DbName="jtbl_objimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableObjMembers"
				IsNullable="true"
				DbName="jtbl_objmemb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableObjInterface"
				IsNullable="true"
				DbName="jtbl_objxface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JTableObjImplementation"
				IsNullable="true"
				DbName="jtbl_objimpl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JDb2LUWTableImport"
				IsNullable="true"
				DbName="jtbl_db2imp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JDb2LUWTableMembers"
				IsNullable="true"
				DbName="jdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JDb2LUWTableImplementation"
				IsNullable="true"
				DbName="jdb2_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMSSqlTableImport"
				IsNullable="true"
				DbName="jtbl_msimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMSSqlTableMembers"
				IsNullable="true"
				DbName="jmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMSSqlTableImplementation"
				IsNullable="true"
				DbName="jmssql_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMySqlTableImport"
				IsNullable="true"
				DbName="jtbl_myimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMySqlTableMembers"
				IsNullable="true"
				DbName="jmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JMySqlTableImplementation"
				IsNullable="true"
				DbName="jmysql_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JOracleTableImport"
				IsNullable="true"
				DbName="jtbl_oraimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JOracleTableMembers"
				IsNullable="true"
				DbName="joracle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JOracleTableImplementation"
				IsNullable="true"
				DbName="joracle_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JPgSqlTableImport"
				IsNullable="true"
				DbName="jtbl_pgimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JPgSqlTableMembers"
				IsNullable="true"
				DbName="jpgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JPgSqlTableImplementation"
				IsNullable="true"
				DbName="jpgsql_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JRamTableImport"
				IsNullable="true"
				DbName="jtbl_ramimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JRamTableMembers"
				IsNullable="true"
				DbName="jram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JRamTableImplementation"
				IsNullable="true"
				DbName="jram_timpl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JSaxLoaderImport"
				IsNullable="true"
				DbName="jtbl_saxldimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JSaxLoaderStartElement"
				IsNullable="true"
				DbName="jsaxstart_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JSaxLoaderEndElement"
				IsNullable="true"
				DbName="jsaxend_impl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgTableImport"
				IsNullable="true"
				DbName="jxmtbl_imp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgTableFormatters"
				IsNullable="true"
				DbName="jxmtbl_fmt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRqstTableImport"
				IsNullable="true"
				DbName="jxmtbl_rqstimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRspnTableImport"
				IsNullable="true"
				DbName="jxmtbl_rspnimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgClientTableImport"
				IsNullable="true"
				DbName="jxmtbl_clntimp"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRqstTableBody"
				IsNullable="true"
				DbName="jxmtbl_rqstbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgRspnTableBody"
				IsNullable="true"
				DbName="jxmtbl_rspnbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="JXMsgClientTableBody"
				IsNullable="true"
				DbName="jxmtbl_clntbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppObjMembers"
				IsNullable="true"
				DbName="cppobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppObjInterface"
				IsNullable="true"
				DbName="cppobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppObjInclude"
				IsNullable="true"
				DbName="cppobj_objinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppObjImplementation"
				IsNullable="true"
				DbName="cppobj_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppEditObjMembers"
				IsNullable="true"
				DbName="cppedt_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppEditObjInterface"
				IsNullable="true"
				DbName="cppedt_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppEditObjInclude"
				IsNullable="true"
				DbName="cpptbl_eobjinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppEditObjImplementation"
				IsNullable="true"
				DbName="cppedt_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableInclude"
				IsNullable="true"
				DbName="cpptbl_inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableMembers"
				IsNullable="true"
				DbName="cpptbl_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableInterface"
				IsNullable="true"
				DbName="cpptbl_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableImplementation"
				IsNullable="true"
				DbName="cpptbl_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableObjInclude"
				IsNullable="true"
				DbName="cpptbl_objinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableObjMembers"
				IsNullable="true"
				DbName="cpptbl_objmemb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableObjInterface"
				IsNullable="true"
				DbName="cpptbl_objxface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppTableObjImplementation"
				IsNullable="true"
				DbName="cpptbl_objimpl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppDb2LUWTableInclude"
				IsNullable="true"
				DbName="cpptbl_db2inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppDb2LUWTableMembers"
				IsNullable="true"
				DbName="cppdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppDb2LUWTableImplementation"
				IsNullable="true"
				DbName="cppdb2_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMSSqlTableInclude"
				IsNullable="true"
				DbName="cpptbl_msinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMSSqlTableMembers"
				IsNullable="true"
				DbName="cppmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMSSqlTableImplementation"
				IsNullable="true"
				DbName="cppmssql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMySqlTableInclude"
				IsNullable="true"
				DbName="cpptbl_myinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMySqlTableMembers"
				IsNullable="true"
				DbName="cppmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppMySqlTableImplementation"
				IsNullable="true"
				DbName="cppmysql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppOracleTableInclude"
				IsNullable="true"
				DbName="cpptbl_orainc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppOracleTableMembers"
				IsNullable="true"
				DbName="cpporacle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppOracleTableImplementation"
				IsNullable="true"
				DbName="cpporacle_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppPgSqlTableInclude"
				IsNullable="true"
				DbName="cpptbl_pginc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppPgSqlTableMembers"
				IsNullable="true"
				DbName="cpppgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppPgSqlTableImplementation"
				IsNullable="true"
				DbName="cpppgsql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppRamTableInclude"
				IsNullable="true"
				DbName="cpptbl_raminc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppRamTableMembers"
				IsNullable="true"
				DbName="cppram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppRamTableImplementation"
				IsNullable="true"
				DbName="cppram_tincl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppSaxLoaderInclude"
				IsNullable="true"
				DbName="cpptbl_saxldinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppSaxLoaderStartElement"
				IsNullable="true"
				DbName="cppsaxstart_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppSaxLoaderEndElement"
				IsNullable="true"
				DbName="cppsaxend_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgTableInclude"
				IsNullable="true"
				DbName="cppxmtbl_inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgTableFormatters"
				IsNullable="true"
				DbName="cppxmtbl_fmt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRqstTableInclude"
				IsNullable="true"
				DbName="cppxmtbl_rqstinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRspnTableInclude"
				IsNullable="true"
				DbName="cppxmtbl_rspninc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgClientTableInclude"
				IsNullable="true"
				DbName="cppxmtbl_clntinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRqstTableBody"
				IsNullable="true"
				DbName="cppxmtbl_rqstbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgRspnTableBody"
				IsNullable="true"
				DbName="cppxmtbl_rspnbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CppXMsgClientTableBody"
				IsNullable="true"
				DbName="cppxmtbl_clntbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppObjMembers"
				IsNullable="true"
				DbName="hppobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppObjInterface"
				IsNullable="true"
				DbName="hppobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppObjInclude"
				IsNullable="true"
				DbName="hppobj_objinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppObjImplementation"
				IsNullable="true"
				DbName="hppobj_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppEditObjMembers"
				IsNullable="true"
				DbName="hppedt_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppEditObjInterface"
				IsNullable="true"
				DbName="hppedt_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppEditObjInclude"
				IsNullable="true"
				DbName="hpptbl_eobjinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppEditObjImplementation"
				IsNullable="true"
				DbName="hppedt_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableInclude"
				IsNullable="true"
				DbName="hpptbl_inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableMembers"
				IsNullable="true"
				DbName="hpptbl_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableInterface"
				IsNullable="true"
				DbName="hpptbl_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableImplementation"
				IsNullable="true"
				DbName="hpptbl_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableObjInclude"
				IsNullable="true"
				DbName="hpptbl_objinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableObjMembers"
				IsNullable="true"
				DbName="hpptbl_objmemb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableObjInterface"
				IsNullable="true"
				DbName="hpptbl_objxface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppTableObjImplementation"
				IsNullable="true"
				DbName="hpptbl_objimpl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppDb2LUWTableInclude"
				IsNullable="true"
				DbName="hpptbl_db2inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppDb2LUWTableMembers"
				IsNullable="true"
				DbName="hppdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppDb2LUWTableImplementation"
				IsNullable="true"
				DbName="hppdb2_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMSSqlTableInclude"
				IsNullable="true"
				DbName="hpptbl_msinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMSSqlTableMembers"
				IsNullable="true"
				DbName="hppmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMSSqlTableImplementation"
				IsNullable="true"
				DbName="hppmssql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMySqlTableInclude"
				IsNullable="true"
				DbName="hpptbl_myinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMySqlTableMembers"
				IsNullable="true"
				DbName="hppmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppMySqlTableImplementation"
				IsNullable="true"
				DbName="hppmysql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppOracleTableInclude"
				IsNullable="true"
				DbName="hpptbl_orainc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppOracleTableMembers"
				IsNullable="true"
				DbName="hpporacle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppOracleTableImplementation"
				IsNullable="true"
				DbName="hpporacle_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppPgSqlTableInclude"
				IsNullable="true"
				DbName="hpptbl_pginc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppPgSqlTableMembers"
				IsNullable="true"
				DbName="hpppgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppPgSqlTableImplementation"
				IsNullable="true"
				DbName="hpppgsql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppRamTableInclude"
				IsNullable="true"
				DbName="hpptbl_raminc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppRamTableMembers"
				IsNullable="true"
				DbName="hppram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppRamTableImplementation"
				IsNullable="true"
				DbName="hppram_tincl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppSaxLoaderInclude"
				IsNullable="true"
				DbName="hpptbl_saxldinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppSaxLoaderStartElement"
				IsNullable="true"
				DbName="hppsaxstart_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppSaxLoaderEndElement"
				IsNullable="true"
				DbName="hppsaxend_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgTableInclude"
				IsNullable="true"
				DbName="hppxmtbl_inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgTableFormatters"
				IsNullable="true"
				DbName="hppxmtbl_fmt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRqstTableInclude"
				IsNullable="true"
				DbName="hppxmtbl_rqstinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRspnTableInclude"
				IsNullable="true"
				DbName="hppxmtbl_rspninc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgClientTableInclude"
				IsNullable="true"
				DbName="hppxmtbl_clntinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRqstTableBody"
				IsNullable="true"
				DbName="hppxmtbl_rqstbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgRspnTableBody"
				IsNullable="true"
				DbName="hppxmtbl_rspnbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="HppXMsgClientTableBody"
				IsNullable="true"
				DbName="hppxmtbl_clntbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsObjMembers"
				IsNullable="true"
				DbName="csobj_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsObjInterface"
				IsNullable="true"
				DbName="csobj_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsObjUsing"
				IsNullable="true"
				DbName="csobj_objinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsObjImplementation"
				IsNullable="true"
				DbName="csobj_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsEditObjMembers"
				IsNullable="true"
				DbName="csedt_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsEditObjInterface"
				IsNullable="true"
				DbName="csedt_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsEditObjUsing"
				IsNullable="true"
				DbName="cstbl_eobjinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsEditObjImplementation"
				IsNullable="true"
				DbName="csedt_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableUsing"
				IsNullable="true"
				DbName="cstbl_inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableMembers"
				IsNullable="true"
				DbName="cstbl_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableInterface"
				IsNullable="true"
				DbName="cstbl_xface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableImplementation"
				IsNullable="true"
				DbName="cstbl_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableObjUsing"
				IsNullable="true"
				DbName="cstbl_objinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableObjMembers"
				IsNullable="true"
				DbName="cstbl_objmemb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableObjInterface"
				IsNullable="true"
				DbName="cstbl_objxface"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsTableObjImplementation"
				IsNullable="true"
				DbName="cstbl_objimpl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsDb2LUWTableUsing"
				IsNullable="true"
				DbName="cstbl_db2inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsDb2LUWTableMembers"
				IsNullable="true"
				DbName="csdb2_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsDb2LUWTableImplementation"
				IsNullable="true"
				DbName="csdb2_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMSSqlTableUsing"
				IsNullable="true"
				DbName="cstbl_msinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMSSqlTableMembers"
				IsNullable="true"
				DbName="csmssql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMSSqlTableImplementation"
				IsNullable="true"
				DbName="csmssql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMySqlTableUsing"
				IsNullable="true"
				DbName="cstbl_myinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMySqlTableMembers"
				IsNullable="true"
				DbName="csmysql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsMySqlTableImplementation"
				IsNullable="true"
				DbName="csmysql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsOracleTableUsing"
				IsNullable="true"
				DbName="cstbl_orainc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsOracleTableMembers"
				IsNullable="true"
				DbName="csoracle_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsOracleTableImplementation"
				IsNullable="true"
				DbName="csoracle_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsPgSqlTableUsing"
				IsNullable="true"
				DbName="cstbl_pginc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsPgSqlTableMembers"
				IsNullable="true"
				DbName="cspgsql_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsPgSqlTableImplementation"
				IsNullable="true"
				DbName="cspgsql_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsRamTableUsing"
				IsNullable="true"
				DbName="cstbl_raminc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsRamTableMembers"
				IsNullable="true"
				DbName="csram_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsRamTableImplementation"
				IsNullable="true"
				DbName="csram_tincl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsSaxLoaderUsing"
				IsNullable="true"
				DbName="cstbl_saxldinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsSaxLoaderStartElement"
				IsNullable="true"
				DbName="cssaxstart_memb"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsSaxLoaderEndElement"
				IsNullable="true"
				DbName="cssaxend_incl"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgTableUsing"
				IsNullable="true"
				DbName="csxmtbl_inc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgTableFormatters"
				IsNullable="true"
				DbName="csxmtbl_fmt"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRqstTableUsing"
				IsNullable="true"
				DbName="csxmtbl_rqstinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRspnTableUsing"
				IsNullable="true"
				DbName="csxmtbl_rspninc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgClientTableUsing"
				IsNullable="true"
				DbName="csxmtbl_clntinc"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRqstTableBody"
				IsNullable="true"
				DbName="csxmtbl_rqstbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgRspnTableBody"
				IsNullable="true"
				DbName="csxmtbl_rspnbdy"
				MaxLen="2000000"
				InitValue="" />
		<TextCol Name="CsXMsgClientTableBody"
				IsNullable="true"
				DbName="csxmtbl_clntbdy"
				MaxLen="2000000"
				InitValue="" />
		<PrimaryIndex Name="TableIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tbldef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TableSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tbldef_schemaidx"
				ShortName="SchemaDef"
				Suffix="SchemaDefIdx"
				Label="SchemaDefIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<Index Name="TableDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tbldef_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="TableUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="table_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="TableSchemaCodeIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tabledef_xscd"
				Suffix="SchemaCdIdx"
				Label="SchemaCdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
			<IndexCol Name="TableClassCode" IsAscending="true" />
		</Index>
		<Index Name="TablePrimaryIndexIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="def_tbl_xpidx"
				Suffix="PrimaryIndexIdx"
				Label="PrimaryIndexIdx" >
			<IndexCol Name="PrimaryIndexTenantId" IsAscending="true" />
			<IndexCol Name="PrimaryIndexId" IsAscending="true" />
		</Index>
		<Index Name="TableLookupIndexIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="def_tbl_xlookupidx"
				Suffix="LookupIndexIdx"
				Label="LookupIndexIdx" >
			<IndexCol Name="LookupIndexTenantId" IsAscending="true" />
			<IndexCol Name="LookupIndexId" IsAscending="true" />
		</Index>
		<Index Name="TableAltIndexIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="def_tbl_xaltidx"
				Suffix="AltIndexIdx"
				Label="AltIndexIdx" >
			<IndexCol Name="AltIndexTenantId" IsAscending="true" />
			<IndexCol Name="AltIndexId" IsAscending="true" />
		</Index>
		<Index Name="TableQualifyingTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="def_tbl_xqtblidx"
				Suffix="QualTableIdx"
				Label="Qualifying Table Index" >
			<IndexCol Name="QualifyingTenantId" IsAscending="true" />
			<IndexCol Name="QualifyingTableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="def_tbl_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TableIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>

		<CafeObjInterface>
	List&lt;I$SchemaName$RelationObj&gt; getOnlyOwnerRelations();
	List&lt;I$SchemaName$RelationObj&gt; getContainerOwnerRelations();
	I$SchemaName$RelationObj getContainerRelation();
	I$SchemaName$RelationObj getInheritedContainerRelation();
	I$SchemaName$RelationObj getOwnerRelation();
	I$SchemaName$RelationObj getInheritedOwnerRelation();
	List&lt;I$SchemaName$RelationObj&gt; getOwnerLookupRelations();
	List&lt;I$SchemaName$RelationObj&gt; getOwnerContainerNamedLookupChainRelations();
	List&lt;I$SchemaName$AtomObj&gt; getChildrenAtoms();
	I$SchemaName$RelationObj getSuperClassRelation();
	List&lt;I$SchemaName$RelationObj&gt; getSubClassRelations();
	I$SchemaName$IndexObj getPrimaryKeyIndex();
	List&lt;I$SchemaName$RelationObj&gt; getFactoryOwnerRelations();
	List&lt;I$SchemaName$IndexObj&gt; getInheritedIndexes();
	List&lt;I$SchemaName$IndexObj&gt; getChildrenIndexes();
	List&lt;I$SchemaName$RelationObj&gt; getInheritedRelations();
	List&lt;I$SchemaName$RelationObj&gt; getChildrenRelations();
</CafeObjInterface>

		<CafeObjImplementation>
	public List&lt;I$SchemaName$RelationObj&gt; getOnlyOwnerRelations() {
		I$SchemaName$TableObj tableDef;
		I$SchemaName$RelationObj relationDef = null;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
				list.add(relationDef);
			}
		}

		I$SchemaName$RelationObj superClass = getSuperClassRelation();
		while( superClass != null ) {
			tableDef = superClass.getRequiredLookupToTable();
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
					list.add(relationDef);
				}
			}
			superClass = tableDef.getSuperClassRelation();
		}

		childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
				list.add(relationDef);
			}
		}

		superClass = getSuperClassRelation();
		while( superClass != null ) {
			tableDef = superClass.getRequiredLookupToTable();
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
					list.add(relationDef);
				}
			}
			superClass = tableDef.getSuperClassRelation();
		}

		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getContainerOwnerRelations() {
		I$SchemaName$TableObj tableDef;
		I$SchemaName$RelationObj relationDef = null;
		I$EffSchemaName$Schema.RelationTypeEnum relType;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			relType = relationDef.getRequiredRelationType();
			if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container ) )
			{
				list.add(relationDef);
			}
		}

		I$SchemaName$RelationObj superClass = getSuperClassRelation();
		while( superClass != null ) {
			tableDef = superClass.getRequiredLookupToTable();
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				relType = relationDef.getRequiredRelationType();
				if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container ) )
				{
					list.add(relationDef);
				}
			}
			superClass = tableDef.getSuperClassRelation();
		}

		return( list );
	}

	public I$SchemaName$RelationObj getContainerRelation() {
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
				return( relationDef );
			}
		}
		return( null );
	}

	public I$SchemaName$RelationObj getInheritedContainerRelation() {
		I$SchemaName$RelationObj inheritedContainerRelation = null;
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations;
		I$SchemaName$TableObj tableDef = this;
		while( ( inheritedContainerRelation == null ) &amp;&amp; ( tableDef != null ) ) {
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
					return( relationDef );
				}
			}
			relationDef = tableDef.getSuperClassRelation();
			if( relationDef == null ) {
				tableDef = null;
			}
			else {
				tableDef = relationDef.getRequiredLookupToTable();
			}
		}
		return( null );
	}

	public I$SchemaName$RelationObj getOwnerRelation() {
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
				return( relationDef );
			}
		}
		return( null );
	}

	public I$SchemaName$RelationObj getInheritedOwnerRelation() {
		I$SchemaName$TableObj tableDef = this;
		I$SchemaName$RelationObj inheritedOwnerRelation = null;
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations;
		while( ( inheritedOwnerRelation == null ) &amp;&amp; ( tableDef != null ) ) {
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
					return( relationDef );
				}
			}
			relationDef = tableDef.getSuperClassRelation();
			if( relationDef == null ) {
				tableDef = null;
			}
			else {
				tableDef = relationDef.getRequiredLookupToTable();
			}
		}
		return( null );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getOwnerLookupRelations() {
		I$EffSchemaName$Schema.RelationTypeEnum relType;
		I$SchemaName$RelationObj relationDef;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext())
		{
			relationDef = childrenRelations.next();
			relType = relationDef.getRequiredRelationType();
			if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Lookup )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) )
			{
				list.add(relationDef);
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getOwnerContainerNamedLookupChainRelations() {
		I$EffSchemaName$Schema.RelationTypeEnum relType;
		I$SchemaName$RelationObj relationDef;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		List&lt;I$SchemaName$ChainObj&gt; componentChains = getOptionalComponentsChains();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			relType = relationDef.getRequiredRelationType();
			if( relType == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				;
			}
			else if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container )
				|| ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) )
			{
				list.add(relationDef);
			}
			else {
				if( ! relationDef.getRequiredIsXsdContainer() ) {
					I$SchemaName$IndexObj toIndex = relationDef.getRequiredLookupToIndex();
					if( toIndex.getRequiredIsUnique() ) {
						boolean referencedByChain = false;
						Iterator&lt;I$SchemaName$ChainObj&gt; iterChain = componentChains.iterator();
						while( ( ! referencedByChain ) &amp;&amp; iterChain.hasNext() ) {
							I$SchemaName$ChainObj chain = iterChain.next();
							if( chain.getRequiredLookupPrevRel() == relationDef ) {
								referencedByChain = true;
							}
							else if( chain.getRequiredLookupNextRel() == relationDef ) {
								referencedByChain = true;
							}
						}
						if( referencedByChain ) {
							list.add( relationDef );
						}
						else {
							I$SchemaName$TableObj toTable = relationDef.getRequiredLookupToTable();
							I$SchemaName$IndexObj lookupIndex = toTable.getOptionalLookupLookupIndex();
							while( ( lookupIndex == null ) &amp;&amp; ( toTable != null ) ) {
								I$SchemaName$RelationObj superRelation = toTable.getSuperClassRelation();
								if( superRelation != null ) {
									toTable = superRelation.getRequiredLookupToTable();
									if( toTable != null ) {
										lookupIndex = toTable.getOptionalLookupLookupIndex();
									}
								}
								else {
									toTable = null;
								}
							}
							if( lookupIndex != null ) {
								list.add( relationDef );
							}
						}
					}
				}
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$AtomObj&gt; getChildrenAtoms() {
		List&lt;I$SchemaName$AtomObj&gt; list = new LinkedList&lt;I$SchemaName$AtomObj&gt;();
		Iterator&lt;I$SchemaName$ValueObj&gt; childrenColumns = getOptionalComponentsColumns().iterator();
		while (childrenColumns.hasNext())
		{
			I$SchemaName$ValueObj colDef = childrenColumns.next();
			if( colDef instanceof I$SchemaName$AtomObj)
			{
				list.add( (I$SchemaName$AtomObj)colDef);
			}
		}
		return( list );
	}

	public I$SchemaName$RelationObj getSuperClassRelation() {
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext())
		{
			I$SchemaName$RelationObj relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				return( relationDef );
			}
		}
		return( null );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getSubClassRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; reverseRelations = getOptionalChildrenReverseRelations().iterator();
		while (reverseRelations.hasNext())
		{
			I$SchemaName$RelationObj reverseRelation = reverseRelations.next();
			if( reverseRelation.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				list.add(reverseRelation);
			}
		}
		return( list );
	}

	public I$SchemaName$IndexObj getPrimaryKeyIndex() {
		I$SchemaName$IndexObj primaryIndex = getOptionalLookupPrimaryIndex();
		return( primaryIndex );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getFactoryOwnerRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; ownerRelations = getContainerOwnerRelations().iterator();
		while (ownerRelations.hasNext())
		{
			// throw new NotImplementedException();
			I$SchemaName$RelationObj ownerRelation = ownerRelations.next();
			if( ownerRelation.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				list.add(ownerRelation);
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$IndexObj&gt; getInheritedIndexes() {
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		I$SchemaName$RelationObj superClassRelation = getSuperClassRelation();
		if( superClassRelation != null)
		{
			Iterator&lt;I$SchemaName$IndexObj&gt; superClassInheritedIndexes
				= superClassRelation.getRequiredLookupToTable().getInheritedIndexes().iterator();
			while (superClassInheritedIndexes.hasNext())
			{
				list.add(superClassInheritedIndexes.next());
			}
			Iterator&lt;I$SchemaName$IndexObj&gt; myIndexes = getChildrenIndexes().iterator();
			while( myIndexes.hasNext() )
			{
				list.add( myIndexes.next() );
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$IndexObj&gt; getChildrenIndexes() {
		Iterator&lt;I$SchemaName$IndexObj&gt; iter = getOptionalComponentsIndex().iterator();
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		while( iter.hasNext() ) {
			list.add( iter.next() );
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getInheritedRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		I$SchemaName$RelationObj superClassRelation = getSuperClassRelation();
		if( superClassRelation != null)
		{
			Iterator&lt;I$SchemaName$RelationObj&gt; superClassInheritedRelations
				= superClassRelation.getRequiredLookupToTable().getInheritedRelations().iterator();
			while (superClassInheritedRelations.hasNext())
			{
				list.add(superClassInheritedRelations.next());
			}
			Iterator&lt;I$SchemaName$RelationObj&gt; myRelations = getChildrenRelations().iterator();
			while (myRelations.hasNext())
			{
				list.add(myRelations.next());
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getChildrenRelations() {
		List&lt;I$SchemaName$RelationObj&gt; childrenRelations = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Collection&lt;I$SchemaName$RelationObj&gt; cltn = getOptionalComponentsRelation();
		Iterator&lt;I$SchemaName$RelationObj&gt; iter = cltn.iterator();
		while( iter.hasNext() ) {
			childrenRelations.add( iter.next() );
		}
		return( childrenRelations );
	}
</CafeObjImplementation>

		<CafeEditObjImplementation>
	public List&lt;I$SchemaName$RelationObj&gt; getOnlyOwnerRelations() {
		I$SchemaName$TableObj tableDef;
		I$SchemaName$RelationObj relationDef = null;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
				list.add(relationDef);
			}
		}

		I$SchemaName$RelationObj superClass = getSuperClassRelation();
		while( superClass != null ) {
			tableDef = superClass.getRequiredLookupToTable();
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
					list.add(relationDef);
				}
			}
			superClass = tableDef.getSuperClassRelation();
		}

		childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
				list.add(relationDef);
			}
		}

		superClass = getSuperClassRelation();
		while( superClass != null ) {
			tableDef = superClass.getRequiredLookupToTable();
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
					list.add(relationDef);
				}
			}
			superClass = tableDef.getSuperClassRelation();
		}

		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getContainerOwnerRelations() {
		I$SchemaName$TableObj tableDef;
		I$SchemaName$RelationObj relationDef = null;
		I$EffSchemaName$Schema.RelationTypeEnum relType;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			relType = relationDef.getRequiredRelationType();
			if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container ) )
			{
				list.add(relationDef);
			}
		}

		I$SchemaName$RelationObj superClass = getSuperClassRelation();
		while( superClass != null ) {
			tableDef = superClass.getRequiredLookupToTable();
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				relType = relationDef.getRequiredRelationType();
				if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container ) )
				{
					list.add(relationDef);
				}
			}
			superClass = tableDef.getSuperClassRelation();
		}

		return( list );
	}

	public I$SchemaName$RelationObj getContainerRelation() {
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
				return( relationDef );
			}
		}
		return( null );
	}

	public I$SchemaName$RelationObj getInheritedContainerRelation() {
		I$SchemaName$RelationObj inheritedContainerRelation = null;
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations;
		I$SchemaName$TableObj tableDef = this;
		while( ( inheritedContainerRelation == null ) &amp;&amp; ( tableDef != null ) ) {
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Container ) {
					return( relationDef );
				}
			}
			relationDef = tableDef.getSuperClassRelation();
			if( relationDef == null ) {
				tableDef = null;
			}
			else {
				tableDef = relationDef.getRequiredLookupToTable();
			}
		}
		return( null );
	}

	public I$SchemaName$RelationObj getOwnerRelation() {
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
				return( relationDef );
			}
		}
		return( null );
	}

	public I$SchemaName$RelationObj getInheritedOwnerRelation() {
		I$SchemaName$TableObj tableDef = this;
		I$SchemaName$RelationObj inheritedOwnerRelation = null;
		I$SchemaName$RelationObj relationDef;
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations;
		while( ( inheritedOwnerRelation == null ) &amp;&amp; ( tableDef != null ) ) {
			childrenRelations = tableDef.getOptionalComponentsRelation().iterator();
			while (childrenRelations.hasNext()) {
				relationDef = childrenRelations.next();
				if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) {
					return( relationDef );
				}
			}
			relationDef = tableDef.getSuperClassRelation();
			if( relationDef == null ) {
				tableDef = null;
			}
			else {
				tableDef = relationDef.getRequiredLookupToTable();
			}
		}
		return( null );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getOwnerLookupRelations() {
		I$EffSchemaName$Schema.RelationTypeEnum relType;
		I$SchemaName$RelationObj relationDef;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext())
		{
			relationDef = childrenRelations.next();
			relType = relationDef.getRequiredRelationType();
			if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Lookup )
			 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) )
			{
				list.add(relationDef);
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getOwnerContainerNamedLookupChainRelations() {
		I$EffSchemaName$Schema.RelationTypeEnum relType;
		I$SchemaName$RelationObj relationDef;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		List&lt;I$SchemaName$ChainObj&gt; componentChains = getOptionalComponentsChains();
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext()) {
			relationDef = childrenRelations.next();
			relType = relationDef.getRequiredRelationType();
			if( relType == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				;
			}
			else if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container )
				|| ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) )
			{
				list.add(relationDef);
			}
			else {
				if( ! relationDef.getRequiredIsXsdContainer() ) {
					I$SchemaName$IndexObj toIndex = relationDef.getRequiredLookupToIndex();
					if( toIndex.getRequiredIsUnique() ) {
						boolean referencedByChain = false;
						Iterator&lt;I$SchemaName$ChainObj&gt; iterChain = componentChains.iterator();
						while( ( ! referencedByChain ) &amp;&amp; iterChain.hasNext() ) {
							I$SchemaName$ChainObj chain = iterChain.next();
							if( chain.getRequiredLookupPrevRel() == relationDef ) {
								referencedByChain = true;
							}
							else if( chain.getRequiredLookupNextRel() == relationDef ) {
								referencedByChain = true;
							}
						}
						if( referencedByChain ) {
							list.add( relationDef );
						}
						else {
							I$SchemaName$TableObj toTable = relationDef.getRequiredLookupToTable();
							I$SchemaName$IndexObj lookupIndex = toTable.getOptionalLookupLookupIndex();
							while( ( lookupIndex == null ) &amp;&amp; ( toTable != null ) ) {
								I$SchemaName$RelationObj superRelation = toTable.getSuperClassRelation();
								if( superRelation != null ) {
									toTable = superRelation.getRequiredLookupToTable();
									if( toTable != null ) {
										lookupIndex = toTable.getOptionalLookupLookupIndex();
									}
								}
								else {
									toTable = null;
								}
							}
							if( lookupIndex != null ) {
								list.add( relationDef );
							}
						}
					}
				}
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$AtomObj&gt; getChildrenAtoms() {
		List&lt;I$SchemaName$AtomObj&gt; list = new LinkedList&lt;I$SchemaName$AtomObj&gt;();
		Iterator&lt;I$SchemaName$ValueObj&gt; childrenColumns = getOptionalComponentsColumns().iterator();
		while (childrenColumns.hasNext())
		{
			I$SchemaName$ValueObj colDef = childrenColumns.next();
			if( colDef instanceof I$SchemaName$AtomObj)
			{
				list.add( (I$SchemaName$AtomObj)colDef);
			}
		}
		return( list );
	}

	public I$SchemaName$RelationObj getSuperClassRelation() {
		Iterator&lt;I$SchemaName$RelationObj&gt; childrenRelations = getOptionalComponentsRelation().iterator();
		while (childrenRelations.hasNext())
		{
			I$SchemaName$RelationObj relationDef = childrenRelations.next();
			if( relationDef.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				return( relationDef );
			}
		}
		return( null );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getSubClassRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; reverseRelations = getOptionalChildrenReverseRelations().iterator();
		while (reverseRelations.hasNext())
		{
			I$SchemaName$RelationObj reverseRelation = reverseRelations.next();
			if( reverseRelation.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				list.add(reverseRelation);
			}
		}
		return( list );
	}

	public I$SchemaName$IndexObj getPrimaryKeyIndex() {
		I$SchemaName$IndexObj primaryIndex = getOptionalLookupPrimaryIndex();
		return( primaryIndex );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getFactoryOwnerRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; ownerRelations = getContainerOwnerRelations().iterator();
		while (ownerRelations.hasNext())
		{
			// throw new NotImplementedException();
			I$SchemaName$RelationObj ownerRelation = ownerRelations.next();
			if( ownerRelation.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Superclass ) {
				list.add(ownerRelation);
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$IndexObj&gt; getInheritedIndexes() {
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		I$SchemaName$RelationObj superClassRelation = getSuperClassRelation();
		if( superClassRelation != null)
		{
			Iterator&lt;I$SchemaName$IndexObj&gt; superClassInheritedIndexes
				= superClassRelation.getRequiredLookupToTable().getInheritedIndexes().iterator();
			while (superClassInheritedIndexes.hasNext())
			{
				list.add(superClassInheritedIndexes.next());
			}
			Iterator&lt;I$SchemaName$IndexObj&gt; myIndexes = getChildrenIndexes().iterator();
			while( myIndexes.hasNext() )
			{
				list.add( myIndexes.next() );
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$IndexObj&gt; getChildrenIndexes() {
		Iterator&lt;I$SchemaName$IndexObj&gt; iter = getOptionalComponentsIndex().iterator();
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		while( iter.hasNext() ) {
			list.add( iter.next() );
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getInheritedRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		I$SchemaName$RelationObj superClassRelation = getSuperClassRelation();
		if( superClassRelation != null)
		{
			Iterator&lt;I$SchemaName$RelationObj&gt; superClassInheritedRelations
				= superClassRelation.getRequiredLookupToTable().getInheritedRelations().iterator();
			while (superClassInheritedRelations.hasNext())
			{
				list.add(superClassInheritedRelations.next());
			}
			Iterator&lt;I$SchemaName$RelationObj&gt; myRelations = getChildrenRelations().iterator();
			while (myRelations.hasNext())
			{
				list.add(myRelations.next());
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getChildrenRelations() {
		List&lt;I$SchemaName$RelationObj&gt; childrenRelations = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Collection&lt;I$SchemaName$RelationObj&gt; cltn = getOptionalComponentsRelation();
		Iterator&lt;I$SchemaName$RelationObj&gt; iter = cltn.iterator();
		while( iter.hasNext() ) {
			childrenRelations.add( iter.next() );
		}
		return( childrenRelations );
	}
</CafeEditObjImplementation>

		<CPlusObjImplementation>
	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getOnlyOwnerRelations() {
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef = NULL;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();

		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
				list.push_back( relationDef );
			}
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClass = getSuperClassRelation();
		while( superClass != NULL ) {
			tableDef = superClass-&gt;getRequiredLookupToTable();
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
					list.push_back( relationDef );
				}
			}
			superClass = tableDef-&gt;getSuperClassRelation();
		}

		childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
				list.push_back( relationDef );
			}
		}

		superClass = getSuperClassRelation();
		while( superClass != NULL ) {
			tableDef = superClass-&gt;getRequiredLookupToTable();
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
					list.push_back( relationDef );
				}
			}
			superClass = tableDef-&gt;getSuperClassRelation();
		}

		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getContainerOwnerRelations() {
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef = NULL;
		$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();

		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			relType = relationDef-&gt;getRequiredRelationType();
			if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) )
			{
				list.push_back( relationDef );
			}
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClass = getSuperClassRelation();
		while( superClass != NULL ) {
			tableDef = superClass-&gt;getRequiredLookupToTable();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				relType = relationDef-&gt;getRequiredRelationType();
				if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) )
				{
					list.push_back( relationDef );
				}
			}
			superClass = tableDef-&gt;getSuperClassRelation();
		}

		return( list );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$Obj::getContainerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
				return( relationDef );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$Obj::getInheritedContainerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* inheritedContainerRelation = NULL;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = this;
		while( ( inheritedContainerRelation == NULL ) &amp;&amp; ( tableDef != NULL ) ) {
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
					return( relationDef );
				}
			}
			relationDef = tableDef-&gt;getSuperClassRelation();
			if( relationDef == NULL ) {
				tableDef = NULL;
			}
			else {
				tableDef = relationDef-&gt;getRequiredLookupToTable();
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$Obj::getOwnerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
				return( relationDef );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$Obj::getInheritedOwnerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = this;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* inheritedOwnerRelation = NULL;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations;
		while( ( inheritedOwnerRelation == NULL ) &amp;&amp; ( tableDef != NULL ) ) {
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
					return( relationDef );
				}
			}
			relationDef = tableDef-&gt;getSuperClassRelation();
			if( relationDef == NULL ) {
				tableDef = NULL;
			}
			else {
				tableDef = relationDef-&gt;getRequiredLookupToTable();
			}
		}
		return( NULL );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getOwnerLookupRelations() {
		$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			relType = relationDef-&gt;getRequiredRelationType();
			if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Lookup )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) )
			{
				list.push_back( relationDef );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getOwnerContainerNamedLookupChainRelations() {
		$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$ChainObj*&gt; componentChains = getOptionalComponentsChains();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			relType = relationDef-&gt;getRequiredRelationType();
			if( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				;
			}
			else if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container )
				|| ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) )
			{
				list.push_back( relationDef );
			}
			else {
				if( ! relationDef-&gt;getRequiredIsXsdContainer() ) {
					$CPlusDefNamespace$::I$DefSchemaName$IndexObj* toIndex = relationDef-&gt;getRequiredLookupToIndex();
					if( toIndex-&gt;getRequiredIsUnique() ) {
						bool referencedByChain = false;
						std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$ChainObj*&gt; workChain = componentChains;
						for( auto iterWorkChain = workChain.begin(); ( ! referencedByChain ) &amp;&amp; ( iterWorkChain != workChain.end() ); iterWorkChain ++ ) {
							$CPlusDefNamespace$::I$DefSchemaName$ChainObj* chain = *iterWorkChain;
							if( chain-&gt;getRequiredLookupPrevRel() == relationDef ) {
								referencedByChain = true;
							}
							else if( chain-&gt;getRequiredLookupNextRel() == relationDef ) {
								referencedByChain = true;
							}
						}
						if( referencedByChain ) {
							list.push_back( relationDef );
						}
						else {
							$CPlusDefNamespace$::I$DefSchemaName$TableObj* toTable = relationDef-&gt;getRequiredLookupToTable();
							$CPlusDefNamespace$::I$DefSchemaName$IndexObj* lookupIndex = toTable-&gt;getOptionalLookupLookupIndex();
							while( ( lookupIndex == NULL ) &amp;&amp; ( toTable != NULL ) ) {
								$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superRelation = toTable-&gt;getSuperClassRelation();
								if( superRelation != NULL ) {
									toTable = superRelation-&gt;getRequiredLookupToTable();
									if( toTable != NULL ) {
										lookupIndex = toTable-&gt;getOptionalLookupLookupIndex();
									}
								}
								else {
									toTable = NULL;
								}
							}
							if( lookupIndex != NULL ) {
								list.push_back( relationDef );
							}
						}
					}
				}
			}
		}

		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt; $SchemaName$$TableName$Obj::getChildrenAtoms() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$ValueObj* colDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$ValueObj*&gt; childrenColumns = getOptionalComponentsColumns();
		for( auto iterChildrenColumns = childrenColumns.begin(); iterChildrenColumns != childrenColumns.end(); iterChildrenColumns ++ ) {
			colDef = *iterChildrenColumns;
			if( colDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				list.push_back( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( colDef ) );
			}
		}
		return( list );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$Obj::getSuperClassRelation() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				return( relationDef );
			}
		}
		return( NULL );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getSubClassRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; reverseRelations = getOptionalChildrenReverseRelations();
		for( auto iterChildrenRelations = reverseRelations.begin(); iterChildrenRelations != reverseRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				list.push_back( relationDef );
			}
		}
		return( list );
	}

	$CPlusDefNamespace$::I$DefSchemaName$IndexObj* $SchemaName$$TableName$Obj::getPrimaryKeyIndex() {
		$CPlusDefNamespace$::I$DefSchemaName$IndexObj* primaryIndex = getOptionalLookupPrimaryIndex();
		return( primaryIndex );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getFactoryOwnerRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = getContainerOwnerRelations();
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			ownerRelation = *iterOwnerRelations;
			if( ownerRelation-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				list.push_back( ownerRelation );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$Obj::getInheritedIndexes() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClassRelation = getSuperClassRelation();
		if( superClassRelation != NULL ) {
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; superClassInheritedIndexes = superClassRelation-&gt;getRequiredLookupToTable()-&gt;getInheritedIndexes();
			for( auto iterInherited = superClassInheritedIndexes.begin(); iterInherited != superClassInheritedIndexes.end(); iterInherited ++ ) {
				list.push_back( *iterInherited );
			}
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexes = getChildrenIndexes();
			for( auto iterMyIndexes = myIndexes.begin(); iterMyIndexes != myIndexes.end(); iterMyIndexes ++ ) {
				list.push_back( *iterMyIndexes );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$Obj::getChildrenIndexes() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexes = getOptionalComponentsIndex();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		for( auto iterMyIndexes = myIndexes.begin(); iterMyIndexes != myIndexes.end(); iterMyIndexes ++ ) {
			list.push_back( *iterMyIndexes );
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getInheritedRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClassRelation = getSuperClassRelation();
		if( superClassRelation != NULL ) {
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; superClassInheritedRelations = superClassRelation-&gt;getRequiredLookupToTable()-&gt;getInheritedRelations();
			for( auto iterRelations = superClassInheritedRelations.begin(); iterRelations != superClassInheritedRelations.end(); iterRelations ++ ) {
				list.push_back( *iterRelations );
			}
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; myRelations = getChildrenRelations();
			for( auto iterMyRelations = myRelations.begin(); iterMyRelations != myRelations.end(); iterMyRelations ++ ) {
				list.push_back( *iterMyRelations );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getChildrenRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; cltn = getOptionalComponentsRelation();
		for( auto iterCltn = cltn.begin(); iterCltn != cltn.end(); iterCltn ++ ) {
			childrenRelations.push_back( *iterCltn );
		}
		return( childrenRelations );
	}
</CPlusObjImplementation>

		<CPlusEditObjImplementation>
	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getOnlyOwnerRelations() {
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef = NULL;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
				list.push_back( relationDef );
			}
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClass = getSuperClassRelation();
		while( superClass != NULL ) {
			tableDef = superClass-&gt;getRequiredLookupToTable();
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
					list.push_back( relationDef );
				}
			}
			superClass = tableDef-&gt;getSuperClassRelation();
		}

		childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
				list.push_back( relationDef );
			}
		}

		superClass = getSuperClassRelation();
		while( superClass != NULL ) {
			tableDef = superClass-&gt;getRequiredLookupToTable();
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
					list.push_back( relationDef );
				}
			}
			superClass = tableDef-&gt;getSuperClassRelation();
		}

		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getContainerOwnerRelations() {
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef = NULL;
		$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			relType = relationDef-&gt;getRequiredRelationType();
			if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) )
			{
				list.push_back( relationDef );
			}
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClass = getSuperClassRelation();
		while( superClass != NULL ) {
			tableDef = superClass-&gt;getRequiredLookupToTable();
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				relType = relationDef-&gt;getRequiredRelationType();
				if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) )
				{
					list.push_back( relationDef );
				}
			}
			superClass = tableDef-&gt;getSuperClassRelation();
		}

		return( list );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$EditObj::getContainerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
				return( relationDef );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$EditObj::getInheritedContainerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* inheritedContainerRelation = NULL;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = this;
		while( ( inheritedContainerRelation == NULL ) &amp;&amp; ( tableDef != NULL ) ) {
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container ) {
					return( relationDef );
				}
			}
			relationDef = tableDef-&gt;getSuperClassRelation();
			if( relationDef == NULL ) {
				tableDef = NULL;
			}
			else {
				tableDef = relationDef-&gt;getRequiredLookupToTable();
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$EditObj::getOwnerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
				return( relationDef );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$EditObj::getInheritedOwnerRelation() {
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = this;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* inheritedOwnerRelation = NULL;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations;
		while( ( inheritedOwnerRelation == NULL ) &amp;&amp; ( tableDef != NULL ) ) {
			childrenRelations = tableDef-&gt;getOptionalComponentsRelation();
			for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
				relationDef = *iterChildrenRelations;
				if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) {
					return( relationDef );
				}
			}
			relationDef = tableDef-&gt;getSuperClassRelation();
			if( relationDef == NULL ) {
				tableDef = NULL;
			}
			else {
				tableDef = relationDef-&gt;getRequiredLookupToTable();
			}
		}
		return( NULL );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getOwnerLookupRelations() {
		$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			relType = relationDef-&gt;getRequiredRelationType();
			if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Lookup )
			 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) )
			{
				list.push_back( relationDef );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getOwnerContainerNamedLookupChainRelations() {
		$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$ChainObj*&gt; componentChains = getOptionalComponentsChains();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			relType = relationDef-&gt;getRequiredRelationType();
			if( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				;
			}
			else if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container )
				|| ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) )
			{
				list.push_back( relationDef );
			}
			else {
				if( ! relationDef-&gt;getRequiredIsXsdContainer() ) {
					$CPlusDefNamespace$::I$DefSchemaName$IndexObj* toIndex = relationDef-&gt;getRequiredLookupToIndex();
					if( toIndex-&gt;getRequiredIsUnique() ) {
						bool referencedByChain = false;
						std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$ChainObj*&gt; myChains = componentChains;
						for( auto iterChain = myChains.begin(); ( ! referencedByChain ) &amp;&amp; ( iterChain != myChains.end() ); iterChain ++ ) {
							$CPlusDefNamespace$::I$DefSchemaName$ChainObj* chain = *iterChain;
							if( chain-&gt;getRequiredLookupPrevRel() == relationDef ) {
								referencedByChain = true;
							}
							else if( chain-&gt;getRequiredLookupNextRel() == relationDef ) {
								referencedByChain = true;
							}
						}
						if( referencedByChain ) {
							list.push_back( relationDef );
						}
						else {
							$CPlusDefNamespace$::I$DefSchemaName$TableObj* toTable = relationDef-&gt;getRequiredLookupToTable();
							$CPlusDefNamespace$::I$DefSchemaName$IndexObj* lookupIndex = toTable-&gt;getOptionalLookupLookupIndex();
							while( ( lookupIndex == NULL ) &amp;&amp; ( toTable != NULL ) ) {
								$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superRelation = toTable-&gt;getSuperClassRelation();
								if( superRelation != NULL ) {
									toTable = superRelation-&gt;getRequiredLookupToTable();
									if( toTable != NULL ) {
										lookupIndex = toTable-&gt;getOptionalLookupLookupIndex();
									}
								}
								else {
									toTable = NULL;
								}
							}
							if( lookupIndex != NULL ) {
								list.push_back( relationDef );
							}
						}
					}
				}
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt; $SchemaName$$TableName$EditObj::getChildrenAtoms() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$ValueObj*&gt; childrenColumns = getOptionalComponentsColumns();
		$CPlusDefNamespace$::I$DefSchemaName$ValueObj* colDef;
		for( auto iterChildrenColumns = childrenColumns.begin(); iterChildrenColumns != childrenColumns.end(); iterChildrenColumns ++ ) {
			colDef = *iterChildrenColumns;
			if( colDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				list.push_back( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( colDef ) );
			}
		}
		return( list );
	}

	$CPlusDefNamespace$::I$DefSchemaName$RelationObj* $SchemaName$$TableName$EditObj::getSuperClassRelation() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations = getOptionalComponentsRelation();
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		for( auto iterChildrenRelations = childrenRelations.begin(); iterChildrenRelations != childrenRelations.end(); iterChildrenRelations ++ ) {
			relationDef = *iterChildrenRelations;
			if( relationDef-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				return( relationDef );
			}
		}
		return( NULL );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getSubClassRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; reverseRelations = getOptionalChildrenReverseRelations();
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* reverseRelation;
		for( auto iterReverseRelations = reverseRelations.begin(); iterReverseRelations != reverseRelations.end(); iterReverseRelations ++ ) {
			reverseRelation = *iterReverseRelations;
			if( reverseRelation-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				list.push_back( reverseRelation );
			}
		}
		return( list );
	}

	$CPlusDefNamespace$::I$DefSchemaName$IndexObj* $SchemaName$$TableName$EditObj::getPrimaryKeyIndex() {
		$CPlusDefNamespace$::I$DefSchemaName$IndexObj* primaryIndex = getOptionalLookupPrimaryIndex();
		return( primaryIndex );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getFactoryOwnerRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = getContainerOwnerRelations();
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			// throw new NotImplementedException();
			ownerRelation = *iterOwnerRelations;
			if( ownerRelation-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Superclass ) {
				list.push_back( ownerRelation );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$EditObj::getInheritedIndexes() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClassRelation = getSuperClassRelation();
		if( superClassRelation != NULL ) {
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; superClassInheritedIndexes = superClassRelation-&gt;getRequiredLookupToTable()-&gt;getInheritedIndexes();
			for( auto iterIndexes = superClassInheritedIndexes.begin(); iterIndexes != superClassInheritedIndexes.end(); iterIndexes ++ ) {
				list.push_back( *iterIndexes );
			}
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexes = getChildrenIndexes();
			for( auto iterMyIndexes = myIndexes.begin(); iterMyIndexes != myIndexes.end(); iterMyIndexes ++ ) {
				list.push_back( *iterMyIndexes );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$EditObj::getChildrenIndexes() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexes = getOptionalComponentsIndex();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		for( auto iterMyIndexes = myIndexes.begin(); iterMyIndexes != myIndexes.end(); iterMyIndexes ++ ) {
			list.push_back( *iterMyIndexes );
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getInheritedRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* superClassRelation = getSuperClassRelation();
		if( superClassRelation != NULL ) {
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; superClassInheritedRelations = superClassRelation-&gt;getRequiredLookupToTable()-&gt;getInheritedRelations();
			for( auto iterInherited = superClassInheritedRelations.begin(); iterInherited != superClassInheritedRelations.end(); iterInherited ++ ) {
				list.push_back( *iterInherited );
			}
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; myRelations = getChildrenRelations();
			for( auto iterMyRelations = myRelations.begin(); iterMyRelations != myRelations.end(); iterMyRelations ++ ) {
				list.push_back( *iterMyRelations );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getChildrenRelations() {
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; childrenRelations;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; cltn = getOptionalComponentsRelation();
		for( auto iterCltn = cltn.begin(); iterCltn != cltn.end(); iterCltn ++ ) {
			childrenRelations.push_back( *iterCltn );
		}
		return( childrenRelations );
	}
</CPlusEditObjImplementation>

		<HPlusObjInterface>
		public:
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOnlyOwnerRelations() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getContainerOwnerRelations() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getContainerRelation() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getInheritedContainerRelation() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getOwnerRelation() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getInheritedOwnerRelation() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOwnerLookupRelations() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOwnerContainerNamedLookupChainRelations() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt; getChildrenAtoms() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getSuperClassRelation() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getSubClassRelations() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$IndexObj* getPrimaryKeyIndex() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getFactoryOwnerRelations() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getInheritedIndexes() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getChildrenIndexes() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getInheritedRelations() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getChildrenRelations() = 0;
</HPlusObjInterface>

		<HPlusObjImplementation>
		public:
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOnlyOwnerRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getContainerOwnerRelations();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getContainerRelation();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getInheritedContainerRelation();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getOwnerRelation();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getInheritedOwnerRelation();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOwnerLookupRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOwnerContainerNamedLookupChainRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt; getChildrenAtoms();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getSuperClassRelation();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getSubClassRelations();
			virtual $CPlusDefNamespace$::I$DefSchemaName$IndexObj* getPrimaryKeyIndex();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getFactoryOwnerRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getInheritedIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getChildrenIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getInheritedRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getChildrenRelations();
</HPlusObjImplementation>

		<HPlusEditObjImplementation>
		public:
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOnlyOwnerRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getContainerOwnerRelations();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getContainerRelation();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getInheritedContainerRelation();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getOwnerRelation();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getInheritedOwnerRelation();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOwnerLookupRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getOwnerContainerNamedLookupChainRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt; getChildrenAtoms();
			virtual $CPlusDefNamespace$::I$DefSchemaName$RelationObj* getSuperClassRelation();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getSubClassRelations();
			virtual $CPlusDefNamespace$::I$DefSchemaName$IndexObj* getPrimaryKeyIndex();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getFactoryOwnerRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getInheritedIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getChildrenIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getInheritedRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getChildrenRelations();
</HPlusEditObjImplementation>
	</Table>

	<Table Name="Value"
			TableClassCode="a809"
			DbName="valdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="ValueUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="ScopeId"
				Label="Scope Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ValueIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<StringCol Name="DefaultXmlValue"
				IsNullable="true"
				DbName="dflt_xml_val"
				MaxLen="1023" />
		<BoolCol Name="IsNullable"
				Label="Is Nullable"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="GenerateId"
				Label="Generate Id"
				IsNullable="true" />
		<BoolCol Name="ImplementsPolymorph"
				Label="ImplementsPolymorph"
				IsNullable="false"
				InitValue="false" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				IsNullable="true"
				DataType="ValueIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				IsNullable="true"
				DataType="ValueIdGen" />
		<PrimaryIndex Name="ValueIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="valdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ValueUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="valdef_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ScopeId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="ValueTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="valdef_tenantidx"
				ShortName="Tenant"
				Suffix="ValTentIdx"
				Label="ValueTenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="ValueScopeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="valdef_scopeidx"
				ShortName="Scope"
				Suffix="ScopeIdx"
				Label="ScopeIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ScopeId" IsAscending="true" />
		</Index>
		<Index Name="ValueDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="value_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="ValuePrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="valuedef_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="ValueNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="valuedef_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
		<Index Name="ValueContPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="valuedef_xcontprev"
				Suffix="ContPrevIdx"
				Label="ContPrevIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ScopeId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="ValueContNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="valuedef_xcontnext"
				Suffix="ContNextIdx"
				Label="ContNextIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ScopeId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>

		<CafeObjInterface>
	List&lt;I$SchemaName$IndexObj&gt; getAffectedIndexes();
	List&lt;I$SchemaName$RelationObj&gt; getAffectedRelations();
	List&lt;I$SchemaName$IndexObj&gt; getAffectedUniqueIndexes();
	List&lt;I$SchemaName$RelationObj&gt; getColumnInMemberRelations();
	List&lt;I$SchemaName$RelationObj&gt; getColumnInComponentsRelations();
	boolean getGenerateId();
</CafeObjInterface>

		<CafeObjImplementation>
	public List&lt;I$SchemaName$IndexObj&gt; getAffectedIndexes() {
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getAffectedIndexes() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getAffectedIndexes() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}
		Iterator&lt;I$SchemaName$IndexObj&gt; cursorIndexDef = tableDef.getOptionalComponentsIndex().iterator();
		while (cursorIndexDef.hasNext())
		{
			I$SchemaName$IndexObj indexDef = cursorIndexDef.next();

			Iterator&lt;I$SchemaName$IndexColObj&gt; cursorIndexColDef = indexDef.getOptionalComponentsColumns().iterator();
			while (cursorIndexColDef.hasNext())
			{
				I$SchemaName$IndexColObj indexColDef = cursorIndexColDef.next();
				if( indexColDef.getRequiredLookupColumn().equals(this))
				{
					list.add(indexDef);
				}
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getAffectedRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getAffectedRelations() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getAffectedRelations() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}
		Iterator&lt;I$SchemaName$RelationObj&gt; cursorRelationDef = tableDef.getOptionalComponentsRelation().iterator();
		while (cursorRelationDef.hasNext())
		{
			I$SchemaName$RelationObj relationDef = cursorRelationDef.next();
			Iterator&lt;I$SchemaName$RelationColObj&gt; cursorRelationColDef = relationDef.getOptionalComponentsColumns().iterator();
			while (cursorRelationColDef.hasNext())
			{
				I$SchemaName$RelationColObj relationColDef = cursorRelationColDef.next();
				if( relationColDef.getRequiredLookupFromCol().equals(this))
				{
					list.add(relationDef);
				}
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$IndexObj&gt; getAffectedUniqueIndexes() {
		List&lt;I$SchemaName$IndexObj&gt; affectedIndexes = getAffectedIndexes();
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getAffectedUniqueIndexes() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getAffectedUniqueIndexes() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}
		Iterator&lt;I$SchemaName$IndexObj&gt; cursorIndexDef = affectedIndexes.iterator();
		while (cursorIndexDef.hasNext())
		{
			I$SchemaName$IndexObj indexDef = cursorIndexDef.next();
			if( indexDef.getRequiredIsUnique())
			{
				list.add(indexDef);
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getColumnInMemberRelations() {
		final String S_ProcName = &quot;ValueDefObj.getColumnInMemberRelations() &quot;;

		I$SchemaName$ScopeObj scopeDef = (I$SchemaName$ScopeObj)getObjScope();
		if( scopeDef == null)
		{
			throw new RuntimeException(S_ProcName + &quot;OptionalParentScope is required&quot;);
		}
		else if( scopeDef instanceof I$SchemaName$TableObj)
		{
			List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
			Iterator&lt;I$SchemaName$RelationObj&gt; relations = ((I$SchemaName$TableObj)scopeDef).getOptionalComponentsRelation().iterator();
			I$SchemaName$RelationColObj relationCol;
			Iterator&lt;I$SchemaName$RelationColObj&gt; relationColumns;
			I$SchemaName$RelationObj relation;
			I$EffSchemaName$Schema.RelationTypeEnum relType;
			while (relations.hasNext())
			{
				relation = relations.next();
				relType = relation.getRequiredRelationType();
				if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Lookup )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Components )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Children )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) )
				{
					relationColumns = relation.getOptionalComponentsColumns().iterator();
					while (relationColumns.hasNext())
					{
						relationCol = relationColumns.next();
						if( this == relationCol.getRequiredLookupFromCol().getRequiredLookupColumn() )
						{
							list.add(relation);
							break;
						}
					}
				}
			}
			return( list );
		}
		else
		{
			throw new RuntimeException(S_ProcName + &quot;Expected scope definition to be an I$SchemaName$TableObj&quot;);
		}
	}

	public List&lt;I$SchemaName$RelationObj&gt; getColumnInComponentsRelations() {
		final String S_ProcName = &quot;ValueDefObj.getColumnInComponentsRelations() &quot;;

		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getColumnInComponentsRelations() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getColumnInComponentsRelations() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}

		I$SchemaName$RelationColObj relationCol;
		I$SchemaName$RelationObj relation;
		Iterator&lt;I$SchemaName$RelationColObj&gt; relationColumns;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; relations = tableDef.getOptionalComponentsRelation().iterator();

		while( relations.hasNext() ) {
			relation = relations.next();
			if( relation.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Components ) {
				relationColumns = relation.getOptionalComponentsColumns().iterator();
				while (relationColumns.hasNext()) {
					relationCol = relationColumns.next();
					if( this == relationCol.getRequiredLookupFromCol().getRequiredLookupColumn() ) {
						list.add(relation);
						break;
					}
				}
			}
		}

		return( list );
	}

	public boolean getGenerateId() {
		boolean ret;
		if( getOptionalGenerateId() != null )		 {
			ret = getOptionalGenerateId().booleanValue();
		}
		else {
			ret = false;
		}
		return( ret );
	}
</CafeObjImplementation>

		<CafeEditObjImplementation>
	public List&lt;I$SchemaName$IndexObj&gt; getAffectedIndexes() {
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getAffectedIndexes() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getAffectedIndexes() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}
		Iterator&lt;I$SchemaName$IndexObj&gt; cursorIndexDef = tableDef.getOptionalComponentsIndex().iterator();
		while (cursorIndexDef.hasNext())
		{
			I$SchemaName$IndexObj indexDef = cursorIndexDef.next();

			Iterator&lt;I$SchemaName$IndexColObj&gt; cursorIndexColDef = indexDef.getOptionalComponentsColumns().iterator();
			while (cursorIndexColDef.hasNext())
			{
				I$SchemaName$IndexColObj indexColDef = cursorIndexColDef.next();
				if( indexColDef.getRequiredLookupColumn().equals(this))
				{
					list.add(indexDef);
				}
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getAffectedRelations() {
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getAffectedRelations() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getAffectedRelations() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}
		Iterator&lt;I$SchemaName$RelationObj&gt; cursorRelationDef = tableDef.getOptionalComponentsRelation().iterator();
		while (cursorRelationDef.hasNext())
		{
			I$SchemaName$RelationObj relationDef = cursorRelationDef.next();
			Iterator&lt;I$SchemaName$RelationColObj&gt; cursorRelationColDef = relationDef.getOptionalComponentsColumns().iterator();
			while (cursorRelationColDef.hasNext())
			{
				I$SchemaName$RelationColObj relationColDef = cursorRelationColDef.next();
				if( relationColDef.getRequiredLookupFromCol().equals(this))
				{
					list.add(relationDef);
				}
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$IndexObj&gt; getAffectedUniqueIndexes() {
		List&lt;I$SchemaName$IndexObj&gt; affectedIndexes = getAffectedIndexes();
		List&lt;I$SchemaName$IndexObj&gt; list = new LinkedList&lt;I$SchemaName$IndexObj&gt;();
		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getAffectedUniqueIndexes() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getAffectedUniqueIndexes() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}
		Iterator&lt;I$SchemaName$IndexObj&gt; cursorIndexDef = affectedIndexes.iterator();
		while (cursorIndexDef.hasNext())
		{
			I$SchemaName$IndexObj indexDef = cursorIndexDef.next();
			if( indexDef.getRequiredIsUnique())
			{
				list.add(indexDef);
			}
		}
		return( list );
	}

	public List&lt;I$SchemaName$RelationObj&gt; getColumnInMemberRelations() {
		final String S_ProcName = &quot;ValueDefObj.getColumnInMemberRelations() &quot;;

		I$SchemaName$ScopeObj scopeDef = (I$SchemaName$ScopeObj)getObjScope();
		if( scopeDef == null)
		{
			throw new RuntimeException(S_ProcName + &quot;OptionalParentScope is required&quot;);
		}
		else if( scopeDef instanceof I$SchemaName$TableObj)
		{
			List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
			Iterator&lt;I$SchemaName$RelationObj&gt; relations = ((I$SchemaName$TableObj)scopeDef).getOptionalComponentsRelation().iterator();
			I$SchemaName$RelationColObj relationCol;
			Iterator&lt;I$SchemaName$RelationColObj&gt; relationColumns;
			I$SchemaName$RelationObj relation;
			I$EffSchemaName$Schema.RelationTypeEnum relType;
			while (relations.hasNext())
			{
				relation = relations.next();
				relType = relation.getRequiredRelationType();
				if( ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Lookup )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Container )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Components )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Parent )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Children )
				 || ( relType == I$EffSchemaName$Schema.RelationTypeEnum.Owner ) )
				{
					relationColumns = relation.getOptionalComponentsColumns().iterator();
					while (relationColumns.hasNext())
					{
						relationCol = relationColumns.next();
						if( this == relationCol.getRequiredLookupFromCol().getRequiredLookupColumn() )
						{
							list.add(relation);
							break;
						}
					}
				}
			}
			return( list );
		}
		else
		{
			throw new RuntimeException(S_ProcName + &quot;Expected scope definition to be an I$SchemaName$TableObj&quot;);
		}
	}

	public List&lt;I$SchemaName$RelationObj&gt; getColumnInComponentsRelations() {
		final String S_ProcName = &quot;ValueDefObj.getColumnInComponentsRelations() &quot;;

		I$SchemaName$ScopeObj container = getRequiredContainerScope();
		I$SchemaName$TableObj tableDef = null;
		if( container == null ) {
			throw new RuntimeException(&quot;ValueDefObj.getColumnInComponentsRelations() RequiredContainerScope has no value&quot;);
		}
		else if( container instanceof I$SchemaName$TableObj ) {
			tableDef = (I$SchemaName$TableObj)container;
		}
		else {
			throw new RuntimeException( &quot;ValueDefObj.getColumnInComponentsRelations() RequiredContainerScope is not an I$SchemaName$TableObj&quot;);
		}

		I$SchemaName$RelationColObj relationCol;
		I$SchemaName$RelationObj relation;
		Iterator&lt;I$SchemaName$RelationColObj&gt; relationColumns;
		List&lt;I$SchemaName$RelationObj&gt; list = new LinkedList&lt;I$SchemaName$RelationObj&gt;();
		Iterator&lt;I$SchemaName$RelationObj&gt; relations = tableDef.getOptionalComponentsRelation().iterator();

		while( relations.hasNext() ) {
			relation = relations.next();
			if( relation.getRequiredRelationType() == I$EffSchemaName$Schema.RelationTypeEnum.Components ) {
				relationColumns = relation.getOptionalComponentsColumns().iterator();
				while (relationColumns.hasNext()) {
					relationCol = relationColumns.next();
					if( this == relationCol.getRequiredLookupFromCol().getRequiredLookupColumn() ) {
						list.add(relation);
						break;
					}
				}
			}
		}

		return( list );
	}

	public boolean getGenerateId() {
		boolean ret;
		if( getOptionalGenerateId() != null )		 {
			ret = getOptionalGenerateId().booleanValue();
		}
		else {
			ret = false;
		}
		return( ret );
	}
</CafeEditObjImplementation>

		<CPlusObjImplementation>
	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$Obj::getAffectedIndexes() {
		static const std::string S_ProcName( &quot;getAffectedIndexes&quot; );
		static const std::string S_RequiredContainerScope( &quot;container.getRequiredContanerScope()&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexDefs = tableDef-&gt;getOptionalComponentsIndex();
		$CPlusDefNamespace$::I$DefSchemaName$IndexObj* indexDef;
		$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt; myIndexCols;
		for( auto iterMyIndexDefs = myIndexDefs.begin(); iterMyIndexDefs != myIndexDefs.end(); iterMyIndexDefs ++ ) {
			indexDef = *iterMyIndexDefs;
			myIndexCols = indexDef-&gt;getOptionalComponentsColumns();
			for( auto iterMyIndexCols = myIndexCols.begin(); iterMyIndexCols != myIndexCols.end(); iterMyIndexCols ++ ) {
				indexColDef = *iterMyIndexCols;
				if( indexColDef-&gt;getRequiredLookupColumn() == this ) {
					list.push_back( indexDef );
				}
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getAffectedRelations() {
		static const std::string S_ProcName( &quot;getAffectedRelations&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; myRelationDefs = tableDef-&gt;getOptionalComponentsRelation();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; relationCols;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relationColDef;
		for( auto iterMyRelationDefs = myRelationDefs.begin(); iterMyRelationDefs != myRelationDefs.end(); iterMyRelationDefs ++ ) {
			relationDef = *iterMyRelationDefs;
			relationCols = relationDef-&gt;getOptionalComponentsColumns();
			for( auto iterCols = relationCols.begin(); iterCols != relationCols.end(); iterCols ++ ) {
				relationColDef = *iterCols;
				if( relationColDef-&gt;getRequiredLookupFromCol()-&gt;getRequiredLookupColumn() == this ) {
					list.push_back( relationDef );
				}
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$Obj::getAffectedUniqueIndexes() {
		static const std::string S_ProcName( &quot;getAffectedUniqueIndexes&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; affectedIndexes = getAffectedIndexes();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexDefs = affectedIndexes;
		$CPlusDefNamespace$::I$DefSchemaName$IndexObj* indexDef;
		for( auto iterIndexDefs = myIndexDefs.begin(); iterIndexDefs != myIndexDefs.end(); iterIndexDefs ++ ) {
			indexDef = *iterIndexDefs;
			if( indexDef-&gt;getRequiredIsUnique() ) {
				list.push_back( indexDef );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getColumnInMemberRelations() {
		static const std::string S_ProcName( &quot;getColumnInMemberRelations&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		static const std::string S_RequiredObjScope( &quot;RequiredObjScope&quot; );
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* scopeDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$ScopeObj*&gt;( getObjScope() );
		if( scopeDef == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredObjScope );
		}
		else if( scopeDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( scopeDef );
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; relations = tableDef-&gt;getOptionalComponentsRelation();
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relationCol;
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; relationColumns;
			$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relation;
			$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
			for( auto iterRelations = relations.begin(); iterRelations != relations.end(); iterRelations ++ ) {
				relation = *iterRelations;
				relType = relation-&gt;getRequiredRelationType();
				if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Lookup )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Components )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Children )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) )
				{
					relationColumns = relation-&gt;getOptionalComponentsColumns();
					for( auto iterCols = relationColumns.begin(); iterCols != relationColumns.end(); iterCols ++ ) {
						relationCol = *iterCols;
						if( this == relationCol-&gt;getRequiredLookupFromCol()-&gt;getRequiredLookupColumn() ) {
							list.push_back( relation );
							break;
						}
					}
				}
			}
			return( list );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredObjScope, scopeDef, S_I$DefSchemaName$TableObj );
		}
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$Obj::getColumnInComponentsRelations() {
		static const std::string S_ProcName( &quot;getColumnInComponentsRelation&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );

		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relationCol;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relation;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; relationColumns;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; relations = tableDef-&gt;getOptionalComponentsRelation();

		for( auto iterRelations = relations.begin(); iterRelations != relations.end(); iterRelations ++ ) {
			relation = *iterRelations;
			if( relation-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Components ) {
				relationColumns = relation-&gt;getOptionalComponentsColumns();
				for( auto iterCols = relationColumns.begin(); iterCols != relationColumns.end(); iterCols ++ ) {
					relationCol = *iterCols;
					if( this == relationCol-&gt;getRequiredLookupFromCol()-&gt;getRequiredLookupColumn() ) {
						list.push_back( relation );
						break;
					}
				}
			}
		}

		return( list );
	}

	bool $SchemaName$$TableName$Obj::getGenerateId() {
		bool ret;
		if( ! isOptionalGenerateIdNull() ) {
			ret = getOptionalGenerateIdValue();
		}
		else {
			ret = false;
		}
		return( ret );
	}
</CPlusObjImplementation>

		<CPlusEditObjImplementation>
	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$EditObj::getAffectedIndexes() {
		static const std::string S_ProcName( &quot;getAffectedIndexes&quot; );
		static const std::string S_RequiredContainerScope( &quot;container.getRequiredContanerScope()&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexDefs = tableDef-&gt;getOptionalComponentsIndex();
		$CPlusDefNamespace$::I$DefSchemaName$IndexObj* indexDef;
		$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt; myIndexCols;
		for( auto iterMyIndexDefs = myIndexDefs.begin(); iterMyIndexDefs != myIndexDefs.end(); iterMyIndexDefs ++ ) {
			indexDef = *iterMyIndexDefs;
			myIndexCols = indexDef-&gt;getOptionalComponentsColumns();
			for( auto iterMyIndexCols = myIndexCols.begin(); iterMyIndexCols != myIndexCols.end(); iterMyIndexCols ++ ) {
				indexColDef = *iterMyIndexCols;
				if( indexColDef-&gt;getRequiredLookupColumn() == this ) {
					list.push_back( indexDef );
				}
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getAffectedRelations() {
		static const std::string S_ProcName( &quot;getAffectedRelations&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; myRelationDefs = tableDef-&gt;getOptionalComponentsRelation();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; relationCols;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relationDef;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relationColDef;
		for( auto iterMyRelationDefs = myRelationDefs.begin(); iterMyRelationDefs != myRelationDefs.end(); iterMyRelationDefs ++ ) {
			relationDef = *iterMyRelationDefs;
			relationCols = relationDef-&gt;getOptionalComponentsColumns();
			for( auto iterCols = relationCols.begin(); iterCols != relationCols.end(); iterCols ++ ) {
				relationColDef = *iterCols;
				if( relationColDef-&gt;getRequiredLookupFromCol()-&gt;getRequiredLookupColumn() == this ) {
					list.push_back( relationDef );
				}
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; $SchemaName$$TableName$EditObj::getAffectedUniqueIndexes() {
		static const std::string S_ProcName( &quot;getAffectedUniqueIndexes&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; affectedIndexes = getAffectedIndexes();
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; list;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; myIndexDefs = affectedIndexes;
		$CPlusDefNamespace$::I$DefSchemaName$IndexObj* indexDef;
		for( auto iterIndexDefs = myIndexDefs.begin(); iterIndexDefs != myIndexDefs.end(); iterIndexDefs ++ ) {
			indexDef = *iterIndexDefs;
			if( indexDef-&gt;getRequiredIsUnique() ) {
				list.push_back( indexDef );
			}
		}
		return( list );
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getColumnInMemberRelations() {
		static const std::string S_ProcName( &quot;getColumnInMemberRelations&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );
		static const std::string S_RequiredObjScope( &quot;RequiredObjScope&quot; );
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* scopeDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$ScopeObj*&gt;( getObjScope() );
		if( scopeDef == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredObjScope );
		}
		else if( scopeDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( scopeDef );
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; relations = tableDef-&gt;getOptionalComponentsRelation();
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relationCol;
			std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; relationColumns;
			$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relation;
			$CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum relType;
			for( auto iterRelations = relations.begin(); iterRelations != relations.end(); iterRelations ++ ) {
				relation = *iterRelations;
				relType = relation-&gt;getRequiredRelationType();
				if( ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Lookup )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Container )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Components )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Parent )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Children )
				 || ( relType == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Owner ) )
				{
					relationColumns = relation-&gt;getOptionalComponentsColumns();
					for( auto iterCols = relationColumns.begin(); iterCols != relationColumns.end(); iterCols ++ ) {
						relationCol = *iterCols;
						if( this == relationCol-&gt;getRequiredLookupFromCol()-&gt;getRequiredLookupColumn() ) {
							list.push_back( relation );
							break;
						}
					}
				}
			}
			return( list );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredObjScope, scopeDef, S_I$DefSchemaName$TableObj );
		}
	}

	std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; $SchemaName$$TableName$EditObj::getColumnInComponentsRelations() {
		static const std::string S_ProcName( &quot;getColumnInComponentsRelation&quot; );
		static const std::string S_RequiredContainerScope( &quot;RequiredContainerScope&quot; );
		static const std::string S_I$DefSchemaName$TableObj( &quot;I$DefSchemaName$TableObj&quot; );

		$CPlusDefNamespace$::I$DefSchemaName$ScopeObj* container = getRequiredContainerScope();
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef = NULL;
		if( container == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME, S_ProcName, 0, S_RequiredContainerScope );
		}
		else if( container-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableBuff::CLASS_CODE ) ) {
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( container );
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_RequiredContainerScope, container, S_I$DefSchemaName$TableObj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relationCol;
		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* relation;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; relationColumns;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; list;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; relations = tableDef-&gt;getOptionalComponentsRelation();

		for( auto iterRelations = relations.begin(); iterRelations != relations.end(); iterRelations ++ ) {
			relation = *iterRelations;
			if( relation-&gt;getRequiredRelationType() == $CPlusDefNamespace$::I$EffSchemaName$Schema::RelationTypeEnum::Components ) {
				relationColumns = relation-&gt;getOptionalComponentsColumns();
				for( auto iterCols = relationColumns.begin(); iterCols != relationColumns.end(); iterCols ++ ) {
					relationCol = *iterCols;
					if( this == relationCol-&gt;getRequiredLookupFromCol()-&gt;getRequiredLookupColumn() ) {
						list.push_back( relation );
						break;
					}
				}
			}
		}

		return( list );
	}

	bool $SchemaName$$TableName$EditObj::getGenerateId() {
		bool ret;
		if( ! isOptionalGenerateIdNull() ) {
			ret = getOptionalGenerateIdValue();
		}
		else {
			ret = false;
		}
		return( ret );
	}
</CPlusEditObjImplementation>

		<HPlusObjInterface>
		public:
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getAffectedIndexes() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getAffectedRelations() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getAffectedUniqueIndexes() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getColumnInMemberRelations() = 0;
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getColumnInComponentsRelations() = 0;
			virtual bool getGenerateId() = 0;
</HPlusObjInterface>

		<HPlusObjImplementation>
		public:
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getAffectedIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getAffectedRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getAffectedUniqueIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getColumnInMemberRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getColumnInComponentsRelations();
			virtual bool getGenerateId();
</HPlusObjImplementation>

		<HPlusEditObjImplementation>
		public:
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getAffectedIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getAffectedRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexObj*&gt; getAffectedUniqueIndexes();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getColumnInMemberRelations();
			virtual std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; getColumnInComponentsRelations();
			virtual bool getGenerateId();
</HPlusEditObjImplementation>
	</Table>

	<Table Name="Atom"
			TableClassCode="a80a"
			DbName="atomdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<StringCol Name="DbName"
				Label="Db Name"
				IsNullable="true"
				MaxLen="32" />
		<PrimaryIndex Name="AtomIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="atomdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="atomdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="AtomIdIdx"
				ToIndex="Value.ValueIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="BlobDef"
			TableClassCode="a80b"
			DbName="blbdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int32Col Name="MaxLen"
				Label="Max. Length"
				IsNullable="false"
				DbName="db_max_len"
				MinValue="1"
				MaxValue="2147483647"
				InitValue="100000000" />
		<BlobCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MaxLen="16384" />
		<PrimaryIndex Name="BlobDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="blbdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="blbdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="BlobDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="BlobType"
			TableClassCode="a80c"
			DbName="blbtyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="BlobTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="blbtyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="BlobTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="blbtyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="blbtyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="BlobTypeIdIdx"
				ToIndex="BlobDef.BlobDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="BoolDef"
			TableClassCode="a80d"
			DbName="booldef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<BoolCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal" />
		<StringCol Name="FalseString"
				IsNullable="true"
				MaxLen="32" />
		<StringCol Name="TrueString"
				IsNullable="true"
				MaxLen="32" />
		<StringCol Name="NullString"
				IsNullable="true"
				MaxLen="32" />
		<PrimaryIndex Name="BoolDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="booldef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="booldef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="BoolDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="BoolType"
			TableClassCode="a80e"
			DbName="booltyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="BoolTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="booltyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="BoolTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="booltyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="booltyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="BoolTypeIdIdx"
				ToIndex="BoolDef.BoolDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Chain"
			TableClassCode="a80f"
			DbName="chain_def"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="ChainUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ChainIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<TableCol Name="TableId"
				Label="Table Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<StringCol Name="Suffix"
				IsNullable="true"
				MaxLen="16" />
		<TableCol Name="PrevRelationTenantId"
				IsNullable="false"
				DbName="prvreltentid"
				DataType="TenantIdGen" />
		<TableCol Name="PrevRelationId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="NextRelationTenantId"
				IsNullable="false"
				DbName="nxtreltentid"
				DataType="TenantIdGen" />
		<TableCol Name="NextRelationId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="ChainIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="chain_pk"
				Suffix="IdIdx"
				Label="ChainIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ChainTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chain_xtent"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="ChainTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chain_xtbl"
				Suffix="ChainTableIdx"
				Label="TableIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<Index Name="ChainDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chain_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="ChainUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="chain_xuname"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="ChainPrevRelIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chain_xprevrel"
				Suffix="PrevRelIdx"
				Label="PrevRelationIdx" >
			<IndexCol Name="PrevRelationTenantId" IsAscending="true" />
			<IndexCol Name="PrevRelationId" IsAscending="true" />
		</Index>
		<Index Name="ChainNextRelIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chain_xnextrel"
				Suffix="NextRelIdx"
				Label="NextRelationIdx" >
			<IndexCol Name="NextRelationTenantId" IsAscending="true" />
			<IndexCol Name="NextRelationId" IsAscending="true" />
		</Index>

		<CafeObjInterface>
	I$SchemaName$SubProjectObj getProject();
	I$SchemaName$TopDomainObj getCompany();
	I$SchemaName$SchemaDefObj getSchemaDef();
	I$SchemaName$MinorVersionObj getVersion();
	String getVersionString();
	String getPackedVersionString();
	Boolean isColumnInOwnerRelation();
</CafeObjInterface>

		<CafeObjImplementation>
	public I$SchemaName$SubProjectObj getProject() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return ((I$SchemaName$SubProjectObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$TopDomainObj getCompany() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return ((I$SchemaName$TopDomainObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$SchemaDefObj getSchemaDef() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SchemaDefObj ) {
				return ((I$SchemaName$SchemaDefObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$MinorVersionObj getVersion() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				return ((I$SchemaName$MinorVersionObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	protected String getVersionStringForVersion( ICFLibAnyObj value ) {
		String ret;
		if( value instanceof I$SchemaName$MinorVersionObj ) {
			ret = ((I$SchemaName$MinorVersionObj)value).getRequiredName();
		}
		else if( value instanceof I$SchemaName$MajorVersionObj ) {
			ret = ((I$SchemaName$MajorVersionObj)value).getRequiredName();
		}
		else {
			ret = null;
		}
		return( ret );
	}

	public String getVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + &quot;-&quot; + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public String getPackedVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public Boolean isColumnInOwnerRelation() {

		ICFLibAnyObj		focusDef;
		I$SchemaName$TableObj		tableDef;
		final String S_ProcName = &quot;isColumnInOwnerRelation() &quot;;

		if( this instanceof I$SchemaName$AtomObj ) {
			I$SchemaName$AtomObj atomDef = (I$SchemaName$AtomObj)this;
			ICFLibAnyObj atomScopeDef = atomDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)atomScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$TableColObj ) {
			I$SchemaName$TableColObj tableColDef = (I$SchemaName$TableColObj)this;
			ICFLibAnyObj tableColScopeDef = tableColDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)tableColScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$IndexColObj ) {
			I$SchemaName$IndexColObj indexColDef = (I$SchemaName$IndexColObj)this;
			focusDef = indexColDef.getRequiredLookupColumn();
			if( focusDef instanceof I$SchemaName$AtomObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$AtomObj)focusDef).getObjScope();
			}
			else if( focusDef instanceof I$SchemaName$TableColObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$TableColObj)focusDef).getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else if( this instanceof I$SchemaName$RelationColObj ) {
			I$SchemaName$RelationColObj relColDef = (I$SchemaName$RelationColObj)this;
			ICFLibAnyObj columnDef = relColDef.getRequiredLookupFromCol();
			if( columnDef instanceof I$SchemaName$AtomObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else if( columnDef instanceof I$SchemaName$TableColObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getFromColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else {
			throw new RuntimeException(
				S_ProcName + &quot;genContext.getGenDef() did not return a I$SchemaName$AtomObj, I$SchemaName$TableColObj, nor I$SchemaName$IndexColObj instance&quot; );
		}

		List&lt;I$SchemaName$RelationObj&gt; ownerRelations = tableDef.getContainerOwnerRelations();
		if( ( ownerRelations == null )
		 || ( ( ownerRelations != null ) &amp;&amp; ( ownerRelations.size() == 0 ) ) )
		{
			return( false );
		}

		ListIterator&lt;I$SchemaName$RelationObj&gt; ownerEnumerator = ownerRelations.listIterator();

		I$SchemaName$RelationObj ownerRelation;
		I$SchemaName$RelationColObj ownerRelationCol;
		Iterator&lt;I$SchemaName$RelationColObj&gt; ownerRelationCols;

		while( ownerEnumerator.hasNext() ) {

			ownerRelation = ownerEnumerator.next();
			ownerRelationCols = ownerRelation.getOptionalComponentsColumns().iterator();

			while( ownerRelationCols.hasNext() ) {
				ownerRelationCol = ownerRelationCols.next();
				if( ownerRelationCol.getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CafeObjImplementation>

		<CafeEditObjImplementation>
	public I$SchemaName$SubProjectObj getProject() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return ((I$SchemaName$SubProjectObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$TopDomainObj getCompany() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return ((I$SchemaName$TopDomainObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$SchemaDefObj getSchemaDef() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SchemaDefObj ) {
				return ((I$SchemaName$SchemaDefObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$MinorVersionObj getVersion() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				return ((I$SchemaName$MinorVersionObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	protected String getVersionStringForVersion( ICFLibAnyObj value ) {
		String ret;
		if( value instanceof I$SchemaName$MinorVersionObj ) {
			ret = ((I$SchemaName$MinorVersionObj)value).getRequiredName();
		}
		else if( value instanceof I$SchemaName$MajorVersionObj ) {
			ret = ((I$SchemaName$MajorVersionObj)value).getRequiredName();
		}
		else {
			ret = null;
		}
		return( ret );
	}

	public String getVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + &quot;-&quot; + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public String getPackedVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public Boolean isColumnInOwnerRelation() {

		ICFLibAnyObj		focusDef;
		I$SchemaName$TableObj		tableDef;
		final String S_ProcName = &quot;isColumnInOwnerRelation() &quot;;

		if( this instanceof I$SchemaName$AtomObj ) {
			I$SchemaName$AtomObj atomDef = (I$SchemaName$AtomObj)this;
			ICFLibAnyObj atomScopeDef = atomDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)atomScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$TableColObj ) {
			I$SchemaName$TableColObj tableColDef = (I$SchemaName$TableColObj)this;
			ICFLibAnyObj tableColScopeDef = tableColDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)tableColScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$IndexColObj ) {
			I$SchemaName$IndexColObj indexColDef = (I$SchemaName$IndexColObj)this;
			focusDef = indexColDef.getRequiredLookupColumn();
			if( focusDef instanceof I$SchemaName$AtomObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$AtomObj)focusDef).getObjScope();
			}
			else if( focusDef instanceof I$SchemaName$TableColObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$TableColObj)focusDef).getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else if( this instanceof I$SchemaName$RelationColObj ) {
			I$SchemaName$RelationColObj relColDef = (I$SchemaName$RelationColObj)this;
			ICFLibAnyObj columnDef = relColDef.getRequiredLookupFromCol();
			if( columnDef instanceof I$SchemaName$AtomObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else if( columnDef instanceof I$SchemaName$TableColObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getFromColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else {
			throw new RuntimeException(
				S_ProcName + &quot;genContext.getGenDef() did not return a I$SchemaName$AtomObj, I$SchemaName$TableColObj, nor I$SchemaName$IndexColObj instance&quot; );
		}

		List&lt;I$SchemaName$RelationObj&gt; ownerRelations = tableDef.getContainerOwnerRelations();
		if( ( ownerRelations == null )
		 || ( ( ownerRelations != null ) &amp;&amp; ( ownerRelations.size() == 0 ) ) )
		{
			return( false );
		}

		ListIterator&lt;I$SchemaName$RelationObj&gt; ownerEnumerator = ownerRelations.listIterator();

		I$SchemaName$RelationObj ownerRelation;
		I$SchemaName$RelationColObj ownerRelationCol;
		Iterator&lt;I$SchemaName$RelationColObj&gt; ownerRelationCols;

		while( ownerEnumerator.hasNext() ) {

			ownerRelation = ownerEnumerator.next();
			ownerRelationCols = ownerRelation.getOptionalComponentsColumns().iterator();

			while( ownerRelationCols.hasNext() ) {
				ownerRelationCol = ownerRelationCols.next();
				if( ownerRelationCol.getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CafeEditObjImplementation>

		<CPlusObjImplementation>
	$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* $SchemaName$$TableName$Obj::getProject() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* $SchemaName$$TableName$Obj::getCompany() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* $SchemaName$$TableName$Obj::getSchemaDef() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$SchemaDefBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* $SchemaName$$TableName$Obj::getVersion() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	std::string $SchemaName$$TableName$Obj::getVersionStringForVersion( cflib::ICFLibAnyObj* value ) {
		std::string ret;
		if( value-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		else if( value-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		return( ret );
	}

	std::string $SchemaName$$TableName$Obj::getVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( &quot;-&quot; );
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	std::string $SchemaName$$TableName$Obj::getPackedVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	bool $SchemaName$$TableName$Obj::isColumnInOwnerRelation() {
		static const std::string S_ProcName( &quot;isColumnInOwnerRelation&quot; );
		static const std::string S_This( &quot;this&quot; );
		static const std::string S_GenContextGenDefColumnDefLookupColumn( &quot;GenContext.GenDef.ColumnDef.LookupColumn&quot; );
		static const std::string S_GenContextGenDefFromColumnDef( &quot;GenContext.GenDef.FromColumnDef&quot; );
		static const std::string S_FirstClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj&quot; );
		static const std::string S_SecondClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj, I$DefSchemaName$IndexColObj, I$DefSchemaName$RelationColObj&quot; );
		cflib::ICFLibAnyObj* focusDef;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$AtomObj* atomDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( this );
			cflib::ICFLibAnyObj* atomScopeDef = atomDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( atomScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$TableColObj* tableColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( this );
			cflib::ICFLibAnyObj* tableColScopeDef = tableColDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( tableColScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$IndexColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt;( this );
			focusDef = indexColDef-&gt;getRequiredLookupColumn();
			if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, focusDef, S_FirstClassList );
			}
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$RelationColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt;( this );
			cflib::ICFLibAnyObj* columnDef = relColDef-&gt;getRequiredLookupFromCol();
			if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, columnDef, S_FirstClassList );
			}
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_This, this, S_SecondClassList );
		}

		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = tableDef-&gt;getContainerOwnerRelations();
		if( ownerRelations.empty() ) {
			return( false );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* ownerRelationCol;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; ownerRelationCols;

		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			ownerRelation = *iterOwnerRelations;
			ownerRelationCols = ownerRelation-&gt;getOptionalComponentsColumns();
			for( auto iterCols = ownerRelationCols.begin(); iterCols != ownerRelationCols.end(); iterCols ++ ) {
				ownerRelationCol = *iterCols;
				if( ownerRelationCol-&gt;getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CPlusObjImplementation>

		<CPlusEditObjImplementation>
	$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* $SchemaName$$TableName$EditObj::getProject() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* $SchemaName$$TableName$EditObj::getCompany() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* $SchemaName$$TableName$EditObj::getSchemaDef() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$SchemaDefBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* $SchemaName$$TableName$EditObj::getVersion() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	std::string $SchemaName$$TableName$EditObj::getVersionStringForVersion( cflib::ICFLibAnyObj* value ) {
		std::string ret;
		if( value-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		else if( value-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		return( ret );
	}

	std::string $SchemaName$$TableName$EditObj::getVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( &quot;-&quot; );
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	std::string $SchemaName$$TableName$EditObj::getPackedVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	bool $SchemaName$$TableName$EditObj::isColumnInOwnerRelation() {
		static const std::string S_ProcName( &quot;isColumnInOwnerRelation&quot; );
		static const std::string S_This( &quot;this&quot; );
		static const std::string S_GenContextGenDefColumnDefLookupColumn( &quot;GenContext.GenDef.ColumnDef.LookupColumn&quot; );
		static const std::string S_GenContextGenDefFromColumnDef( &quot;GenContext.GenDef.FromColumnDef&quot; );
		static const std::string S_FirstClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj&quot; );
		static const std::string S_SecondClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj, I$DefSchemaName$IndexColObj, I$DefSchemaName$RelationColObj&quot; );
		cflib::ICFLibAnyObj* focusDef;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$AtomObj* atomDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( this );
			cflib::ICFLibAnyObj* atomScopeDef = atomDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( atomScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$TableColObj* tableColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( this );
			cflib::ICFLibAnyObj* tableColScopeDef = tableColDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( tableColScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$IndexColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt;( this );
			focusDef = indexColDef-&gt;getRequiredLookupColumn();
			if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, focusDef, S_FirstClassList );
			}
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$RelationColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt;( this );
			cflib::ICFLibAnyObj* columnDef = relColDef-&gt;getRequiredLookupFromCol();
			if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, columnDef, S_FirstClassList );
			}
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_This, this, S_SecondClassList );
		}

		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = tableDef-&gt;getContainerOwnerRelations();
		if( ownerRelations.empty() ) {
			return( false );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* ownerRelationCol;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; ownerRelationCols;

		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			ownerRelation = *iterOwnerRelations;
			ownerRelationCols = ownerRelation-&gt;getOptionalComponentsColumns();
			for( auto iterCols = ownerRelationCols.begin(); iterCols != ownerRelationCols.end(); iterCols ++ ) {
				ownerRelationCol = *iterCols;
				if( ownerRelationCol-&gt;getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CPlusEditObjImplementation>

		<HPlusObjInterface>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* obj ) = 0;
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion() = 0;
			virtual std::string getVersionString() = 0;
			virtual std::string getPackedVersionString() = 0;
			virtual bool isColumnInOwnerRelation() = 0;
</HPlusObjInterface>

		<HPlusObjImplementation>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* obj );
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject();
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany();
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef();
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion();
			virtual std::string getVersionString();
			virtual std::string getPackedVersionString();
			virtual bool isColumnInOwnerRelation();
</HPlusObjImplementation>

		<HPlusEditObjImplementation>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* obj );
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject();
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany();
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef();
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion();
			virtual std::string getVersionString();
			virtual std::string getPackedVersionString();
			virtual bool isColumnInOwnerRelation();
</HPlusEditObjImplementation>
	</Table>

	<Table Name="ClearDep"
			TableClassCode="a810"
			DbName="clr_dep"
			ShortName="ClearDep"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="RelationId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="ClearDepIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrdep_pk"
				Suffix="IdIdx"
				Label="ClearDepIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ClearDepRelationIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrdep_xrel"
				Suffix="ClearDepIdx"
				Label="Table Clearetion Dependancy Relation Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="RelationId" IsAscending="true" />
		</Index>
		<Index Name="ClearDepDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrdep_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="clrdep_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ClearDepIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="ClearSubDep1"
			TableClassCode="a811"
			DbName="clrsubdep1"
			ShortName="SubDep1"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="ClearTopDepTenantId"
				IsNullable="false"
				DbName="contclrdeptid"
				DataType="TenantIdGen" />
		<TableCol Name="ClearTopDepId"
				IsNullable="false"
				DbName="contclrdepid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="ClearSubDep1IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrsubdep1_pk"
				Suffix="IdIdx"
				Label="ClearSubDep1Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ClearSubDep1ClearTopDepIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrsubdep1_xcdeltopdep"
				Suffix="ClearTopDepIdx"
				Label="Clear Sub Dependancy 1 Container Top Clearetion Dependancy Index" >
			<IndexCol Name="ClearTopDepTenantId" IsAscending="true" />
			<IndexCol Name="ClearTopDepId" IsAscending="true" />
		</Index>
		<Index Name="ClearSubDep1UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrsubdep1_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="ClearTopDepTenantId" IsAscending="true" />
			<IndexCol Name="ClearTopDepId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="clrsubdep1_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ClearSubDep1IdIdx"
				ToIndex="ClearDep.ClearDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="ClearSubDep2"
			TableClassCode="a812"
			DbName="clrsubdep2"
			ShortName="SubDep2"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="ClearSubDep1TenantId"
				IsNullable="false"
				DbName="contclrdep1tid"
				DataType="TenantIdGen" />
		<TableCol Name="ClearSubDep1Id"
				IsNullable="false"
				DbName="contclrdep1id"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="ClearSubDep2IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrsubdep2_pk"
				Suffix="IdIdx"
				Label="ClearSubDep2Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ClearSubDep2ClearSubDep1Idx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrsubdep2_xcdeldep1"
				Suffix="ClearSubDep1Idx"
				Label="Clear Sub Dependancy 2 Container Clear Dependancy 1 Index" >
			<IndexCol Name="ClearSubDep1TenantId" IsAscending="true" />
			<IndexCol Name="ClearSubDep1Id" IsAscending="true" />
		</Index>
		<Index Name="ClearSubDep2UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrsubdep2_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="ClearSubDep1TenantId" IsAscending="true" />
			<IndexCol Name="ClearSubDep1Id" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="clrsubdep2_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ClearSubDep2IdIdx"
				ToIndex="ClearDep.ClearDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="ClearSubDep3"
			TableClassCode="a813"
			DbName="clrsubdep3"
			ShortName="SubDep3"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="ClearSubDep2TenantId"
				IsNullable="false"
				DbName="contclrdep2tid"
				DataType="TenantIdGen" />
		<TableCol Name="ClearSubDep2Id"
				IsNullable="false"
				DbName="contclrdep2id"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="ClearSubDep3IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrsubdep3_pk"
				Suffix="IdIdx"
				Label="ClearSubDep3Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ClearSubDep3ClearSubDep2Idx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrsubdep3_xcdeldep2"
				Suffix="ClearSubDep2Idx"
				Label="Clear Sub Dependancy 3 Container Clear Dependancy 2 Index" >
			<IndexCol Name="ClearSubDep2TenantId" IsAscending="true" />
			<IndexCol Name="ClearSubDep2Id" IsAscending="true" />
		</Index>
		<Index Name="ClearSubDep3UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrsubdep3_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="ClearSubDep2TenantId" IsAscending="true" />
			<IndexCol Name="ClearSubDep2Id" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="clrsubdep3_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ClearSubDep3IdIdx"
				ToIndex="ClearDep.ClearDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="ClearTopDep"
			TableClassCode="a814"
			DbName="clr_topdep"
			ShortName="ClrTopDep"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="TableTenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="ClearTopDepIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrtop_pk"
				Suffix="IdIdx"
				Label="ClearTopDepIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ClearTopDepTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrtop_xctbl"
				Suffix="ClrTopDepTblIdx"
				Label="Table Top Clearetion Dependancy Container Table Index" >
			<IndexCol Name="TableTenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<Index Name="ClearTopDepUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="clrtopdep_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="TableTenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="ClearTopDepPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrtopdep_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="ClearTopDepNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="clrtopdep_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="clrtopdep_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ClearTopDepIdIdx"
				ToIndex="ClearDep.ClearDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DateDef"
			TableClassCode="a815"
			DbName="dtdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<StringCol Name="Dummy"
				Label="Dummy"
				IsNullable="true"
				MaxLen="4" />
		<PrimaryIndex Name="DateDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dtdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="dtdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DateDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DateType"
			TableClassCode="a816"
			DbName="dttyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="DateTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dttyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DateTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="dttyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="dttyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DateTypeIdIdx"
				ToIndex="DateDef.DateDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DelDep"
			TableClassCode="a817"
			DbName="del_dep"
			ShortName="DelDep"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="RelationTenantId"
				Label="Relation Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="RelationId"
				Label="Relation Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="DelDepIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="deldep_pk"
				Suffix="IdIdx"
				Label="DelDepIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DelDepDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deldep_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="DelDepRelationIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deldep_xrel"
				Suffix="DelDepIdx"
				Label="Table Deletion Dependancy Relation Index" >
			<IndexCol Name="RelationTenantId" IsAscending="true" />
			<IndexCol Name="RelationId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="deldep_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DelDepIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DelSubDep1"
			TableClassCode="a818"
			DbName="delsubdep1"
			ShortName="SubDep1"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="DelTopDepTenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="DelTopDepId"
				IsNullable="false"
				DbName="contdeldepid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="DelSubDep1IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="delsubdep1_pk"
				Suffix="IdIdx"
				Label="DelSubDep1Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DelSubDep1DelTopDepIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="delsubdep1_xcdeltopdep"
				Suffix="DelTopDepIdx"
				Label="Del Sub Dependancy 1 Container Top Deletion Dependancy Index" >
			<IndexCol Name="DelTopDepTenantId" IsAscending="true" />
			<IndexCol Name="DelTopDepId" IsAscending="true" />
		</Index>
		<Index Name="DelSubDep1UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="delsubdep1_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="DelTopDepTenantId" IsAscending="true" />
			<IndexCol Name="DelTopDepId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="delsubdep1_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DelSubDep1IdIdx"
				ToIndex="DelDep.DelDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DelSubDep2"
			TableClassCode="a819"
			DbName="delsubdep2"
			ShortName="SubDep2"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="DelSubDep1TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="DelSubDep1Id"
				IsNullable="false"
				DbName="contdeldep1id"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="DelSubDep2IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="delsubdep2_pk"
				Suffix="IdIdx"
				Label="DelSubDep2Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DelSubDep2DelSubDep1Idx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="delsubdep2_xcdeldep1"
				Suffix="ContDelDep1Idx"
				Label="Del Sub Dependancy 2 Container Del Dependancy 1 Index" >
			<IndexCol Name="DelSubDep1TenantId" IsAscending="true" />
			<IndexCol Name="DelSubDep1Id" IsAscending="true" />
		</Index>
		<Index Name="DelSubDep2UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="delsubdep2_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="DelSubDep1TenantId" IsAscending="true" />
			<IndexCol Name="DelSubDep1Id" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="delsubdep2_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DelSubDep2IdIdx"
				ToIndex="DelDep.DelDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DelSubDep3"
			TableClassCode="a81a"
			DbName="delsubdep3"
			ShortName="SubDep3"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="DelSubDep2TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="DelSubDep2Id"
				IsNullable="false"
				DbName="contdeldep2id"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="DelSubDep3IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="delsubdep3_pk"
				Suffix="IdIdx"
				Label="DelSubDep3Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DelSubDep3DelSubDep2Idx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="delsubdep3_xcdeldep2"
				Suffix="DelSubDep2Idx"
				Label="Del Sub Dependancy 3 Container Del Dependancy 2 Index" >
			<IndexCol Name="DelSubDep2TenantId" IsAscending="true" />
			<IndexCol Name="DelSubDep2Id" IsAscending="true" />
		</Index>
		<Index Name="DelSubDep3UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="delsubdep3_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="DelSubDep2TenantId" IsAscending="true" />
			<IndexCol Name="DelSubDep2Id" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="delsubdep3_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DelSubDep3IdIdx"
				ToIndex="DelDep.DelDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DelTopDep"
			TableClassCode="a81b"
			DbName="del_topdep"
			ShortName="TopDep"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<TableCol Name="TableTenantId"
				Label="Table Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="TableId"
				Label="Table Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="PrevTenantId"
				Label="Prev. Tenant Id"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				Label="Prev. Id"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<TableCol Name="NextTenantId"
				Label="Next Tenant Id"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				Label="Next Id"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="DelTopDepIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="deltop_pk"
				Suffix="IdIdx"
				Label="DelTopDepIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DelTopDepTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deltop_xctbl"
				Suffix="DelTopDepTblIdx"
				Label="Table Top Deletion Dependancy Container Table Index" >
			<IndexCol Name="TableTenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<Index Name="DelTopDepUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="deltop_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="TableTenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="DelTopDepPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deltopdep_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="DelTopDepNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deltopdep_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="deltopdep_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DelTopDepIdIdx"
				ToIndex="DelDep.DelDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DoubleDef"
			TableClassCode="a81c"
			DbName="dbldef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<DoubleCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="-22250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
				MaxValue="22250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" />
		<DoubleCol Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="-22250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
				MaxValue="22250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" />
		<DoubleCol Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="-22250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
				MaxValue="22250000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" />
		<PrimaryIndex Name="DoubleDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dbldef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="dbldef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DoubleDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DoubleType"
			TableClassCode="a81d"
			DbName="dbltyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="DoubleTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dbltyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DoubleTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="dbltyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="dbltyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DoubleTypeIdIdx"
				ToIndex="DoubleDef.DoubleDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="EnumTag"
			TableClassCode="a81e"
			DbName="enum_tag"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="EnumTagIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="EnumId"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int16Col Name="EnumCode"
				IsNullable="true"
				MinValue="0"
				MaxValue="32767"
				InitValue="0" />
		<StringCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				MaxLen="64"
				InitValue="" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				IsNullable="true"
				DataType="EnumTagIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				IsNullable="true"
				DataType="EnumTagIdGen" />
		<PrimaryIndex Name="EnumTagIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="enumtag_pk"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="EnumTagTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="enumtag_xtenant"
				Suffix="EnumTagTenantIdx"
				Label="TenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="EnumTagEnumIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="enumtag_xenum"
				Suffix="EnumIdx"
				Label="EnumIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="EnumId" IsAscending="true" />
		</Index>
		<Index Name="EnumTagDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="enumtag_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="EnumTagEnumNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="enumtag_uenumnm"
				Suffix="EnumNameIdx"
				Label="EnumNameIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="EnumId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="EnumTagPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="enumtag_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="EnumTagNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="enumtag_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="FloatDef"
			TableClassCode="a81f"
			DbName="fltdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<FloatCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="-11739999965399884000000000000000000000"
				MaxValue="11739999965399884000000000000000000000" />
		<FloatCol Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="-11739999965399884000000000000000000000"
				MaxValue="11739999965399884000000000000000000000" />
		<FloatCol Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="-11739999965399884000000000000000000000"
				MaxValue="11739999965399884000000000000000000000" />
		<PrimaryIndex Name="FloatDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="fltdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="fltdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="FloatDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="FloatType"
			TableClassCode="a820"
			DbName="flttyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="FloatTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="flttyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="FloatTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="flttyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="flttyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="FloatTypeIdIdx"
				ToIndex="FloatDef.FloatDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Index"
			TableClassCode="a821"
			DbName="idxdef"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="IndexUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ScopeIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<StringCol Name="DbName"
				Label="Db Name"
				IsNullable="true"
				MaxLen="32" />
		<StringCol Name="Suffix"
				IsNullable="true"
				MaxLen="16" />
		<BoolCol Name="IsUnique"
				Label="Is Unique"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="IsDbMapped"
				Label="Is Db Mapped"
				IsNullable="false"
				InitValue="true" />
		<PrimaryIndex Name="IndexIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idxdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="IndexUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idxdef_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="IndexTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxdef_tenantidx"
				ShortName="TenantIdx"
				Suffix="IndexTenantIdx"
				Label="IndexTenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="IndexTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxdef_tableidx"
				ShortName="Table"
				Suffix="IdxTableIdx"
				Label="TableIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<Index Name="IndexDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="index_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="index_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="IndexIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="IndexCol"
			TableClassCode="a822"
			DbName="idxcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="IndexColUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="IndexId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="IndexColIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<TableCol Name="ColumnId"
				IsNullable="false"
				DataType="ValueIdGen" />
		<BoolCol Name="IsAscending"
				IsNullable="false"
				InitValue="true" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				IsNullable="true"
				DataType="IndexColIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				IsNullable="true"
				DataType="IndexColIdGen" />
		<PrimaryIndex Name="IndexColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idxcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="IndexColUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idxcol_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="IndexId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="IndexColTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_tenantidx"
				ShortName="Tenant"
				Suffix="IdxColTenantIdx"
				Label="TenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="IndexColIndexIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_indexidx"
				ShortName="Index"
				Suffix="IndexIdx"
				Label="IndexIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="IndexId" IsAscending="true" />
		</Index>
		<Index Name="IndexColDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="IndexColColumnIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_col_def"
				Suffix="ColIdx"
				Label="ColIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ColumnId" IsAscending="true" />
		</Index>
		<Index Name="IndexColPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="IndexColNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
		<Index Name="IndexColIndexPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_xidxprev"
				Suffix="IdxPrevIdx"
				Label="IndexPrevIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="IndexId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="IndexColIndexNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idxcol_xidxnext"
				Suffix="IdxNextIdx"
				Label="IndexNextIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="IndexId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Int16Def"
			TableClassCode="a823"
			DbName="int16def"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int16Col Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="-32768"
				MaxValue="32767" />
		<Int16Col Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="-32768"
				MaxValue="32767" />
		<Int16Col Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="-32768"
				MaxValue="32767" />
		<PrimaryIndex Name="Int16DefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int16def_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="int16def_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int16DefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int16Type"
			TableClassCode="a824"
			DbName="int16typ"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="Int16TypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int16typ_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Int16TypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="int16typ_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="int16typ_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int16TypeIdIdx"
				ToIndex="Int16Def.Int16DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int32Def"
			TableClassCode="a825"
			DbName="int32def"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int32Col Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="-2147483648"
				MaxValue="2147483647" />
		<Int32Col Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="-2147483648"
				MaxValue="2147483647" />
		<Int32Col Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="-2147483648"
				MaxValue="2147483647" />
		<PrimaryIndex Name="Int32DefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int32def_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="int32def_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int32DefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int32Type"
			TableClassCode="a826"
			DbName="int32typ"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="Int32TypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int32typ_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Int32TypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="int32typ_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="int32typ_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int32TypeIdIdx"
				ToIndex="Int32Def.Int32DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int64Def"
			TableClassCode="a827"
			DbName="int64def"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int64Col Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="-9223372036854775807"
				MaxValue="9223372036854775807" />
		<Int64Col Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="-9223372036854775807"
				MaxValue="9223372036854775807" />
		<Int64Col Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="-9223372036854775807"
				MaxValue="9223372036854775807" />
		<PrimaryIndex Name="Int64DefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int64def_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="int64def_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int64DefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int64Type"
			TableClassCode="a828"
			DbName="int64typ"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="Int64TypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int64typ_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Int64TypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="int64typ_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="int64typ_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int64TypeIdIdx"
				ToIndex="Int64Def.Int64DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NmTokenDef"
			TableClassCode="a829"
			DbName="nmtkndef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int32Col Name="MaxLen"
				Label="Max. Length"
				IsNullable="false"
				DbName="db_max_len"
				MinValue="0"
				MaxValue="2147483647"
				InitValue="0" />
		<NmTokenCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MaxLen="64" />
		<PrimaryIndex Name="NmTokenDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="nmtkndef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="nmtkndef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NmTokenDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NmTokenType"
			TableClassCode="a82a"
			DbName="nmtkntyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="NmTokenTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="nmtkntyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="NmTokenTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="nmtkntyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="nmtkntyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NmTokenTypeIdIdx"
				ToIndex="NmTokenDef.NmTokenDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NmTokensDef"
			TableClassCode="a82b"
			DbName="nmtknsdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int32Col Name="MaxLen"
				Label="Max. Length"
				IsNullable="false"
				DbName="db_max_len"
				MinValue="0"
				MaxValue="2147483647"
				InitValue="0" />
		<NmTokensCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MaxLen="256" />
		<PrimaryIndex Name="NmTokensDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="nmtknsdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="nmtknsdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NmTokensDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NmTokensType"
			TableClassCode="a82c"
			DbName="nmtknstyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="NmTokensTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="nmtknstyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="NmTokensTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="nmtknstyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="nmtknstyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NmTokensTypeIdIdx"
				ToIndex="NmTokensDef.NmTokensDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NumberDef"
			TableClassCode="a82d"
			DbName="numdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int16Col Name="Digits"
				IsNullable="false"
				MinValue="1"
				MaxValue="31"
				InitValue="16" />
		<Int16Col Name="Precis"
				Label="Precision"
				IsNullable="false"
				MinValue="0"
				MaxValue="30"
				InitValue="0" />
		<NumberCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				Digits="31"
				Precis="5" />
		<NumberCol Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				Digits="31"
				Precis="5" />
		<NumberCol Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				Digits="31"
				Precis="5" />
		<PrimaryIndex Name="NumberDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="numdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="numdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NumberDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NumberType"
			TableClassCode="a82e"
			DbName="numtyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="NumberTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="numtyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="NumberTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="numtyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="numtyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NumberTypeIdIdx"
				ToIndex="NumberDef.NumberDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Param"
			TableClassCode="a82f"
			DbName="srvprm"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="ServerMethodId"
				IsNullable="false"
				DbName="srvmeth_id"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ParamIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<BoolCol Name="IsNullable"
				IsNullable="false"
				InitValue="false" />
		<TableCol Name="TypeTenantId"
				IsNullable="true"
				DbName="TpTentId"
				DataType="TenantIdGen" />
		<TableCol Name="TypeId"
				IsNullable="true"
				DbName="TpId"
				DataType="ValueIdGen" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				IsNullable="true"
				DataType="ParamIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				IsNullable="true"
				DataType="ParamIdGen" />
		<PrimaryIndex Name="ParamIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="srvprm_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ParamUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="srvprm_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ServerMethodId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="ParamTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_tenantidx"
				ShortName="Tenant"
				Suffix="ValTentIdx"
				Label="ValueTenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="ParamServerMethodIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_srvmethk"
				Suffix="ServerMethodIdx"
				Label="ServerMethodIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ServerMethodId" IsAscending="true" />
		</Index>
		<Index Name="ParamDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="ParamTypeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_typek"
				Suffix="ServerTypeIdx"
				Label="ServerTypeIdx" >
			<IndexCol Name="TypeTenantId" IsAscending="true" />
			<IndexCol Name="TypeId" IsAscending="true" />
		</Index>
		<Index Name="ParamPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="ParamNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
		<Index Name="ParamContPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_xcontprev"
				Suffix="ContPrevIdx"
				Label="ContPrevIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ServerMethodId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="ParamContNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvprm_xcontnext"
				Suffix="ContNextIdx"
				Label="ContNextIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ServerMethodId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="PopDep"
			TableClassCode="a830"
			DbName="pop_dep"
			ShortName="PopDep"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="RelationTenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="RelationId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="PopDepIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="popdep_pk"
				Suffix="IdIdx"
				Label="PopDepIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="PopDepRelationIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="popdep_xrel"
				Suffix="RelationIdx"
				Label="Relation Population Dependancy Relation Index" >
			<IndexCol Name="RelationTenantId" IsAscending="true" />
			<IndexCol Name="RelationId" IsAscending="true" />
		</Index>
		<Index Name="PopDepDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="popdep_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="popdep_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="PopDepIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="PopSubDep1"
			TableClassCode="a831"
			DbName="popsubdep1"
			ShortName="SubDep1"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="PopTopDepTenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="PopTopDepId"
				IsNullable="false"
				DbName="contpopdepid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="PopSubDep1IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="popsubdep1_pk"
				Suffix="IdIdx"
				Label="PopSubDep1Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="PopSubDep1PopTopDepIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="popsubdep1_xcpoptopdep"
				Suffix="PopTopDepIdx"
				Label="Pop Sub Dependancy 1 Container Top Population Dependancy Index" >
			<IndexCol Name="PopTopDepTenantId" IsAscending="true" />
			<IndexCol Name="PopTopDepId" IsAscending="true" />
		</Index>
		<Index Name="PopSubDep1UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="popsubdep1_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="PopTopDepTenantId" IsAscending="true" />
			<IndexCol Name="PopTopDepId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="popsubdep1_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="PopSubDep1IdIdx"
				ToIndex="PopDep.PopDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="PopSubDep2"
			TableClassCode="a832"
			DbName="popsubdep2"
			ShortName="SubDep2"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="PopSubDep1TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="PopSubDep1Id"
				IsNullable="false"
				DbName="contpopdep1id"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="PopSubDep2IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="popsubdep2_pk"
				Suffix="IdIdx"
				Label="PopSubDep2Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="PopSubDep2PopSubDep1Idx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="popsubdep2_xcpopdep1"
				Suffix="PopSubDep1Idx"
				Label="Pop Sub Dependancy 2 Container Pop Dependancy 1 Index" >
			<IndexCol Name="PopSubDep1TenantId" IsAscending="true" />
			<IndexCol Name="PopSubDep1Id" IsAscending="true" />
		</Index>
		<Index Name="PopSubDep2UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="popsubdep2_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="PopSubDep1TenantId" IsAscending="true" />
			<IndexCol Name="PopSubDep1Id" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="popsubdep2_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="PopSubDep2IdIdx"
				ToIndex="PopDep.PopDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="PopSubDep3"
			TableClassCode="a833"
			DbName="popsubdep3"
			ShortName="SubDep3"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="PopSubDep2TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="PopSubDep2Id"
				IsNullable="false"
				DbName="contpopdep2id"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="PopSubDep3IdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="popsubdep3_pk"
				Suffix="IdIdx"
				Label="PopSubDep3Idx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="PopSubDep3PopSubDep2Idx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="popsubdep3_xcpopdep2"
				Suffix="PopSubDep2Idx"
				Label="Pop Sub Dependancy 3 Container Pop Dependancy 2 Index" >
			<IndexCol Name="PopSubDep2TenantId" IsAscending="true" />
			<IndexCol Name="PopSubDep2Id" IsAscending="true" />
		</Index>
		<Index Name="PopSubDep3UNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="popsubdep3_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="PopSubDep2TenantId" IsAscending="true" />
			<IndexCol Name="PopSubDep2Id" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="popsubdep3_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="PopSubDep3IdIdx"
				ToIndex="PopDep.PopDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="PopTopDep"
			TableClassCode="a834"
			DbName="pop_topdep"
			ShortName="TopDep"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="ContRelationTenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="ContRelationId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<PrimaryIndex Name="PopTopDepIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="poptop_pk"
				Suffix="IdIdx"
				Label="PopTopDepIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="PopTopDepContRelationIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="poptop_xcrel"
				Suffix="ContRelIdx"
				Label="Relation Top Population Dependancy Container Relation Index" >
			<IndexCol Name="ContRelationTenantId" IsAscending="true" />
			<IndexCol Name="ContRelationId" IsAscending="true" />
		</Index>
		<Index Name="PopTopDepUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="poptop_uname"
				Suffix="UNameIdx" >
			<IndexCol Name="ContRelationTenantId" IsAscending="true" />
			<IndexCol Name="ContRelationId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="poptop_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="PopTopDepIdIdx"
				ToIndex="PopDep.PopDepIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Relation"
			TableClassCode="a835"
			DbName="reldef"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="RelationUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ScopeIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<TableCol Name="RelationType"
				IsNullable="false"
				DataType="RelationTypeEnum" />
		<StringCol Name="DbName"
				Label="Db Name"
				IsNullable="true"
				MaxLen="32" />
		<StringCol Name="Suffix"
				IsNullable="true"
				MaxLen="16" />
		<TableCol Name="FromIndexId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="ToTableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="ToIndexId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<BoolCol Name="IsRequired"
				Label="Is Required"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="IsXsdContainer"
				Label="Is XSD Container"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="IsLateResolver"
				IsNullable="false"
				InitValue="false" />
		<BoolCol Name="AllowAddendum"
				IsNullable="false"
				InitValue="false" />
		<TableCol Name="NarrowedTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NarrowedId"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="RelationIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="reldef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="RelationUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="reldef_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="RelationTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="reldef_tenantidx"
				ShortName="TenantIdx"
				Suffix="RelnTenantIdx"
				Label="TenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="RelationTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="reldef_tableidx"
				ShortName="Table"
				Suffix="RelTableIdx"
				Label="TableIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<Index Name="RelationDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="reldef_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="RelationFromKeyIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="reldef_xfromkey"
				Suffix="FromKeyIdx"
				Label="FromKeyIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="FromIndexId" IsAscending="true" />
		</Index>
		<Index Name="RelationToTblIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="reldef_xtotbl"
				Suffix="ToTblIdx"
				Label="ToTblIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ToTableId" IsAscending="true" />
		</Index>
		<Index Name="RelationToKeyIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="reldef_xtokey"
				Suffix="ToKeyIdx"
				Label="ToKeyIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ToIndexId" IsAscending="true" />
		</Index>
		<Index Name="RelationNarrowedIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="reldef_xnarrowed"
				Suffix="NarrowedIdx"
				Label="NarrowedIdx" >
			<IndexCol Name="NarrowedTenantId" IsAscending="true" />
			<IndexCol Name="NarrowedId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="reldef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="RelationIdIdx"
				ToIndex="Scope.ScopeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>

		<CafeObjInterface>
	I$SchemaName$SubProjectObj getProject();
	I$SchemaName$TopDomainObj getCompany();
	I$SchemaName$SchemaDefObj getSchemaDef();
	I$SchemaName$MinorVersionObj getVersion();
	String getVersionString();
	String getPackedVersionString();
	Boolean isColumnInOwnerRelation();
</CafeObjInterface>

		<CafeObjImplementation>
	public I$SchemaName$SubProjectObj getProject() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return ((I$SchemaName$SubProjectObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$TopDomainObj getCompany() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return ((I$SchemaName$TopDomainObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$SchemaDefObj getSchemaDef() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SchemaDefObj ) {
				return ((I$SchemaName$SchemaDefObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$MinorVersionObj getVersion() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				return ((I$SchemaName$MinorVersionObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	protected String getVersionStringForVersion( ICFLibAnyObj value ) {
		String ret;
		if( value instanceof I$SchemaName$MinorVersionObj ) {
			ret = ((I$SchemaName$MinorVersionObj)value).getRequiredName();
		}
		else if( value instanceof I$SchemaName$MajorVersionObj ) {
			ret = ((I$SchemaName$MajorVersionObj)value).getRequiredName();
		}
		else {
			ret = null;
		}
		return( ret );
	}

	public String getVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + &quot;-&quot; + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public String getPackedVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}


	public Boolean isColumnInOwnerRelation() {

		ICFLibAnyObj		focusDef;
		I$SchemaName$TableObj		tableDef;
		final String S_ProcName = &quot;isColumnInOwnerRelation() &quot;;

		if( this instanceof I$SchemaName$AtomObj ) {
			I$SchemaName$AtomObj atomDef = (I$SchemaName$AtomObj)this;
			ICFLibAnyObj atomScopeDef = atomDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)atomScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$TableColObj ) {
			I$SchemaName$TableColObj tableColDef = (I$SchemaName$TableColObj)this;
			ICFLibAnyObj tableColScopeDef = tableColDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)tableColScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$IndexColObj ) {
			I$SchemaName$IndexColObj indexColDef = (I$SchemaName$IndexColObj)this;
			focusDef = indexColDef.getRequiredLookupColumn();
			if( focusDef instanceof I$SchemaName$AtomObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$AtomObj)focusDef).getObjScope();
			}
			else if( focusDef instanceof I$SchemaName$TableColObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$TableColObj)focusDef).getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else if( this instanceof I$SchemaName$RelationColObj ) {
			I$SchemaName$RelationColObj relColDef = (I$SchemaName$RelationColObj)this;
			ICFLibAnyObj columnDef = relColDef.getRequiredLookupFromCol();
			if( columnDef instanceof I$SchemaName$AtomObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else if( columnDef instanceof I$SchemaName$TableColObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getFromColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else {
			throw new RuntimeException(
				S_ProcName + &quot;genContext.getGenDef() did not return a I$SchemaName$AtomObj, I$SchemaName$TableColObj, nor I$SchemaName$IndexColObj instance&quot; );
		}

		List&lt;I$SchemaName$RelationObj&gt; ownerRelations = tableDef.getContainerOwnerRelations();
		if( ( ownerRelations == null )
		 || ( ( ownerRelations != null ) &amp;&amp; ( ownerRelations.size() == 0 ) ) )
		{
			return( false );
		}

		ListIterator&lt;I$SchemaName$RelationObj&gt; ownerEnumerator = ownerRelations.listIterator();

		I$SchemaName$RelationObj ownerRelation;
		I$SchemaName$RelationColObj ownerRelationCol;
		Iterator&lt;I$SchemaName$RelationColObj&gt; ownerRelationCols;

		while( ownerEnumerator.hasNext() ) {

			ownerRelation = ownerEnumerator.next();
			ownerRelationCols = ownerRelation.getOptionalComponentsColumns().iterator();

			while( ownerRelationCols.hasNext() ) {
				ownerRelationCol = ownerRelationCols.next();
				if( ownerRelationCol.getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CafeObjImplementation>

		<CafeEditObjImplementation>
	public I$SchemaName$SubProjectObj getProject() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return ((I$SchemaName$SubProjectObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$TopDomainObj getCompany() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return ((I$SchemaName$TopDomainObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$SchemaDefObj getSchemaDef() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SchemaDefObj ) {
				return ((I$SchemaName$SchemaDefObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$MinorVersionObj getVersion() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				return ((I$SchemaName$MinorVersionObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	protected String getVersionStringForVersion( ICFLibAnyObj value ) {
		String ret;
		if( value instanceof I$SchemaName$MinorVersionObj ) {
			ret = ((I$SchemaName$MinorVersionObj)value).getRequiredName();
		}
		else if( value instanceof I$SchemaName$MajorVersionObj ) {
			ret = ((I$SchemaName$MajorVersionObj)value).getRequiredName();
		}
		else {
			ret = null;
		}
		return( ret );
	}

	public String getVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + &quot;-&quot; + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public String getPackedVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj) curDef ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj) curDef ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public Boolean isColumnInOwnerRelation() {

		ICFLibAnyObj		focusDef;
		I$SchemaName$TableObj		tableDef;
		final String S_ProcName = &quot;isColumnInOwnerRelation() &quot;;

		if( this instanceof I$SchemaName$AtomObj ) {
			I$SchemaName$AtomObj atomDef = (I$SchemaName$AtomObj)this;
			ICFLibAnyObj atomScopeDef = atomDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)atomScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$TableColObj ) {
			I$SchemaName$TableColObj tableColDef = (I$SchemaName$TableColObj)this;
			ICFLibAnyObj tableColScopeDef = tableColDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)tableColScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$IndexColObj ) {
			I$SchemaName$IndexColObj indexColDef = (I$SchemaName$IndexColObj)this;
			focusDef = indexColDef.getRequiredLookupColumn();
			if( focusDef instanceof I$SchemaName$AtomObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$AtomObj)focusDef).getObjScope();
			}
			else if( focusDef instanceof I$SchemaName$TableColObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$TableColObj)focusDef).getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else if( this instanceof I$SchemaName$RelationColObj ) {
			I$SchemaName$RelationColObj relColDef = (I$SchemaName$RelationColObj)this;
			ICFLibAnyObj columnDef = relColDef.getRequiredLookupFromCol();
			if( columnDef instanceof I$SchemaName$AtomObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else if( columnDef instanceof I$SchemaName$TableColObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getFromColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else {
			throw new RuntimeException(
				S_ProcName + &quot;genContext.getGenDef() did not return a I$SchemaName$AtomObj, I$SchemaName$TableColObj, nor I$SchemaName$IndexColObj instance&quot; );
		}

		List&lt;I$SchemaName$RelationObj&gt; ownerRelations = tableDef.getContainerOwnerRelations();
		if( ( ownerRelations == null )
		 || ( ( ownerRelations != null ) &amp;&amp; ( ownerRelations.size() == 0 ) ) )
		{
			return( false );
		}

		ListIterator&lt;I$SchemaName$RelationObj&gt; ownerEnumerator = ownerRelations.listIterator();

		I$SchemaName$RelationObj ownerRelation;
		I$SchemaName$RelationColObj ownerRelationCol;
		Iterator&lt;I$SchemaName$RelationColObj&gt; ownerRelationCols;

		while( ownerEnumerator.hasNext() ) {

			ownerRelation = ownerEnumerator.next();
			ownerRelationCols = ownerRelation.getOptionalComponentsColumns().iterator();

			while( ownerRelationCols.hasNext() ) {
				ownerRelationCol = ownerRelationCols.next();
				if( ownerRelationCol.getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CafeEditObjImplementation>

		<CPlusObjImplementation>
	$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* $CPlusNamespace$::$SchemaName$$TableName$Obj::getProject(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* $CPlusNamespace$::$SchemaName$$TableName$Obj::getCompany(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* $CPlusNamespace$::$SchemaName$$TableName$Obj::getSchemaDef(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$SchemaDefBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* $CPlusNamespace$::$SchemaName$$TableName$Obj::getVersion(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	std::string $CPlusNamespace$::$SchemaName$$TableName$Obj::getVersionStringForVersion( cflib::ICFLibAnyObj* value ) {
		std::string ret;
		if( value-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		else if( value-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		return( ret );
	}

	std::string $CPlusNamespace$::$SchemaName$$TableName$Obj::getVersionString(){
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while (curDef != NULL) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( &quot;-&quot; );
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	std::string $CPlusNamespace$::$SchemaName$$TableName$Obj::getPackedVersionString(){
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while (curDef != NULL) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	bool $CPlusNamespace$::$SchemaName$$TableName$Obj::isColumnInOwnerRelation(){
		static const std::string S_ProcName( &quot;isColumnInOwnerRelation&quot; );
		static const std::string S_This( &quot;this&quot; );
		static const std::string S_GenContextGenDefColumnDef( &quot;genContext()-&gt;getGenDef()-&gt;getColumnDef()&quot; );
		static const std::string S_GenContextGenDefFromColumnDef( &quot;genContext()-&gt;getGenDef()-&gt;getFromColumnDef()&quot; );
		static const std::string S_ClassListOne( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj&quot; );
		static const std::string S_ClassListTwo( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj, I$DefSchemaName$IndexColObj&quot; );

		cflib::ICFLibAnyObj*		focusDef;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj*		tableDef;

		if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$AtomObj* atomDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( this );
			cflib::ICFLibAnyObj* atomScopeDef = atomDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( atomScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$TableColObj* tableColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( this );
			cflib::ICFLibAnyObj* tableColScopeDef = tableColDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( tableColScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$IndexColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt;( this );
			focusDef = indexColDef-&gt;getRequiredLookupColumn();
			if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDef, focusDef, S_ClassListOne );
			}
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$RelationColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt;( this );
			cflib::ICFLibAnyObj* columnDef = relColDef-&gt;getRequiredLookupFromCol();
			if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefFromColumnDef, focusDef, S_ClassListOne );
			}
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_This, this, S_ClassListTwo );
		}

		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = tableDef-&gt;getContainerOwnerRelations();
		if( ownerRelations.empty() ) {
			return( false );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* ownerRelationCol;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; ownerRelationCols;

		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			ownerRelation = *iterOwnerRelations;
			ownerRelationCols = ownerRelation-&gt;getOptionalComponentsColumns();
			for( auto iterCols = ownerRelationCols.begin(); iterCols != ownerRelationCols.end(); iterCols ++ ) {
				ownerRelationCol = *iterCols;
				if( ownerRelationCol-&gt;getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CPlusObjImplementation>

		<CPlusEditObjImplementation>
	$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* $CPlusNamespace$::$SchemaName$$TableName$EditObj::getProject(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* $CPlusNamespace$::$SchemaName$$TableName$EditObj::getCompany(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* $CPlusNamespace$::$SchemaName$$TableName$EditObj::getSchemaDef(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$SchemaDefBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* $CPlusNamespace$::$SchemaName$$TableName$EditObj::getVersion(){
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	std::string $CPlusNamespace$::$SchemaName$$TableName$EditObj::getVersionStringForVersion( cflib::ICFLibAnyObj* value ) {
		std::string ret;
		if( value-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		else if( value-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		return( ret );
	}

	std::string $CPlusNamespace$::$SchemaName$$TableName$EditObj::getVersionString(){
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while (curDef != NULL) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( &quot;-&quot; );
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	std::string $CPlusNamespace$::$SchemaName$$TableName$EditObj::getPackedVersionString(){
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while (curDef != NULL) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	bool $CPlusNamespace$::$SchemaName$$TableName$EditObj::isColumnInOwnerRelation(){
		static const std::string S_ProcName( &quot;isColumnInOwnerRelation&quot; );
		static const std::string S_This( &quot;this&quot; );
		static const std::string S_GenContextGenDefColumnDef( &quot;genContext()-&gt;getGenDef()-&gt;getColumnDef()&quot; );
		static const std::string S_GenContextGenDefFromColumnDef( &quot;genContext()-&gt;getGenDef()-&gt;getFromColumnDef()&quot; );
		static const std::string S_ClassListOne( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj&quot; );
		static const std::string S_ClassListTwo( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj, I$DefSchemaName$IndexColObj&quot; );

		cflib::ICFLibAnyObj*		focusDef;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj*		tableDef;

		if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$AtomObj* atomDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( this );
			cflib::ICFLibAnyObj* atomScopeDef = atomDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( atomScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$TableColObj* tableColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( this );
			cflib::ICFLibAnyObj* tableColScopeDef = tableColDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( tableColScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$IndexColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt;( this );
			focusDef = indexColDef-&gt;getRequiredLookupColumn();
			if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDef, focusDef, S_ClassListOne );
			}
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$RelationColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt;( this );
			cflib::ICFLibAnyObj* columnDef = relColDef-&gt;getRequiredLookupFromCol();
			if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefFromColumnDef, focusDef, S_ClassListOne );
			}
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_This, this, S_ClassListTwo );
		}

		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = tableDef-&gt;getContainerOwnerRelations();
		if( ownerRelations.empty() ) {
			return( false );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* ownerRelationCol;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; ownerRelationCols;

		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			ownerRelation = *iterOwnerRelations;
			ownerRelationCols = ownerRelation-&gt;getOptionalComponentsColumns();
			for( auto iterCols = ownerRelationCols.begin(); iterCols != ownerRelationCols.end(); iterCols ++ ) {
				ownerRelationCol = *iterCols;
				if( ownerRelationCol-&gt;getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CPlusEditObjImplementation>

		<HPlusObjInterface>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* value ) = 0;
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion() = 0;
			virtual std::string getVersionString() = 0;
			virtual std::string getPackedVersionString() = 0;
			virtual bool isColumnInOwnerRelation() = 0;
</HPlusObjInterface>

		<HPlusObjImplementation>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* value );
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject();
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany();
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef();
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion();
			virtual std::string getVersionString();
			virtual std::string getPackedVersionString();
			virtual bool isColumnInOwnerRelation();
</HPlusObjImplementation>

		<HPlusEditObjImplementation>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* value );
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject();
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany();
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef();
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion();
			virtual std::string getVersionString();
			virtual std::string getPackedVersionString();
			virtual bool isColumnInOwnerRelation();
</HPlusEditObjImplementation>
	</Table>

	<Table Name="RelationCol"
			TableClassCode="a836"
			DbName="relcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="RelationColUNameIdx"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="RelationId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="RelationColIdGen" />
		<TableCol Name="DefSchemaTenantId"
				Label="Defining Schema Tenant Id"
				IsNullable="true"
				DbName="defschtentid"
				DataType="TenantIdGen" />
		<TableCol Name="DefSchemaId"
				Label="Defining Schema Id"
				IsNullable="true"
				DbName="defschid"
				DataType="ScopeIdGen" />
		<TableCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				DataType="NameType" />
		<StringCol Name="ShortName"
				Label="Short Name"
				IsNullable="true"
				DbName="short_name"
				MaxLen="16" />
		<StringCol Name="Label"
				IsNullable="true"
				MaxLen="64" />
		<StringCol Name="ShortDescription"
				Label="Short Description"
				IsNullable="true"
				DbName="short_descr"
				MaxLen="128" />
		<StringCol Name="Description"
				IsNullable="true"
				DbName="descr"
				MaxLen="1023" />
		<TableCol Name="FromColId"
				IsNullable="false"
				DataType="IndexColIdGen" />
		<TableCol Name="ToColId"
				IsNullable="false"
				DataType="IndexColIdGen" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevId"
				IsNullable="true"
				DataType="RelationColIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextId"
				IsNullable="true"
				DataType="RelationColIdGen" />
		<PrimaryIndex Name="RelationColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="relcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="RelationColUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="relcol_xuname"
				ShortName="UName"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="RelationId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
		<Index Name="RelationColTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_tenantidx"
				ShortName="Tenant"
				Suffix="RelColTenantIdx"
				Label="TenantIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="RelationColRelationIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_relk"
				Suffix="RelationIdx"
				Label="RelationIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="RelationId" IsAscending="true" />
		</Index>
		<Index Name="RelationColDefSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_defschidx"
				ShortName="DefSchema"
				Suffix="DefSchemaIdx"
				Label="Defining Schema Index" >
			<IndexCol Name="DefSchemaTenantId" IsAscending="true" />
			<IndexCol Name="DefSchemaId" IsAscending="true" />
		</Index>
		<Index Name="RelationColFromColIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_fromk"
				Suffix="FromColIdx"
				Label="FromColIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="FromColId" IsAscending="true" />
		</Index>
		<Index Name="RelationColToColIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_tok"
				Suffix="ToColIdx"
				Label="ToColIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ToColId" IsAscending="true" />
		</Index>
		<Index Name="RelationColPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_xprev"
				Suffix="PrevIdx"
				Label="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="RelationColNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_xnext"
				Suffix="NextIdx"
				Label="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>
		<Index Name="RelationColRelationPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_xrelprev"
				Suffix="RelPrevIdx"
				Label="RelationPrevIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="RelationId" IsAscending="true" />
			<IndexCol Name="PrevId" IsAscending="true" />
		</Index>
		<Index Name="RelationColRelationNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="relcol_xrelnext"
				Suffix="RelNextIdx"
				Label="RelationNextIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="RelationId" IsAscending="true" />
			<IndexCol Name="NextId" IsAscending="true" />
		</Index>

		<CafeObjInterface>
	I$SchemaName$SubProjectObj getProject();
	I$SchemaName$TopDomainObj getCompany();
	I$SchemaName$SchemaDefObj getSchemaDef();
	I$SchemaName$MinorVersionObj getVersion();
	String getVersionString();
	String getPackedVersionString();
	Boolean isColumnInOwnerRelation();
</CafeObjInterface>

		<CafeObjImplementation>
	public I$SchemaName$SubProjectObj getProject() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return ((I$SchemaName$SubProjectObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$TopDomainObj getCompany() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return ((I$SchemaName$TopDomainObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$SchemaDefObj getSchemaDef() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SchemaDefObj ) {
				return ((I$SchemaName$SchemaDefObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$MinorVersionObj getVersion() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				return ((I$SchemaName$MinorVersionObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	protected String getVersionStringForVersion( ICFLibAnyObj value ) {
		String ret;
		if( value instanceof I$SchemaName$MinorVersionObj ) {
			ret = ((I$SchemaName$MinorVersionObj)value).getRequiredName();
		}
		else if( value instanceof I$SchemaName$MajorVersionObj ) {
			ret = ((I$SchemaName$MajorVersionObj)value).getRequiredName();
		}
		else {
			ret = null;
		}
		return( ret );
	}

	public String getVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj)( curDef ) ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj)( curDef ) ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + &quot;-&quot; + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public String getPackedVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj)( curDef ) ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj)( curDef ) ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public Boolean isColumnInOwnerRelation() {

		ICFLibAnyObj		focusDef;
		I$SchemaName$TableObj		tableDef;
		final String S_ProcName = &quot;isColumnInOwnerRelation() &quot;;

		if( this instanceof I$SchemaName$AtomObj ) {
			I$SchemaName$AtomObj atomDef = (I$SchemaName$AtomObj)this;
			ICFLibAnyObj atomScopeDef = atomDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)atomScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$TableColObj ) {
			I$SchemaName$TableColObj tableColDef = (I$SchemaName$TableColObj)this;
			ICFLibAnyObj tableColScopeDef = tableColDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)tableColScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$IndexColObj ) {
			I$SchemaName$IndexColObj indexColDef = (I$SchemaName$IndexColObj)this;
			focusDef = indexColDef.getRequiredLookupColumn();
			if( focusDef instanceof I$SchemaName$AtomObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$AtomObj)focusDef).getObjScope();
			}
			else if( focusDef instanceof I$SchemaName$TableColObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$TableColObj)focusDef).getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else if( this instanceof I$SchemaName$RelationColObj ) {
			I$SchemaName$RelationColObj relColDef = (I$SchemaName$RelationColObj)this;
			ICFLibAnyObj columnDef = relColDef.getRequiredLookupFromCol();
			if( columnDef instanceof I$SchemaName$AtomObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else if( columnDef instanceof I$SchemaName$TableColObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getFromColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else {
			throw new RuntimeException(
				S_ProcName + &quot;genContext.getGenDef() did not return a I$SchemaName$AtomObj, I$SchemaName$TableColObj, nor I$SchemaName$IndexColObj instance&quot; );
		}

		List&lt;I$SchemaName$RelationObj&gt; ownerRelations = tableDef.getContainerOwnerRelations();
		if( ( ownerRelations == null )
		 || ( ( ownerRelations != null ) &amp;&amp; ( ownerRelations.size() == 0 ) ) )
		{
			return( false );
		}

		ListIterator&lt;I$SchemaName$RelationObj&gt; ownerEnumerator = ownerRelations.listIterator();

		I$SchemaName$RelationObj ownerRelation;
		I$SchemaName$RelationColObj ownerRelationCol;
		Iterator&lt;I$SchemaName$RelationColObj&gt; ownerRelationCols;

		while( ownerEnumerator.hasNext() ) {

			ownerRelation = ownerEnumerator.next();
			ownerRelationCols = ownerRelation.getOptionalComponentsColumns().iterator();

			while( ownerRelationCols.hasNext() ) {
				ownerRelationCol = ownerRelationCols.next();
				if( ownerRelationCol.getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CafeObjImplementation>

		<CafeEditObjImplementation>
	public I$SchemaName$SubProjectObj getProject() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return ((I$SchemaName$SubProjectObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$TopDomainObj getCompany() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return ((I$SchemaName$TopDomainObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$SchemaDefObj getSchemaDef() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$SchemaDefObj ) {
				return ((I$SchemaName$SchemaDefObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	public I$SchemaName$MinorVersionObj getVersion() {
		for( ICFLibAnyObj curDef = this; curDef != null; curDef = curDef.getObjScope() ) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				return ((I$SchemaName$MinorVersionObj)curDef);
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$SubProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopProjectObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TopDomainObj ) {
				return( null );
			}
			else if( curDef instanceof I$SchemaName$TldObj ) {
				return( null );
			}
		}
		return( null );
	}

	protected String getVersionStringForVersion( ICFLibAnyObj value ) {
		String ret;
		if( value instanceof I$SchemaName$MinorVersionObj ) {
			ret = ((I$SchemaName$MinorVersionObj)value).getRequiredName();
		}
		else if( value instanceof I$SchemaName$MajorVersionObj ) {
			ret = ((I$SchemaName$MajorVersionObj)value).getRequiredName();
		}
		else {
			ret = null;
		}
		return( ret );
	}

	public String getVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj)( curDef ) ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj)( curDef ) ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + &quot;-&quot; + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public String getPackedVersionString() {
		ICFLibAnyObj scopeDef;
		ICFLibAnyObj curDef = getVersion();
		List&lt;String&gt; invertedNodeNames = new ArrayList&lt;String&gt;();
		while (curDef != null) {
			if( curDef instanceof I$SchemaName$MinorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MinorVersionObj)( curDef ) ) );
			}
			else if( curDef instanceof I$SchemaName$MajorVersionObj ) {
				invertedNodeNames.add( getVersionStringForVersion( (I$SchemaName$MajorVersionObj)( curDef ) ) );
			}
			scopeDef = curDef.getObjScope();
			if( scopeDef == null) {
				curDef = null;
			}
			else if( scopeDef instanceof I$SchemaName$MinorVersionObj ) {
				curDef = scopeDef;
			}
			else if( scopeDef instanceof I$SchemaName$MajorVersionObj ) {
				curDef = scopeDef;
			}
			else {
				curDef = null;
			}
		}
		String ret = &quot;&quot;;
		for( int idx = invertedNodeNames.size() - 1; idx &gt;= 0; idx-- )
		{
			if( ret.length() == 0) {
				ret = invertedNodeNames.get(idx);
			}
			else {
				ret = ret + invertedNodeNames.get(idx);
			}
		}
		return( ret );
	}

	public Boolean isColumnInOwnerRelation() {

		ICFLibAnyObj		focusDef;
		I$SchemaName$TableObj		tableDef;
		final String S_ProcName = &quot;isColumnInOwnerRelation() &quot;;

		if( this instanceof I$SchemaName$AtomObj ) {
			I$SchemaName$AtomObj atomDef = (I$SchemaName$AtomObj)this;
			ICFLibAnyObj atomScopeDef = atomDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)atomScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$TableColObj ) {
			I$SchemaName$TableColObj tableColDef = (I$SchemaName$TableColObj)this;
			ICFLibAnyObj tableColScopeDef = tableColDef.getObjScope();
			tableDef = (I$SchemaName$TableObj)tableColScopeDef;
			focusDef = this;
		}
		else if( this instanceof I$SchemaName$IndexColObj ) {
			I$SchemaName$IndexColObj indexColDef = (I$SchemaName$IndexColObj)this;
			focusDef = indexColDef.getRequiredLookupColumn();
			if( focusDef instanceof I$SchemaName$AtomObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$AtomObj)focusDef).getObjScope();
			}
			else if( focusDef instanceof I$SchemaName$TableColObj ) {
				tableDef = (I$SchemaName$TableObj)((I$SchemaName$TableColObj)focusDef).getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else if( this instanceof I$SchemaName$RelationColObj ) {
			I$SchemaName$RelationColObj relColDef = (I$SchemaName$RelationColObj)this;
			ICFLibAnyObj columnDef = relColDef.getRequiredLookupFromCol();
			if( columnDef instanceof I$SchemaName$AtomObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else if( columnDef instanceof I$SchemaName$TableColObj ) {
				focusDef = columnDef;
				tableDef = (I$SchemaName$TableObj)columnDef.getObjScope();
			}
			else {
				throw new RuntimeException(
					S_ProcName + &quot;genContext.getGenDef().getFromColumnDef() for a I$SchemaName$IndexColObj did not return a I$SchemaName$AtomObj&quot;
						+	&quot; nor a I$SchemaName$TableColObj&quot; );
			}
		}
		else {
			throw new RuntimeException(
				S_ProcName + &quot;genContext.getGenDef() did not return a I$SchemaName$AtomObj, I$SchemaName$TableColObj, nor I$SchemaName$IndexColObj instance&quot; );
		}

		List&lt;I$SchemaName$RelationObj&gt; ownerRelations = tableDef.getContainerOwnerRelations();
		if( ( ownerRelations == null )
		 || ( ( ownerRelations != null ) &amp;&amp; ( ownerRelations.size() == 0 ) ) )
		{
			return( false );
		}

		ListIterator&lt;I$SchemaName$RelationObj&gt; ownerEnumerator = ownerRelations.listIterator();

		I$SchemaName$RelationObj ownerRelation;
		I$SchemaName$RelationColObj ownerRelationCol;
		Iterator&lt;I$SchemaName$RelationColObj&gt; ownerRelationCols;

		while( ownerEnumerator.hasNext() ) {

			ownerRelation = ownerEnumerator.next();
			ownerRelationCols = ownerRelation.getOptionalComponentsColumns().iterator();

			while( ownerRelationCols.hasNext() ) {
				ownerRelationCol = ownerRelationCols.next();
				if( ownerRelationCol.getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CafeEditObjImplementation>

		<CPlusObjImplementation>
	$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* $SchemaName$RelationColObj::getProject() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* $SchemaName$RelationColObj::getCompany() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* $SchemaName$RelationColObj::getSchemaDef() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$SchemaDefBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* $SchemaName$RelationColObj::getVersion() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	std::string $SchemaName$RelationColObj::getVersionStringForVersion( cflib::ICFLibAnyObj* value ) {
		std::string ret;
		if( value-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		else if( value-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		return( ret );
	}

	std::string $SchemaName$RelationColObj::getVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( &quot;-&quot; );
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	std::string $SchemaName$RelationColObj::getPackedVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	bool $SchemaName$RelationColObj::isColumnInOwnerRelation() {
		static const std::string S_ProcName( &quot;isColumnInOwnerRelation&quot; );
		static const std::string S_This( &quot;this&quot; );
		static const std::string S_GenContextGenDefColumnDefLookupColumn( &quot;GenContext.GenDef.ColumnDef.LookupColumn&quot; );
		static const std::string S_GenContextGenDefFromColumnDef( &quot;GenContext.GenDef.FromColumnDef&quot; );
		static const std::string S_FirstClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj&quot; );
		static const std::string S_SecondClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj, I$DefSchemaName$IndexColObj, I$DefSchemaName$RelationColObj&quot; );
		cflib::ICFLibAnyObj* focusDef;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$AtomObj* atomDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( this );
			cflib::ICFLibAnyObj* atomScopeDef = atomDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( atomScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$TableColObj* tableColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( this );
			cflib::ICFLibAnyObj* tableColScopeDef = tableColDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( tableColScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$IndexColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt;( this );
			focusDef = indexColDef-&gt;getRequiredLookupColumn();
			if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, focusDef, S_FirstClassList );
			}
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$RelationColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt;( this );
			cflib::ICFLibAnyObj* columnDef = relColDef-&gt;getRequiredLookupFromCol();
			if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, columnDef, S_FirstClassList );
			}
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_This, this, S_SecondClassList );
		}

		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = tableDef-&gt;getContainerOwnerRelations();
		if( ownerRelations.empty() ) {
			return( false );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* ownerRelationCol;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; ownerRelationCols;

		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			ownerRelation = *iterOwnerRelations;
			ownerRelationCols = ownerRelation-&gt;getOptionalComponentsColumns();
			for( auto iterCols = ownerRelationCols.begin(); iterCols != ownerRelationCols.end(); iterCols ++ ) {
				ownerRelationCol = *iterCols;
				if( ownerRelationCol-&gt;getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CPlusObjImplementation>

		<CPlusEditObjImplementation>
	$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* $SchemaName$RelationColEditObj::getProject() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SubProjectObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* $SchemaName$RelationColEditObj::getCompany() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TopDomainObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* $SchemaName$RelationColEditObj::getSchemaDef() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$SchemaDefBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* $SchemaName$RelationColEditObj::getVersion() {
		for( cflib::ICFLibAnyObj* curDef = this; curDef != NULL; curDef = curDef-&gt;getObjScope() ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				return( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntSubProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopProjectBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTopDomainBuff::CLASS_CODE ) ) {
				return( NULL );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntTldBuff::CLASS_CODE ) ) {
				return( NULL );
			}
		}
		return( NULL );
	}

	std::string $SchemaName$RelationColEditObj::getVersionStringForVersion( cflib::ICFLibAnyObj* value ) {
		std::string ret;
		if( value-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		else if( value-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
			ret = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( value )-&gt;getRequiredName();
		}
		return( ret );
	}

	std::string $SchemaName$RelationColEditObj::getVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( &quot;-&quot; );
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	std::string $SchemaName$RelationColEditObj::getPackedVersionString() {
		cflib::ICFLibAnyObj* scopeDef;
		cflib::ICFLibAnyObj* curDef = getVersion();
		std::vector&lt;std::string&gt; invertedNodeNames;
		while( curDef != NULL ) {
			if( curDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj*&gt;( curDef ) ) );
			}
			else if( curDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				invertedNodeNames.push_back( getVersionStringForVersion( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$MajorVersionObj*&gt;( curDef ) ) );
			}
			scopeDef = curDef-&gt;getObjScope();
			if( scopeDef == NULL ) {
				curDef = NULL;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMinorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else if( scopeDef-&gt;implementsClassCode( cfint::CFIntMajorVersionBuff::CLASS_CODE ) ) {
				curDef = scopeDef;
			}
			else {
				curDef = NULL;
			}
		}
		std::string ret;
		if( ! invertedNodeNames.empty() ) {
			ret = invertedNodeNames.back();
			invertedNodeNames.pop_back();
			while( ! invertedNodeNames.empty() ) {
				ret.append( invertedNodeNames.back() );
				invertedNodeNames.pop_back();
			}
		}
		return( ret );
	}

	bool $SchemaName$RelationColEditObj::isColumnInOwnerRelation() {
		static const std::string S_ProcName( &quot;isColumnInOwnerRelation&quot; );
		static const std::string S_This( &quot;this&quot; );
		static const std::string S_GenContextGenDefColumnDefLookupColumn( &quot;GenContext.GenDef.ColumnDef.LookupColumn&quot; );
		static const std::string S_GenContextGenDefFromColumnDef( &quot;GenContext.GenDef.FromColumnDef&quot; );
		static const std::string S_FirstClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj&quot; );
		static const std::string S_SecondClassList( &quot;I$DefSchemaName$AtomObj, I$DefSchemaName$TableColObj, I$DefSchemaName$IndexColObj, I$DefSchemaName$RelationColObj&quot; );
		cflib::ICFLibAnyObj* focusDef;
		$CPlusDefNamespace$::I$DefSchemaName$TableObj* tableDef;
		if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$AtomObj* atomDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( this );
			cflib::ICFLibAnyObj* atomScopeDef = atomDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( atomScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$TableColObj* tableColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( this );
			cflib::ICFLibAnyObj* tableColScopeDef = tableColDef-&gt;getObjScope();
			tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( tableColScopeDef );
			focusDef = this;
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$IndexColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$IndexColObj* indexColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$IndexColObj*&gt;( this );
			focusDef = indexColDef-&gt;getRequiredLookupColumn();
			if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AtomObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else if( focusDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableColObj*&gt;( focusDef )-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, focusDef, S_FirstClassList );
			}
		}
		else if( implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$RelationColBuff::CLASS_CODE ) ) {
			$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* relColDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt;( this );
			cflib::ICFLibAnyObj* columnDef = relColDef-&gt;getRequiredLookupFromCol();
			if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$AtomBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else if( columnDef-&gt;implementsClassCode( $CPlusDefNamespace$::$DefSchemaName$TableColBuff::CLASS_CODE ) ) {
				focusDef = columnDef;
				tableDef = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TableObj*&gt;( columnDef-&gt;getObjScope() );
			}
			else {
				throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_GenContextGenDefColumnDefLookupColumn, columnDef, S_FirstClassList );
			}
		}
		else {
			throw cflib::CFLibUnsupportedClassException( CLASS_NAME, S_ProcName, S_This, this, S_SecondClassList );
		}

		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationObj*&gt; ownerRelations = tableDef-&gt;getContainerOwnerRelations();
		if( ownerRelations.empty() ) {
			return( false );
		}

		$CPlusDefNamespace$::I$DefSchemaName$RelationObj* ownerRelation;
		$CPlusDefNamespace$::I$DefSchemaName$RelationColObj* ownerRelationCol;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$RelationColObj*&gt; ownerRelationCols;

		for( auto iterOwnerRelations = ownerRelations.begin(); iterOwnerRelations != ownerRelations.end(); iterOwnerRelations ++ ) {
			ownerRelation = *iterOwnerRelations;
			ownerRelationCols = ownerRelation-&gt;getOptionalComponentsColumns();
			for( auto iterCols = ownerRelationCols.begin(); iterCols != ownerRelationCols.end(); iterCols ++ ) {
				ownerRelationCol = *iterCols;
				if( ownerRelationCol-&gt;getRequiredLookupFromCol() == focusDef ) {
					return( true );
				}
			}
		}

		return( false );
	}
</CPlusEditObjImplementation>

		<HPlusObjInterface>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* obj ) = 0;
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef() = 0;
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion() = 0;
			virtual std::string getVersionString() = 0;
			virtual std::string getPackedVersionString() = 0;
			virtual bool isColumnInOwnerRelation() = 0;
</HPlusObjInterface>

		<HPlusObjImplementation>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* obj );
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject();
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany();
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef();
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion();
			virtual std::string getVersionString();
			virtual std::string getPackedVersionString();
			virtual bool isColumnInOwnerRelation();
</HPlusObjImplementation>

		<HPlusEditObjImplementation>
		protected:
			virtual std::string getVersionStringForVersion( cflib::ICFLibAnyObj* obj );
		public:
			virtual $CPlusDefNamespace$::I$DefSchemaName$SubProjectObj* getProject();
			virtual $CPlusDefNamespace$::I$DefSchemaName$TopDomainObj* getCompany();
			virtual $CPlusDefNamespace$::I$DefSchemaName$SchemaDefObj* getSchemaDef();
			virtual $CPlusDefNamespace$::I$DefSchemaName$MinorVersionObj* getVersion();
			virtual std::string getVersionString();
			virtual std::string getPackedVersionString();
			virtual bool isColumnInOwnerRelation();
</HPlusEditObjImplementation>
	</Table>

	<Table Name="ServerListFunc"
			TableClassCode="a837"
			DbName="srvlfunc"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				GenerateId="true"
				DataType="ScopeIdGen" />
		<TableCol Name="RetTenantId"
				IsNullable="true"
				DbName="rettentid"
				DataType="TenantIdGen" />
		<TableCol Name="RetTableId"
				IsNullable="true"
				DbName="rettblid"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="ServerListFuncIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="srvlfunc_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ServerListFuncRetTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="srvlfunc_rettblk"
				ShortName="RetTblIdx"
				Suffix="RetTblIdx"
				Label="RetTableIdx" >
			<IndexCol Name="RetTenantId" IsAscending="true" />
			<IndexCol Name="RetTableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="srvlfunc_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="ServerListFuncIdIdx"
				ToIndex="ServerMethod.ServerMethodIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="StringDef"
			TableClassCode="a838"
			DbName="strdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int32Col Name="MaxLen"
				Label="Max. Length"
				IsNullable="false"
				DbName="db_max_len"
				MinValue="0"
				MaxValue="2147483647"
				InitValue="0" />
		<BoolCol Name="IsPolymorph"
				DbName="is_polymorph"
				Label="Is Polymorphic"
				IsNullable="false"
				InitValue="false" />
		<StringCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MaxLen="500" />
		<PrimaryIndex Name="StringDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="strdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="strdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="StringDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="StringType"
			TableClassCode="a839"
			DbName="strtyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="StringTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="strtyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="StringTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="strtyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="strtyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="StringTypeIdIdx"
				ToIndex="StringDef.StringDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZDateDef"
			TableClassCode="a83a"
			DbName="dzdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<StringCol Name="Dummy"
				Label="Dummy"
				IsNullable="true"
				MaxLen="4" />
		<PrimaryIndex Name="TZDateDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dzdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="dzdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZDateDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZDateType"
			TableClassCode="a83b"
			DbName="dztyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TZDateTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dztyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TZDateTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="dztyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="dztyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZDateTypeIdIdx"
				ToIndex="TZDateDef.TZDateDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZTimeDef"
			TableClassCode="a83c"
			DbName="tmzdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<StringCol Name="Dummy"
				Label="Dummy"
				IsNullable="true"
				MaxLen="4" />
		<PrimaryIndex Name="TZTimeDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tmzdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="tmzdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZTimeDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZTimeType"
			TableClassCode="a83d"
			DbName="tmztyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TZTimeTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tmztyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TZTimeTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tmztyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tmztyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZTimeTypeIdIdx"
				ToIndex="TZTimeDef.TZTimeDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZTimestampDef"
			TableClassCode="a83e"
			DbName="zsdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<StringCol Name="Dummy"
				Label="Dummy"
				IsNullable="true"
				MaxLen="4" />
		<PrimaryIndex Name="TZTimestampDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="zsdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="zsdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZTimestampDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZTimestampType"
			TableClassCode="a83f"
			DbName="zstyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TZTimestampTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="zstyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TZTimestampTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="zstyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="zstyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZTimestampTypeIdIdx"
				ToIndex="TZTimestampDef.TZTimestampDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TableCol"
			TableClassCode="a840"
			DbName="tblcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<StringCol Name="DbName"
				Label="Db Name"
				IsNullable="true"
				MaxLen="32" />
		<TableCol Name="DataTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="DataId"
				IsNullable="true"
				DataType="ValueIdGen" />
		<TableCol Name="XmlElementName"
				DbName="xml_elt_name"
				IsNullable="true"
				DataType="NameType" />
		<PrimaryIndex Name="TableColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tblcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TableColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tblcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<Index Name="TableColDataIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tablecol_xdata"
				Suffix="DataIdx"
				Label="DataIdx" >
			<IndexCol Name="DataTenantId" IsAscending="true" />
			<IndexCol Name="DataId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tablecol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TableColIdIdx"
				ToIndex="Value.ValueIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TextDef"
			TableClassCode="a841"
			DbName="txtdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int32Col Name="MaxLen"
				Label="Max. Length"
				IsNullable="false"
				DbName="db_max_len"
				MinValue="0"
				MaxValue="2147483647"
				InitValue="0" />
		<TextCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MaxLen="65535" />
		<TableCol Name="XmlElementName"
				DbName="xml_elt_name"
				IsNullable="true"
				DataType="NameType" />
		<PrimaryIndex Name="TextDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="txtdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="txtdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TextDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TextType"
			TableClassCode="a842"
			DbName="txttyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TextTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="txttyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TextTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="txttyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="txttyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TextTypeIdIdx"
				ToIndex="TextDef.TextDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TimeDef"
			TableClassCode="a843"
			DbName="tmdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<StringCol Name="Dummy"
				Label="Dummy"
				IsNullable="true"
				MaxLen="4" />
		<PrimaryIndex Name="TimeDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tmdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="tmdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TimeDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TimeType"
			TableClassCode="a845"
			DbName="tmtyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TimeTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tmtyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TimeTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tmtyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tmtyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TimeTypeIdIdx"
				ToIndex="TimeDef.TimeDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TimestampDef"
			TableClassCode="a846"
			DbName="tsdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<StringCol Name="Dummy"
				Label="Dummy"
				IsNullable="true"
				MaxLen="4" />
		<PrimaryIndex Name="TimestampDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tsdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="tsdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TimestampDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TimestampType"
			TableClassCode="a847"
			DbName="tstyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TimestampTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tstyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TimestampTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tstyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tstyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TimestampTypeIdIdx"
				ToIndex="TimestampDef.TimestampDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TokenDef"
			TableClassCode="a848"
			DbName="tkndef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int32Col Name="MaxLen"
				Label="Max. Length"
				IsNullable="false"
				DbName="db_max_len"
				MinValue="0"
				MaxValue="2147483647"
				InitValue="0" />
		<TokenCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MaxLen="64" />
		<PrimaryIndex Name="TokenDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tkndef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="tkndef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TokenDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TokenType"
			TableClassCode="a849"
			DbName="tkntyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TokenTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tkntyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TokenTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tkntyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tkntyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TokenTypeIdIdx"
				ToIndex="TokenDef.TokenDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt16Def"
			TableClassCode="a84a"
			DbName="u16def"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<UInt16Col Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="0" />
		<UInt16Col Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="0" />
		<UInt16Col Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="0" />
		<PrimaryIndex Name="UInt16DefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="ui16def_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="ui16def_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt16DefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt16Type"
			TableClassCode="a84b"
			DbName="uint16typ"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UInt16TypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uint16typ_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UInt16TypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uint16typ_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uint16typ_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt16TypeIdIdx"
				ToIndex="UInt16Def.UInt16DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt32Def"
			TableClassCode="a84c"
			DbName="u32def"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<UInt32Col Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="0" />
		<UInt32Col Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="0" />
		<UInt32Col Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="0" />
		<PrimaryIndex Name="UInt32DefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="ui32def_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="ui32def_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt32DefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt32Type"
			TableClassCode="a84d"
			DbName="uint32typ"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UInt32TypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uint32typ_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UInt32TypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uint32typ_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uint32typ_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt32TypeIdIdx"
				ToIndex="UInt32Def.UInt32DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt64Def"
			TableClassCode="a84e"
			DbName="u64def"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<UInt64Col Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal"
				MinValue="0" />
		<UInt64Col Name="MinValue"
				Label="Min. Value"
				IsNullable="true"
				DbName="MinVal"
				MinValue="0" />
		<UInt64Col Name="MaxValue"
				Label="Max. Value"
				IsNullable="true"
				DbName="MaxVal"
				MinValue="0" />
		<PrimaryIndex Name="UInt64DefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="ui64def_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="ui64def_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt64DefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt64Type"
			TableClassCode="a84f"
			DbName="uint64typ"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UInt64TypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uint64typ_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UInt64TypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uint64typ_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uint64typ_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt64TypeIdIdx"
				ToIndex="UInt64Def.UInt64DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UuidDef"
			TableClassCode="a850"
			DbName="uuiddef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<UuidCol Name="InitValue"
				Label="Init. Value"
				IsNullable="true"
				DbName="InitVal" />
		<PrimaryIndex Name="UuidDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uuiddef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="uuiddef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UuidDefIdIdx"
				ToIndex="Atom.AtomIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UuidType"
			TableClassCode="a851"
			DbName="uuidtyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UuidTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uuidtyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UuidTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uuidtyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uuidtyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UuidTypeIdIdx"
				ToIndex="UuidDef.UuidDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="BlobCol"
			TableClassCode="a852"
			DbName="blbcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="BlobColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="blbcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="BlobColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="blbcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="blbcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="BlobColIdIdx"
				ToIndex="BlobDef.BlobDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="BoolCol"
			TableClassCode="a853"
			DbName="boolcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="BoolColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="boolcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="BoolColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="boolcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="boolcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="BoolColIdIdx"
				ToIndex="BoolDef.BoolDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DateCol"
			TableClassCode="a854"
			DbName="dtcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="DateColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dtcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DateColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="dtcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="dtcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DateColIdIdx"
				ToIndex="DateDef.DateDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="DoubleCol"
			TableClassCode="a855"
			DbName="dblcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="DoubleColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dblcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DoubleColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="dblcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="dblcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="DoubleColIdIdx"
				ToIndex="DoubleDef.DoubleDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="EnumDef"
			TableClassCode="a856"
			DbName="enumdef"
			IsInstantiable="false"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<PrimaryIndex Name="EnumDefIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="enumdef_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="enumdef_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="EnumDefIdIdx"
				ToIndex="Int16Def.Int16DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="EnumType"
			TableClassCode="a857"
			DbName="enumtyp"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="SchemaDefId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="EnumTypeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="enumtyp_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="EnumTypeSchemaDefIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="enumtyp_xschemadef"
				ShortName="SchIdx"
				Suffix="SchemaIdx"
				Label="Schema Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="SchemaDefId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="enumtyp_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="EnumTypeIdIdx"
				ToIndex="EnumDef.EnumDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="FloatCol"
			TableClassCode="a858"
			DbName="fltcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="FloatColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="fltcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="FloatColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="fltcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="fltcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="FloatColIdIdx"
				ToIndex="FloatDef.FloatDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Id16Gen"
			TableClassCode="a859"
			DbName="idg16"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="DispenserTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="DispenserId"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<Int16Col Name="Slice"
				IsNullable="false"
				MinValue="0"
				MaxValue="32767"
				InitValue="0" />
		<Int16Col Name="BlockSize"
				IsNullable="false"
				MinValue="1"
				MaxValue="32767"
				InitValue="1" />
		<PrimaryIndex Name="Id16GenIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idg16_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Id16GenDispIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idg16_dpk_def"
				Suffix="DispIdx"
				Label="DispIdx" >
			<IndexCol Name="DispenserTenantId" IsAscending="true" />
			<IndexCol Name="DispenserId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="idg16_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Id16GenIdIdx"
				ToIndex="Int16Type.Int16TypeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Id32Gen"
			TableClassCode="a85a"
			DbName="idg32"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="DispenserTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="DispenserId"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<Int16Col Name="Slice"
				IsNullable="false"
				MinValue="0"
				MaxValue="32767"
				InitValue="0" />
		<Int32Col Name="BlockSize"
				IsNullable="false"
				MinValue="1"
				MaxValue="2147483647"
				InitValue="1" />
		<PrimaryIndex Name="Id32GenIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idg32_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Id32GenDispIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idg32_dpk_def"
				Suffix="DispIdx"
				Label="DispIdx" >
			<IndexCol Name="DispenserTenantId" IsAscending="true" />
			<IndexCol Name="DispenserId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="idg32_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Id32GenIdIdx"
				ToIndex="Int32Type.Int32TypeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Id64Gen"
			TableClassCode="a85b"
			DbName="idg64"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="DispenserTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="DispenserId"
				IsNullable="true"
				DataType="ScopeIdGen" />
		<Int16Col Name="Slice"
				IsNullable="false"
				MinValue="0"
				MaxValue="32767"
				InitValue="0" />
		<Int64Col Name="BlockSize"
				IsNullable="false"
				MinValue="1"
				MaxValue="9223372036854775807"
				InitValue="1" />
		<PrimaryIndex Name="Id64GenIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idg64_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Id64GenDispIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="idg64_dpk_def"
				Suffix="DispIdx"
				Label="DispIdx" >
			<IndexCol Name="DispenserTenantId" IsAscending="true" />
			<IndexCol Name="DispenserId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="idg64_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Id64GenIdIdx"
				ToIndex="Int64Type.Int64TypeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int16Col"
			TableClassCode="a85c"
			DbName="int16col"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="Int16ColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int16col_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Int16ColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="int16col_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="int16col_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int16ColIdIdx"
				ToIndex="Int16Def.Int16DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int32Col"
			TableClassCode="a85d"
			DbName="int32col"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="Int32ColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int32col_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Int32ColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="int32col_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="int32col_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int32ColIdIdx"
				ToIndex="Int32Def.Int32DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="Int64Col"
			TableClassCode="a85e"
			DbName="int64col"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="Int64ColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="int64col_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="Int64ColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="int64col_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="int64col_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="Int64ColIdIdx"
				ToIndex="Int64Def.Int64DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NmTokenCol"
			TableClassCode="a85f"
			DbName="nmtkncol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="NmTokenColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="nmtkncol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="NmTokenColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="nmtkncol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="nmtkncol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NmTokenColIdIdx"
				ToIndex="NmTokenDef.NmTokenDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NmTokensCol"
			TableClassCode="a860"
			DbName="nmtknscol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="NmTokensColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="nmtknscol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="NmTokensColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="nmtknscol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="nmtknscol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NmTokensColIdIdx"
				ToIndex="NmTokensDef.NmTokensDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="NumberCol"
			TableClassCode="a861"
			DbName="numcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="NumberColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="numcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="NumberColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="numcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="numcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="NumberColIdIdx"
				ToIndex="NumberDef.NumberDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="StringCol"
			TableClassCode="a862"
			DbName="strcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="StringColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="strcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="StringColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="strcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="strcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="StringColIdIdx"
				ToIndex="StringDef.StringDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZDateCol"
			TableClassCode="a863"
			DbName="dzcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TZDateColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="dzcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TZDateColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="dzcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="dzcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZDateColIdIdx"
				ToIndex="TZDateDef.TZDateDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZTimeCol"
			TableClassCode="a864"
			DbName="tmzcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TZTimeColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tmzcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TZTimeColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tmzcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tmzcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZTimeColIdIdx"
				ToIndex="TZTimeDef.TZTimeDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TZTimestampCol"
			TableClassCode="a865"
			DbName="zscol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TZTimestampColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="zscol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TZTimestampColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="zscol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="zscol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TZTimestampColIdIdx"
				ToIndex="TZTimestampDef.TZTimestampDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TextCol"
			TableClassCode="a866"
			DbName="txtcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TextColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="txtcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TextColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="txtcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="txtcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TextColIdIdx"
				ToIndex="TextDef.TextDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TimeCol"
			TableClassCode="a867"
			DbName="tmcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TimeColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tmcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TimeColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tmcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tmcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TimeColIdIdx"
				ToIndex="TimeDef.TimeDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TimestampCol"
			TableClassCode="a868"
			DbName="tscol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TimestampColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tscol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TimestampColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tscol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tscol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TimestampColIdIdx"
				ToIndex="TimestampDef.TimestampDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="TokenCol"
			TableClassCode="a869"
			DbName="tkncol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="TokenColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tkncol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TokenColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="tkncol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="tkncol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="TokenColIdIdx"
				ToIndex="TokenDef.TokenDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt16Col"
			TableClassCode="a86a"
			DbName="uint16col"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UInt16ColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uint16col_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UInt16ColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uint16col_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uint16col_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt16ColIdIdx"
				ToIndex="UInt16Def.UInt16DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt32Col"
			TableClassCode="a86b"
			DbName="uint32col"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UInt32ColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uint32col_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UInt32ColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uint32col_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uint32col_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt32ColIdIdx"
				ToIndex="UInt32Def.UInt32DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UInt64Col"
			TableClassCode="a86c"
			DbName="uint64col"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UInt64ColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uint64col_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UInt64ColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uint64col_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uint64col_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UInt64ColIdIdx"
				ToIndex="UInt64Def.UInt64DefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UuidCol"
			TableClassCode="a86d"
			DbName="uuidcol"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<TableCol Name="TableId"
				IsNullable="false"
				DataType="ScopeIdGen" />
		<PrimaryIndex Name="UuidColIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="uuidcol_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="UuidColTableIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="uuidcol_xtable"
				ShortName="TblIdx"
				Suffix="TableIdx"
				Label="Table Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="TableId" IsAscending="true" />
		</Index>
		<SuperClassRelation Name="SuperClass"
				DbName="uuidcol_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UuidColIdIdx"
				ToIndex="UuidDef.UuidDefIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<Table Name="UuidGen"
			TableClassCode="a86e"
			DbName="idguuid"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			QualTable="SchemaDef"
			LoaderBehaviour="Update"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				Label="Tenant Id"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="Id"
				IsNullable="false"
				DataType="ValueIdGen" />
		<Int16Col Name="Slice"
				IsNullable="false"
				MinValue="0"
				MaxValue="32767"
				InitValue="0" />
		<Int32Col Name="BlockSize"
				IsNullable="false"
				MinValue="1"
				MaxValue="2147483647"
				InitValue="1" />
		<PrimaryIndex Name="UuidGenIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="idguuid_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="IdIdx" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Id" IsAscending="true" />
		</PrimaryIndex>
		<SuperClassRelation Name="SuperClass"
				DbName="idguuid_super"
				Label="SuperClass"
				Suffix="SuperClass"
				FromIndex="UuidGenIdIdx"
				ToIndex="UuidType.UuidTypeIdIdx" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="Id" />
		</SuperClassRelation>
	</Table>

	<TableAddendum FromTable="Chain">
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="chain_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="ChainTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Table"
				RelationType="Container"
				DbName="chain_table"
				Label="Table"
				Suffix="Table"
				FromIndex="ChainTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="chain_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="ChainDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="PrevRelation"
				RelationType="Lookup"
				DbName="chain_prevrel"
				Label="Previous Relation"
				Suffix="PrevRel"
				FromIndex="ChainPrevRelIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="true" >
			<RelationCol Name="PrevRelationTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevRelationId" ToCol="Id" />
		</Relation>
		<Relation Name="NextRelation"
				RelationType="Lookup"
				DbName="chain_nextrel"
				Label="Next Relation"
				Suffix="NextRel"
				FromIndex="ChainNextRelIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="true" >
			<RelationCol Name="NextRelationTenantId" ToCol="TenantId" />
			<RelationCol Name="NextRelationId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ClearDep">
		<Relation Name="Relation"
				RelationType="Lookup"
				DbName="clrdep_reln"
				Label="Relation"
				Suffix="Relation"
				FromIndex="ClearDepRelationIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="RelationId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="clrdep_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="ClearDepDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ClearSubDep1">
		<Relation Name="ClearTopDep"
				RelationType="Container"
				DbName="clrsubdep1_topdep"
				Label="ClearTopDep"
				Suffix="ClearTopDep"
				FromIndex="ClearSubDep1ClearTopDepIdx"
				ToIndex="ClearTopDep.ClearTopDepIdIdx"
				IsRequired="true" >
			<RelationCol Name="ClearTopDepTenantId" ToCol="TenantId" />
			<RelationCol Name="ClearTopDepId" ToCol="Id" />
		</Relation>
		<Relation Name="ClearDep"
				RelationType="Components"
				DbName="clrsubdep1_clrdep"
				Label="Clear Dependency"
				Suffix="ClearDep"
				FromIndex="ClearSubDep1IdIdx"
				ToIndex="ClearSubDep2.ClearSubDep2ClearSubDep1Idx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="ClearSubDep1TenantId" />
			<RelationCol Name="Id" ToCol="ClearSubDep1Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ClearSubDep2">
		<Relation Name="ClearSubDep1"
				RelationType="Container"
				DbName="clrsubdep2_subdep1"
				Label="ClearSubDep1"
				Suffix="ClearSubDep1"
				FromIndex="ClearSubDep2ClearSubDep1Idx"
				ToIndex="ClearSubDep1.ClearSubDep1IdIdx"
				IsRequired="true" >
			<RelationCol Name="ClearSubDep1TenantId" ToCol="TenantId" />
			<RelationCol Name="ClearSubDep1Id" ToCol="Id" />
		</Relation>
		<Relation Name="ClearDep"
				RelationType="Components"
				DbName="clrsubdep2_clrdep"
				Label="Clear Dependency"
				Suffix="ClearDep"
				FromIndex="ClearSubDep2IdIdx"
				ToIndex="ClearSubDep3.ClearSubDep3ClearSubDep2Idx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="ClearSubDep2TenantId" />
			<RelationCol Name="Id" ToCol="ClearSubDep2Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ClearSubDep3">
		<Relation Name="ClearSubDep2"
				RelationType="Container"
				DbName="clrsubdep3_clrsubdep2"
				Label="ClearSubDep2"
				Suffix="ClearSubDep2"
				FromIndex="ClearSubDep3ClearSubDep2Idx"
				ToIndex="ClearSubDep2.ClearSubDep2IdIdx"
				IsRequired="true" >
			<RelationCol Name="ClearSubDep2TenantId" ToCol="TenantId" />
			<RelationCol Name="ClearSubDep2Id" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ClearTopDep">
		<Relation Name="Table"
				RelationType="Container"
				DbName="clrtopdep_table"
				Label="Table"
				Suffix="Table"
				FromIndex="ClearTopDepTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true" >
			<RelationCol Name="TableTenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
		<Relation Name="ClearDep"
				RelationType="Components"
				DbName="clrtopdep_clrdep"
				Label="Clear Dependency"
				Suffix="ClearDep"
				FromIndex="ClearTopDepIdIdx"
				ToIndex="ClearSubDep1.ClearSubDep1ClearTopDepIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="ClearTopDepTenantId" />
			<RelationCol Name="Id" ToCol="ClearTopDepId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="clrtopdep_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="ClearTopDepPrevIdx"
				ToIndex="ClearTopDep.ClearTopDepIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="clrtopdep_next"
				Label="Next"
				Suffix="Next"
				FromIndex="ClearTopDepNextIdx"
				ToIndex="ClearTopDep.ClearTopDepIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DelDep">
		<Relation Name="Relation"
				RelationType="Lookup"
				DbName="deldep_reln"
				Label="Relation"
				Suffix="Relation"
				FromIndex="DelDepRelationIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="true" >
			<RelationCol Name="RelationTenantId" ToCol="TenantId" />
			<RelationCol Name="RelationId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="deldep_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="DelDepDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DelSubDep1">
		<Relation Name="DelTopDep"
				RelationType="Container"
				DbName="delsubdep1_topdep"
				Label="DelTopDep"
				Suffix="DelTopDep"
				FromIndex="DelSubDep1DelTopDepIdx"
				ToIndex="DelTopDep.DelTopDepIdIdx"
				IsRequired="true" >
			<RelationCol Name="DelTopDepTenantId" ToCol="TenantId" />
			<RelationCol Name="DelTopDepId" ToCol="Id" />
		</Relation>
		<Relation Name="DelDep"
				RelationType="Components"
				DbName="delsubdep1_deldep"
				Label="Deletion Dependency"
				Suffix="DelDep"
				FromIndex="DelSubDep1IdIdx"
				ToIndex="DelSubDep2.DelSubDep2DelSubDep1Idx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="DelSubDep1TenantId" />
			<RelationCol Name="Id" ToCol="DelSubDep1Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DelSubDep2">
		<Relation Name="DelSubDep1"
				RelationType="Container"
				DbName="delsubdep2_subdep1"
				Label="DelSubDep1"
				Suffix="DelSubDep1"
				FromIndex="DelSubDep2DelSubDep1Idx"
				ToIndex="DelSubDep1.DelSubDep1IdIdx"
				IsRequired="true" >
			<RelationCol Name="DelSubDep1TenantId" ToCol="TenantId" />
			<RelationCol Name="DelSubDep1Id" ToCol="Id" />
		</Relation>
		<Relation Name="DelDep"
				RelationType="Components"
				DbName="delsubdep2_deldep"
				Label="Deletion Dependency"
				Suffix="DelDep"
				FromIndex="DelSubDep2IdIdx"
				ToIndex="DelSubDep3.DelSubDep3DelSubDep2Idx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="DelSubDep2TenantId" />
			<RelationCol Name="Id" ToCol="DelSubDep2Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DelSubDep3">
		<Relation Name="DelSubDep2"
				RelationType="Container"
				DbName="delsubdep3_subdep2"
				Label="DelSubDep2"
				Suffix="DelSubDep2"
				FromIndex="DelSubDep3DelSubDep2Idx"
				ToIndex="DelSubDep2.DelSubDep2IdIdx"
				IsRequired="true" >
			<RelationCol Name="DelSubDep2TenantId" ToCol="TenantId" />
			<RelationCol Name="DelSubDep2Id" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DelTopDep">
		<Relation Name="Table"
				RelationType="Container"
				DbName="deltopdep_table"
				Label="Table"
				Suffix="Table"
				FromIndex="DelTopDepTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true" >
			<RelationCol Name="TableTenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
		<Relation Name="DelDep"
				RelationType="Components"
				DbName="deltopdep_deldep"
				Label="Deletion Dependency"
				Suffix="DelDep"
				FromIndex="DelTopDepIdIdx"
				ToIndex="DelSubDep1.DelSubDep1DelTopDepIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="DelTopDepTenantId" />
			<RelationCol Name="Id" ToCol="DelTopDepId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="deltopdep_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="DelTopDepPrevIdx"
				ToIndex="DelTopDep.DelTopDepIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="deltopdep_next"
				Label="Next"
				Suffix="Next"
				FromIndex="DelTopDepNextIdx"
				ToIndex="DelTopDep.DelTopDepIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="EnumDef">
		<Relation Name="Tags"
				RelationType="Components"
				DbName="enumdef_tags"
				Label="Component Enum Tags"
				Suffix="Tag"
				FromIndex="EnumDefIdIdx"
				ToIndex="EnumTag.EnumTagEnumIdx"
				IsRequired="true"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="EnumId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="EnumTag">
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="enumtag_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="EnumTagTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="EnumDef"
				RelationType="Container"
				DbName="enumtag_enumdef"
				Label="Enumeration"
				Suffix="EnumDef"
				FromIndex="EnumTagEnumIdx"
				ToIndex="EnumDef.EnumDefIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="EnumId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="enumtag_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="EnumTagDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="enumtag_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="EnumTagPrevIdx"
				ToIndex="EnumTag.EnumTagIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="enumtag_next"
				Label="Next"
				Suffix="Next"
				FromIndex="EnumTagNextIdx"
				ToIndex="EnumTag.EnumTagIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Id16Gen">
		<Relation Name="Dispenser"
				RelationType="Lookup"
				DbName="id16g_dispenser"
				Label="Dispensing Table"
				Suffix="Dispenser"
				FromIndex="Id16GenDispIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="false" >
			<RelationCol Name="DispenserTenantId" ToCol="TenantId" />
			<RelationCol Name="DispenserId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Id32Gen">
		<Relation Name="Dispenser"
				RelationType="Lookup"
				DbName="id32g_dispenser"
				Label="Dispensing Table"
				Suffix="Dispenser"
				FromIndex="Id32GenDispIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="false" >
			<RelationCol Name="DispenserTenantId" ToCol="TenantId" />
			<RelationCol Name="DispenserId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Id64Gen">
		<Relation Name="Dispenser"
				RelationType="Lookup"
				DbName="id64g_dispenser"
				Label="Dispensing Table"
				Suffix="Dispenser"
				FromIndex="Id64GenDispIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="false" >
			<RelationCol Name="DispenserTenantId" ToCol="TenantId" />
			<RelationCol Name="DispenserId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Index">
		<Relation Name="Table"
				RelationType="Container"
				DbName="index_table"
				Label="Table"
				Suffix="Table"
				FromIndex="IndexTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="index_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="IndexDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="Columns"
				RelationType="Components"
				DbName="index_cols"
				Label="Columns"
				Suffix="Columns"
				FromIndex="IndexIdIdx"
				ToIndex="IndexCol.IndexColIndexIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="IndexId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="IndexCol">
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="idxcol_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="IndexColTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Index"
				RelationType="Container"
				DbName="idxcol_index"
				Label="Containing Index"
				Suffix="Index"
				FromIndex="IndexColIndexIdx"
				ToIndex="Index.IndexIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="IndexId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="idxcol_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="IndexColDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="ReferencingRelFromCols"
				RelationType="Children"
				DbName="idxcol_reffromcols"
				Label="Referencing Relation From Columns"
				Suffix="RefRelFromCol"
				FromIndex="IndexColIdIdx"
				ToIndex="RelationCol.RelationColFromColIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="FromColId" />
		</Relation>
		<Relation Name="ReferencingRelToCols"
				RelationType="Children"
				DbName="idxcol_reftocols"
				Label="Referencing Relation To Columns"
				Suffix="RefRelToCol"
				FromIndex="IndexColIdIdx"
				ToIndex="RelationCol.RelationColToColIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="ToColId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="idxcol_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="IndexColPrevIdx"
				ToIndex="IndexCol.IndexColIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="idxcol_next"
				Label="Next"
				Suffix="Next"
				FromIndex="IndexColNextIdx"
				ToIndex="IndexCol.IndexColIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="MinorVersion">
		<Relation Name="SchemaDef"
				RelationType="Components"
				DbName="mnvr_schemadef"
				Label="Schema Definition"
				Suffix="SchemaDef"
				FromIndex="MinorVersionIdIdx"
				ToIndex="SchemaDef.SchemaDefMinorVersionIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="MinorVersionId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Param">
		<Relation Name="ServerMethod"
				RelationType="Container"
				DbName="param_srvmeth"
				Label="Containing Server Method"
				Suffix="ServerMeth"
				FromIndex="ParamServerMethodIdx"
				ToIndex="ServerMethod.ServerMethodIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ServerMethodId" ToCol="Id" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="param_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="ParamTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="param_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="ParamDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="param_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="ParamPrevIdx"
				ToIndex="Param.ParamIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="param_next"
				Label="Next"
				Suffix="Next"
				FromIndex="ParamNextIdx"
				ToIndex="Param.ParamIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="PopDep">
		<Relation Name="Relation"
				RelationType="Lookup"
				DbName="popdep_reln"
				Label="Relation"
				Suffix="Relation"
				FromIndex="PopDepRelationIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="true" >
			<RelationCol Name="RelationTenantId" ToCol="TenantId" />
			<RelationCol Name="RelationId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="popdep_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="PopDepDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="PopSubDep1">
		<Relation Name="PopTopDep"
				RelationType="Container"
				DbName="popsubdep1_topdep"
				Label="ContPopTopDep"
				Suffix="ContPopTopDep"
				FromIndex="PopSubDep1PopTopDepIdx"
				ToIndex="PopTopDep.PopTopDepIdIdx"
				IsRequired="true" >
			<RelationCol Name="PopTopDepTenantId" ToCol="TenantId" />
			<RelationCol Name="PopTopDepId" ToCol="Id" />
		</Relation>
		<Relation Name="PopDep"
				RelationType="Components"
				DbName="popsubdep1_popdep"
				Label="Population Dependency"
				Suffix="PopDep"
				FromIndex="PopSubDep1IdIdx"
				ToIndex="PopSubDep2.PopSubDep2PopSubDep1Idx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="PopSubDep1TenantId" />
			<RelationCol Name="Id" ToCol="PopSubDep1Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="PopSubDep2">
		<Relation Name="PopSubDep1"
				RelationType="Container"
				DbName="popsubdep2_subdep1"
				Label="PopSubDep1"
				Suffix="PopSubDep1"
				FromIndex="PopSubDep2PopSubDep1Idx"
				ToIndex="PopSubDep1.PopSubDep1IdIdx"
				IsRequired="true" >
			<RelationCol Name="PopSubDep1TenantId" ToCol="TenantId" />
			<RelationCol Name="PopSubDep1Id" ToCol="Id" />
		</Relation>
		<Relation Name="PopDep"
				RelationType="Components"
				DbName="popsubdep2_popdep"
				Label="Population Dependency"
				Suffix="PopDep"
				FromIndex="PopSubDep2IdIdx"
				ToIndex="PopSubDep3.PopSubDep3PopSubDep2Idx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="PopSubDep2TenantId" />
			<RelationCol Name="Id" ToCol="PopSubDep2Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="PopSubDep3">
		<Relation Name="PopSubDep2"
				RelationType="Container"
				DbName="popsubdep3_subdep2"
				Label="PopSubDep2"
				Suffix="PopSubDep2"
				FromIndex="PopSubDep3PopSubDep2Idx"
				ToIndex="PopSubDep2.PopSubDep2IdIdx"
				IsRequired="true" >
			<RelationCol Name="PopSubDep2TenantId" ToCol="TenantId" />
			<RelationCol Name="PopSubDep2Id" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="PopTopDep">
		<Relation Name="ContRelation"
				RelationType="Container"
				DbName="poptopdep_contreln"
				Label="ContRelation"
				Suffix="ContRelation"
				FromIndex="PopTopDepContRelationIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="true" >
			<RelationCol Name="ContRelationTenantId" ToCol="TenantId" />
			<RelationCol Name="ContRelationId" ToCol="Id" />
		</Relation>
		<Relation Name="PopDep"
				RelationType="Components"
				DbName="poptopdep_popdep"
				Label="Population Dependency"
				Suffix="PopDep"
				FromIndex="PopTopDepIdIdx"
				ToIndex="PopSubDep1.PopSubDep1PopTopDepIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="PopTopDepTenantId" />
			<RelationCol Name="Id" ToCol="PopTopDepId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Relation">
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="reln_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="RelationDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="FromTable"
				RelationType="Container"
				DbName="reln_fmtable"
				Label="From Table"
				Suffix="FromTable"
				FromIndex="RelationTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
		<Relation Name="Columns"
				RelationType="Components"
				DbName="reln_cols"
				Label="Columns"
				Suffix="Columns"
				FromIndex="RelationIdIdx"
				ToIndex="RelationCol.RelationColRelationIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="RelationId" />
		</Relation>
		<Relation Name="PopDep"
				RelationType="Components"
				DbName="reln_popdep"
				Label="Population Dependency"
				Suffix="PopDep"
				FromIndex="RelationIdIdx"
				ToIndex="PopTopDep.PopTopDepContRelationIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="ContRelationTenantId" />
			<RelationCol Name="Id" ToCol="ContRelationId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="RelationCol">
		<Relation Name="Relation"
				RelationType="Container"
				DbName="relcol_reln"
				Label="Containing Relation"
				Suffix="Relation"
				FromIndex="RelationColRelationIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="RelationId" ToCol="Id" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="relcol_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="RelationColTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="relcol_defschema"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="RelationColDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="relcol_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="RelationColPrevIdx"
				ToIndex="RelationCol.RelationColIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="relcol_next"
				Label="Next"
				Suffix="Next"
				FromIndex="RelationColNextIdx"
				ToIndex="RelationCol.RelationColIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="SchemaDef">
		<Relation Name="MinorVersion"
				RelationType="Container"
				DbName="schdef_mnvr"
				Label="MinorVersion"
				Suffix="MinorVersion"
				FromIndex="SchemaDefMinorVersionIdx"
				ToIndex="MinorVersion.MinorVersionIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="MinorVersionId" ToCol="Id" />
		</Relation>
		<Relation Name="Tables"
				RelationType="Components"
				DbName="schdef_tables"
				Label="Table Definitions"
				Suffix="Tables"
				FromIndex="SchemaDefIdIdx"
				ToIndex="Table.TableSchemaDefIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="SchemaDefId" />
		</Relation>
		<Relation Name="Types"
				RelationType="Components"
				DbName="schdef_types"
				Label="Type Definitions"
				Suffix="Types"
				FromIndex="SchemaDefIdIdx"
				ToIndex="Value.ValueScopeIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="ScopeId" />
		</Relation>
		<Relation Name="SchemaRefs"
				RelationType="Components"
				DbName="schdef_schrefs"
				Label="Schema References"
				Suffix="SchemaRefs"
				FromIndex="SchemaDefIdIdx"
				ToIndex="SchemaRef.SchemaRefSchemaIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="SchemaId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="SchemaRef">
		<Relation Name="Schema"
				RelationType="Container"
				DbName="schref_schdef"
				Label="Schema"
				Suffix="Schema"
				FromIndex="SchemaRefSchemaIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="RefSchema"
				RelationType="Lookup"
				DbName="schref_refschdef"
				Label="Referenced Schema"
				Suffix="RefSchema"
				FromIndex="SchemaRefRefSchemaIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="RefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="RefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="schref_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="SchemaRefPrevIdx"
				ToIndex="SchemaRef.SchemaRefIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="schref_next"
				Label="Next"
				Suffix="Next"
				FromIndex="SchemaRefNextIdx"
				ToIndex="SchemaRef.SchemaRefIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Scope">
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="scop_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="ScopeTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ServerListFunc">
		<Relation Name="RetTable"
				RelationType="Lookup"
				DbName="srvlstfn_rettbl"
				Label="Ret Table"
				Suffix="RetTable"
				FromIndex="ServerListFuncRetTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="false" >
			<RelationCol Name="RetTenantId" ToCol="TenantId" />
			<RelationCol Name="RetTableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ServerMethod">
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="srvmeth_defsch"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="ServerMethodDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="ForTable"
				RelationType="Container"
				DbName="srvmeth_fortbl"
				Label="For Table"
				Suffix="ForTable"
				FromIndex="ServerMethodTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
		<Relation Name="Params"
				RelationType="Components"
				DbName="srvmeth_params"
				Label="Parameters"
				Suffix="Params"
				FromIndex="ServerMethodIdIdx"
				ToIndex="Param.ParamServerMethodIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="ServerMethodId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ServerObjFunc">
		<Relation Name="RetTable"
				RelationType="Lookup"
				DbName="srvobjfn_rettbl"
				Label="Ret Table"
				Suffix="RetTable"
				FromIndex="ServerObjFuncRetTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="false" >
			<RelationCol Name="RetTenantId" ToCol="TenantId" />
			<RelationCol Name="RetTableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Table">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="table_schdef"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TableSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="table_defsch"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="TableDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="TableRelation"
				RelationType="Components"
				DbName="table_reln"
				Label="Relation Definitions"
				Suffix="Relation"
				FromIndex="TableIdIdx"
				ToIndex="Relation.RelationTableIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="TableId" />
		</Relation>
		<Relation Name="LookupIndex"
				RelationType="Lookup"
				DbName="table_lkidx"
				Label="Lookup Index"
				Suffix="LookupIndex"
				FromIndex="TableLookupIndexIdx"
				ToIndex="Index.IndexIdIdx"
				IsLateResolver="true"
				IsRequired="false" >
			<RelationCol Name="LookupIndexTenantId" ToCol="TenantId" />
			<RelationCol Name="LookupIndexId" ToCol="Id" />
		</Relation>
		<Relation Name="AltIndex"
				RelationType="Lookup"
				DbName="table_altidx"
				Label="Alt Index"
				Suffix="AltIndex"
				FromIndex="TableAltIndexIdx"
				ToIndex="Index.IndexIdIdx"
				IsLateResolver="true"
				IsRequired="false" >
			<RelationCol Name="AltIndexTenantId" ToCol="TenantId" />
			<RelationCol Name="AltIndexId" ToCol="Id" />
		</Relation>
		<Relation Name="QualifyingTable"
				RelationType="Lookup"
				DbName="table_qualtbl"
				Label="Qualifying Table"
				Suffix="QualTable"
				FromIndex="TableQualifyingTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="false" >
			<RelationCol Name="QualifyingTenantId" ToCol="TenantId" />
			<RelationCol Name="QualifyingTableId" ToCol="Id" />
		</Relation>
		<Relation Name="TableIndex"
				RelationType="Components"
				DbName="table_idx"
				Label="Index Definitions"
				Suffix="Index"
				FromIndex="TableIdIdx"
				ToIndex="Index.IndexTableIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="TableId" />
		</Relation>
		<Relation Name="PrimaryIndex"
				RelationType="Lookup"
				DbName="table_primidx"
				Label="Primary Index"
				Suffix="PrimaryIndex"
				FromIndex="TablePrimaryIndexIdx"
				ToIndex="Index.IndexIdIdx"
				IsRequired="false"
				IsLateResolver="true"
				PopDepChain="TableIndex" >
			<RelationCol Name="PrimaryIndexTenantId" ToCol="TenantId" />
			<RelationCol Name="PrimaryIndexId" ToCol="Id" />
		</Relation>
		<Relation Name="Columns"
				RelationType="Components"
				DbName="table_cols"
				Label="Columns"
				Suffix="Columns"
				FromIndex="TableIdIdx"
				ToIndex="Value.ValueScopeIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="ScopeId" />
		</Relation>
		<Relation Name="ReverseRelations"
				RelationType="Children"
				DbName="table_revrel"
				Label="Reverse Relations"
				Suffix="ReverseRelations"
				FromIndex="TableIdIdx"
				ToIndex="Relation.RelationToTblIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="ToTableId" />
		</Relation>
		<Relation Name="Chains"
				RelationType="Components"
				DbName="table_chains"
				Label="Chains"
				Suffix="Chains"
				FromIndex="TableIdIdx"
				ToIndex="Chain.ChainTableIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="TableId" />
		</Relation>
		<Relation Name="DelDep"
				RelationType="Components"
				DbName="table_deldep"
				Label="Deletion Dependency"
				Suffix="DelDep"
				FromIndex="TableIdIdx"
				ToIndex="DelTopDep.DelTopDepTableIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TableTenantId" />
			<RelationCol Name="Id" ToCol="TableId" />
		</Relation>
		<Relation Name="ClearDep"
				RelationType="Components"
				DbName="table_clrdep"
				Label="Clear Relationships Dependency"
				Suffix="ClearDep"
				FromIndex="TableIdIdx"
				ToIndex="ClearTopDep.ClearTopDepTableIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TableTenantId" />
			<RelationCol Name="Id" ToCol="TableId" />
		</Relation>
		<Relation Name="DispensedId16Gen"
				RelationType="Children"
				DbName="table_dispid16g"
				Label="Dispensed Id16 Generators"
				Suffix="DispId16Gen"
				FromIndex="TableIdIdx"
				ToIndex="Id16Gen.Id16GenDispIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="DispenserTenantId" />
			<RelationCol Name="Id" ToCol="DispenserId" />
		</Relation>
		<Relation Name="DispensedId32Gen"
				RelationType="Children"
				DbName="table_dispid32g"
				Label="Dispensed Id32 Generators"
				Suffix="DispId32Gen"
				FromIndex="TableIdIdx"
				ToIndex="Id32Gen.Id32GenDispIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="DispenserTenantId" />
			<RelationCol Name="Id" ToCol="DispenserId" />
		</Relation>
		<Relation Name="DispensedId64Gen"
				RelationType="Children"
				DbName="table_dispid64g"
				Label="Dispensed Id64 Generators"
				Suffix="DispId64Gen"
				FromIndex="TableIdIdx"
				ToIndex="Id64Gen.Id64GenDispIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="DispenserTenantId" />
			<RelationCol Name="Id" ToCol="DispenserId" />
		</Relation>
		<Relation Name="ServerMethods"
				RelationType="Components"
				DbName="table_srvmeth"
				Label="Server Methods"
				Suffix="ServerMethods"
				FromIndex="TableIdIdx"
				ToIndex="ServerMethod.ServerMethodTableIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="TableId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Tenant">
		<Relation Name="TenantSchema"
				RelationType="Components"
				DbName="tenant_schdef"
				Label="Schema Definitions"
				Suffix="Schema"
				FromIndex="TenantIdIdx"
				ToIndex="SchemaDef.SchemaDefCTenantIdx"
				IsRequired="false" >
			<RelationCol Name="Id" ToCol="TenantId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Value">
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="value_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="ValueTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Scope"
				RelationType="Container"
				DbName="value_scope"
				Label="Containing Scope"
				Suffix="Scope"
				FromIndex="ValueScopeIdx"
				ToIndex="Scope.ScopeIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ScopeId" ToCol="Id" />
		</Relation>
		<Relation Name="DefSchema"
				RelationType="Lookup"
				DbName="value_defsch"
				Label="Defining Schema Definition"
				Suffix="DefSchema"
				FromIndex="ValueDefSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="false" >
			<RelationCol Name="DefSchemaTenantId" ToCol="TenantId" />
			<RelationCol Name="DefSchemaId" ToCol="Id" />
		</Relation>
		<Relation Name="ReferencingTableCols"
				RelationType="Children"
				DbName="value_reftblcol"
				Label="Referencing Table Columns"
				Suffix="RefTableCol"
				FromIndex="ValueIdIdx"
				ToIndex="TableCol.TableColDataIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="DataTenantId" />
			<RelationCol Name="Id" ToCol="DataId" />
		</Relation>
		<Relation Name="ReferencingIndexCols"
				RelationType="Children"
				DbName="value_refidxcol"
				Label="Referencing Index Columns"
				Suffix="RefIndexCol"
				FromIndex="ValueIdIdx"
				ToIndex="IndexCol.IndexColColumnIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="Id" ToCol="ColumnId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="value_prev"
				Label="Previous"
				Suffix="Prev"
				FromIndex="ValuePrevIdx"
				ToIndex="Value.ValueIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevId" ToCol="Id" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="value_next"
				Label="Next"
				Suffix="Next"
				FromIndex="ValueNextIdx"
				ToIndex="Value.ValueIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BlobCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="blbcol_table"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="BlobColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BlobType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="blbtyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="BlobTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BoolCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="boolcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="BoolColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BoolType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="bootyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="BoolTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DateCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="dtcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="DateColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DateType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="dttyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="DateTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DoubleCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="dblcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="DoubleColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DoubleType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="dbltyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="DoubleTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="EnumType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="enumtyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="EnumTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="FloatCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="fltcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="FloatColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="FloatType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="flttyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="FloatTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Index">
		<Relation Name="IndexTenant"
				RelationType="Owner"
				DbName="index_tenant"
				Label="Tenant"
				Suffix="IdxTenant"
				FromIndex="IndexTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true"
				Narrowed="Scope.Tenant" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="IndexCol">
		<Relation Name="Column"
				RelationType="Lookup"
				DbName="idxcol_col"
				Label="Column"
				Suffix="Column"
				FromIndex="IndexColColumnIdx"
				ToIndex="Value.ValueIdIdx"
				IsRequired="true"
				PopDepChain="Index.Table.Columns" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ColumnId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Int16Col">
		<Relation Name="Table"
				RelationType="Container"
				DbName="i16col_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="Int16ColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Int16Type">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="i16typ_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="Int16TypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Int32Col">
		<Relation Name="Table"
				RelationType="Container"
				DbName="i32col_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="Int32ColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Int32Type">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="i32typ_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="Int32TypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Int64Col">
		<Relation Name="Table"
				RelationType="Container"
				DbName="i64col_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="Int64ColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Int64Type">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="i64typ_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="Int64TypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="NmTokenCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="nmtokcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="NmTokenColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="NmTokenType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="nmtoktyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="NmTokenTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="NmTokensCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="nmtkscol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="NmTokensColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="NmTokensType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="nmtkstyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="NmTokensTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="NumberCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="numcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="NumberColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="NumberType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="numtyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="NumberTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Param">
		<Relation Name="Type"
				RelationType="Lookup"
				DbName="param_typ"
				Label="Type Specification"
				Suffix="Type"
				FromIndex="ParamTypeIdx"
				ToIndex="Value.ValueIdIdx"
				IsRequired="true"
				PopDepChain="ServerMethod.ForTable.SchemaDef.Types" >
			<RelationCol Name="TypeTenantId" ToCol="TenantId" />
			<RelationCol Name="TypeId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Relation">
		<Relation Name="RelTenant"
				RelationType="Owner"
				DbName="reln_reltenant"
				Label="Relation Tenant"
				Suffix="RelTenant"
				FromIndex="RelationTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true"
				Narrowed="Scope.Tenant" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="FromIndex"
				RelationType="Lookup"
				DbName="reln_fmidx"
				Label="From Index"
				Suffix="FromIndex"
				FromIndex="RelationFromKeyIdx"
				ToIndex="Index.IndexIdIdx"
				IsRequired="true"
				PopDepChain="FromTable.TableIndex" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="FromIndexId" ToCol="Id" />
		</Relation>
		<Relation Name="ToTable"
				RelationType="Lookup"
				DbName="reln_totbl"
				Label="To Table"
				Suffix="ToTable"
				FromIndex="RelationToTblIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				PopDepChain="FromTable.SchemaDef.Tables" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ToTableId" ToCol="Id" />
		</Relation>
		<Relation Name="ToIndex"
				RelationType="Lookup"
				DbName="reln_toidx"
				Label="To Index"
				Suffix="ToIndex"
				FromIndex="RelationToKeyIdx"
				ToIndex="Index.IndexIdIdx"
				IsRequired="true"
				PopDepChain="ToTable.TableIndex" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ToIndexId" ToCol="Id" />
		</Relation>
		<Relation Name="NarrowedRelation"
				RelationType="Lookup"
				DbName="reln_narreln"
				Label="Narrowed Relation"
				Suffix="Narrowed"
				FromIndex="RelationNarrowedIdx"
				ToIndex="Relation.RelationIdIdx"
				IsRequired="false"
				PopDepChain="FromTable.TableRelation" >
			<RelationCol Name="NarrowedTenantId" ToCol="TenantId" />
			<RelationCol Name="NarrowedId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="RelationCol">
		<Relation Name="LookupFromCol"
				RelationType="Lookup"
				DbName="relncol_fmcol"
				Label="From Column"
				Suffix="FromCol"
				FromIndex="RelationColFromColIdx"
				ToIndex="IndexCol.IndexColIdIdx"
				IsRequired="true"
				PopDepChain="Relation.FromIndex.Columns" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="FromColId" ToCol="Id" />
		</Relation>
		<Relation Name="LookupToCol"
				RelationType="Lookup"
				DbName="relncol_tocol"
				Label="To Column"
				Suffix="ToCol"
				FromIndex="RelationColToColIdx"
				ToIndex="IndexCol.IndexColIdIdx"
				IsRequired="true"
				PopDepChain="Relation.ToIndex.Columns" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ToColId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="SchemaDef">
		<Relation Name="CTenant"
				RelationType="Owner"
				DbName="schdef_ctenant"
				Label="Containing Tenant"
				Suffix="CTenant"
				FromIndex="SchemaDefCTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true"
				Narrowed="Scope.Tenant" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="StringCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="strcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="StringColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="StringType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="strtyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="StringTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TZDateCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="tzdtcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TZDateColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TZDateType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="tzdttyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TZDateTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TZTimeCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="tztmcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TZTimeColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TZTimeType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="tztmtyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TZTimeTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TZTimestampCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="tztscol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TZTimestampColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TZTimestampType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="tztstyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TZTimestampTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TableCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="tblcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TableColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
		<Relation Name="DataType"
				RelationType="Parent"
				DbName="tblcol_dttyp"
				Label="Column Data Type"
				Suffix="DataType"
				FromIndex="TableColDataIdx"
				ToIndex="Value.ValueIdIdx"
				IsRequired="true"
				PopDepChain="Table.SchemaDef.Types" >
			<RelationCol Name="DataTenantId" ToCol="TenantId" />
			<RelationCol Name="DataId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TextCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="txtcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TextColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TextType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="txttyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TextTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TimeCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="tmcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TimeColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TimeType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="tmtyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TimeTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TimestampCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="tscol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TimestampColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TimestampType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="tstyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TimestampTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TokenCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="tkcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="TokenColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="TokenType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="tktyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="TokenTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UInt16Col">
		<Relation Name="Table"
				RelationType="Container"
				DbName="ui16col_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="UInt16ColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UInt16Type">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="ui16typ_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="UInt16TypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UInt32Col">
		<Relation Name="Table"
				RelationType="Container"
				DbName="ui32col_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="UInt32ColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UInt32Type">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="ui32typ_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="UInt32TypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UInt64Col">
		<Relation Name="Table"
				RelationType="Container"
				DbName="ui64col_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="UInt64ColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UInt64Type">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="ui64typ_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="UInt64TypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UuidCol">
		<Relation Name="Table"
				RelationType="Container"
				DbName="uuidcol_tbl"
				Label="Containing Table"
				Suffix="Table"
				FromIndex="UuidColTableIdx"
				ToIndex="Table.TableIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="TableId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="UuidType">
		<Relation Name="SchemaDef"
				RelationType="Container"
				DbName="uuidtyp_sch"
				Label="Containing Schema Definition"
				Suffix="SchemaDef"
				FromIndex="UuidTypeSchemaDefIdx"
				ToIndex="SchemaDef.SchemaDefIdIdx"
				IsRequired="true"
				Narrowed="Value.Scope" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="SchemaDefId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ClearTopDep">
		<Chain Name="DepOrder"
				ShortName="DepOrd"
				Label="Dependency Order"
				Suffix="DepOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="DelTopDep">
		<Chain Name="DepOrder"
				ShortName="DepOrd"
				Label="Dependency Order"
				Suffix="DepOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="EnumTag">
		<Chain Name="TagOrder"
				ShortName="TagOrd"
				Label="Tag Order"
				Suffix="TagOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="IndexCol">
		<Chain Name="ColumnOrder"
				ShortName="ColOrd"
				Label="Column Order"
				Suffix="ColOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="Param">
		<Chain Name="ColumnOrder"
				ShortName="ColOrd"
				Label="Column Order"
				Suffix="ColOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="RelationCol">
		<Chain Name="ColumnOrder"
				ShortName="ColOrd"
				Label="Column Order"
				Suffix="ColOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="SchemaRef">
		<Chain Name="ColumnOrder"
				ShortName="ColOrd"
				Label="Column Order"
				Suffix="ColOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="Value">
		<Chain Name="ColumnOrder"
				ShortName="ColOrd"
				Label="Column Order"
				Suffix="ColOrd"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="SchemaDef">
		<ClearDep Name="ClearTableRelationNarrowed" ClearDepChain="Tables.TableRelation.NarrowedRelation" />
		<ClearDep Name="ClearTypeReferences" ClearDepChain="Types.ReferencingTableCols.DataType" />
	</TableAddendum>

	<TableAddendum FromTable="Tenant">
		<ClearDep Name="ClearTableRelationNarrowed" ClearDepChain="TenantSchema.Tables.TableRelation.NarrowedRelation" />
	</TableAddendum>

	<TableAddendum FromTable="Index">
		<DelDep Name="DelIndexCol" DelDepChain="Columns" />
		<DelDep Name="DelIndexRefRelToCols" DelDepChain="Columns.ReferencingRelToCols" />
		<DelDep Name="DelIndexRefRelFromCols" DelDepChain="Columns.ReferencingRelFromCols" />
	</TableAddendum>

	<TableAddendum FromTable="IndexCol">
		<DelDep Name="DelRefRelToCols" DelDepChain="ReferencingRelToCols" />
		<DelDep Name="DelRefRelFromCols" DelDepChain="ReferencingRelFromCols" />
	</TableAddendum>

	<TableAddendum FromTable="MinorVersion">
		<DelDep Name="DelMinVerSchemaDefs" DelDepChain="SchemaDef" />
	</TableAddendum>

	<TableAddendum FromTable="Relation">
		<DelDep Name="DelRelationCol" DelDepChain="Columns" />
		<DelDep Name="DelRelationPopDep" DelDepChain="PopDep" />
	</TableAddendum>

	<TableAddendum FromTable="SchemaDef">
		<DelDep Name="DelTypeDef" DelDepChain="Types" />
		<DelDep Name="DelTypeRefs" DelDepChain="Types.ReferencingTableCols" />
		<DelDep Name="DelTable" DelDepChain="Tables" />
		<DelDep Name="DelTableDispensedId16Gen" DelDepChain="Tables.DispensedId16Gen" />
		<DelDep Name="DelTableDispensedId32Gen" DelDepChain="Tables.DispensedId32Gen" />
		<DelDep Name="DelTableDispensedId64Gen" DelDepChain="Tables.DispensedId64Gen" />
		<DelDep Name="DelTableColumns" DelDepChain="Tables.Columns" />
		<DelDep Name="DelTableRefIndexColumns" DelDepChain="Tables.Columns.ReferencingIndexCols" />
		<DelDep Name="DelTableIndexes" DelDepChain="Tables.TableIndex" />
		<DelDep Name="DelTableIndexCols" DelDepChain="Tables.TableIndex.Columns" />
		<DelDep Name="DelTableIndexRefRelToCol" DelDepChain="Tables.TableIndex.Columns.ReferencingRelToCols" />
		<DelDep Name="DelTableIndexRefRelFmCol" DelDepChain="Tables.TableIndex.Columns.ReferencingRelFromCols" />
		<DelDep Name="DelTableRelation" DelDepChain="Tables.TableRelation" />
		<DelDep Name="DelTableRelationCol" DelDepChain="Tables.TableRelation.Columns" />
		<DelDep Name="DelTableRelationPopDep" DelDepChain="Tables.TableRelation.PopDep" />
		<DelDep Name="DelTableChain" DelDepChain="Tables.Chains" />
		<DelDep Name="DelTableClearDep" DelDepChain="Tables.ClearDep" />
		<DelDep Name="DelTableDelDep" DelDepChain="Tables.DelDep" />
		<DelDep Name="DelTableMethods" DelDepChain="Tables.ServerMethods" />
	</TableAddendum>

	<TableAddendum FromTable="ServerProc">
		<DelDep Name="DelParams" DelDepChain="Params" />
	</TableAddendum>

	<TableAddendum FromTable="Table">
		<DelDep Name="DelDispensedId16Gen" DelDepChain="DispensedId16Gen" />
		<DelDep Name="DelDispensedId32Gen" DelDepChain="DispensedId32Gen" />
		<DelDep Name="DelDispensedId64Gen" DelDepChain="DispensedId64Gen" />
		<DelDep Name="DelTableColumns" DelDepChain="Columns" />
		<DelDep Name="DelTableRefIndexColumns" DelDepChain="Columns.ReferencingIndexCols" />
		<DelDep Name="DelTableIndex" DelDepChain="TableIndex" />
		<DelDep Name="DelTableIndexCol" DelDepChain="TableIndex.Columns" />
		<DelDep Name="DelTableIndexRefRelToCol" DelDepChain="TableIndex.Columns.ReferencingRelToCols" />
		<DelDep Name="DelTableIndexRefRelFmCol" DelDepChain="TableIndex.Columns.ReferencingRelFromCols" />
		<DelDep Name="DelTableRelation" DelDepChain="TableRelation" />
		<DelDep Name="DelTableRelationCol" DelDepChain="TableRelation.Columns" />
		<DelDep Name="DelTableRelationPopDep" DelDepChain="TableRelation.PopDep" />
		<DelDep Name="DelTableChain" DelDepChain="Chains" />
		<DelDep Name="DelTableClearDep" DelDepChain="ClearDep" />
		<DelDep Name="DelTableDelDep" DelDepChain="DelDep" />
		<DelDep Name="DelTableMethods" DelDepChain="ServerMethods" />
	</TableAddendum>

	<TableAddendum FromTable="Tenant">
		<DelDep Name="DelSchemaDef" DelDepChain="TenantSchema" />
		<DelDep Name="DelTypeDef" DelDepChain="TenantSchema.Types" />
		<DelDep Name="DelTable" DelDepChain="TenantSchema.Tables" />
		<DelDep Name="DelTableRelation" DelDepChain="TenantSchema.Tables.TableRelation" />
		<DelDep Name="DelTableRelationCol" DelDepChain="TenantSchema.Tables.TableRelation.Columns" />
		<DelDep Name="DelTableChain" DelDepChain="TenantSchema.Tables.Chains" />
	</TableAddendum>
</SchemaDef>
						</MinorVersion>
					</MajorVersion>
				</SubProject>
			</TopProject>
		</TopDomain>
	</Tld>
</MSSBam>
