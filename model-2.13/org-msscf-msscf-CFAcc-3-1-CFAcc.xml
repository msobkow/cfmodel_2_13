<?xml version="1.0" encoding="utf-8"?>
<!--
 *	MSS Code Factory 3.1 CFAcc - Accounting
 *
 *	Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)
 *
 *	MSS Code Factory Accounting is distributed under Mark Stephen
 *	Sobkow's Proprietary Share License, Version 1.0.
 *
 *	MSS Code Factory Accounting is proprietary code and is
 *	only available for production and distribution builds and
 *	environments with a commercial license from Mark Stephen Sobkow.
 *
 *	MSS Code Factory Accounting is published so that you may study
 *	it for academic purposes or to perform security verification reviews,
 *	but you may not deploy the code on more than one server, nor for any
 *	purpose other than testing and evaluation to determine whether you
 *	wish to purchase a commercial license.  Registered .edu educational
 *	institutions are permitted to install, deploy, modify, and extend
 *	this code for research and educational purposes only, but must
 *	obtain normal commercial licenses for non-research or
 *	coursework use.
 *
 *	Any use of MSS Code Factory Accounting in a production environment
 *	without a commercial license from Mark Stephen Sobkow is strictly forbidden.
 *
 *	MSS Code Factory Accounting is distributed in the hope that it will be useful, but
 *	WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *	or FITNESS FOR A PARTICULAR PURPOSE.
 *
 *	Donations to support MSS Code Factory Accounting can be made at
 *	https://www.paypal.com/paypalme2/MarkSobkow
 *
 *	Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.
 *-->
<MSSBam
		xmlns="uri://org.msscf/msscf/2.0.13/mssbam"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:xs="http://www.w3.org/2001/XMLSchema"
		xsi:schemaLocation="uri://org.msscf/msscf/2.0.13/mssbam file:/opt/msscf/2.0.13/xsd/mssbam-2.13.xsd"
		Name="CFAcc"
		Revision="3.1"
		Description="MSS Code Factory CFAcc - Accounting"
		ProjectRoot="com.github.msobkow.CFAcc.3.1" >
	<Tld Name="com" >
		<TopDomain Name="github" >
			<TopProject Name="msobkow" >
				<SubProject Name="CFAcc" >
					<MajorVersion Name="3" >
						<MinorVersion Name="1" >
<SchemaDef Name="CFAcc"
		DbName="CFAcc31"
		Description="Code Factory Accounting"
		CopyrightHolder="Mark Stephen Sobkow"
		CopyrightPeriod="2020"
		AuthorEMail="mark.sobkow@gmail.com"
		ProjectURL="http://msobkow.github.com/"
		PublishURI="https://msscf.sourceforge.io/com-github-msobkow-CFAcc-3-1-CFAcc.xml"
		CommonLicenseName="Mark Stephen Sobkow's Proprietary Share License, Version 1.0" CommonLicenseCode="MSSProp10" >
			<CommonLicense>
MSS Code Factory 3.1 CFAcc - Accounting

Copyright (c) 2020 Mark Stephen Sobkow (mark.sobkow@gmail.com)

MSS Code Factory Accounting is distributed under Mark Stephen
Sobkow's Proprietary Share License, Version 1.0.

MSS Code Factory Accounting is proprietary code and is only available
for production and distribution builds and environments with a commercial
license from Mark Stephen Sobkow.

MSS Code Factory Accounting is published so that you may study
it for academic purposes or to perform security verification reviews,
but you may not deploy the code on more than one server, nor for any
purpose other than testing and evaluation to determine whether you
wish to purchase a commercial license.  Registered .edu educational
institutions are permitted to install, deploy, modify, and extend
this code for research and educational purposes only, but must
obtain normal commercial licenses for non-research or
coursework use.

Any use of MSS Code Factory Accounting in a production environment
without a commercial license from Mark Stephen Sobkow is strictly forbidden.

MSS Code Factory Accounting is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
or FITNESS FOR A PARTICULAR PURPOSE.

Donations to support MSS Code Factory Accounting can be made at
https://www.paypal.com/paypalme2/MarkSobkow

Please contact Mark Stephen Sobkow at mark.sobkow@gmail.com for commercial licensing.</CommonLicense>

	<SchemaRef Name="CFSec"
			RefModelName="com-github-msobkow-CFSec-3-1-CFSec"
			IncludeRoot="com.github.msobkow.CFSec.3.1.CFSec" />

	<SchemaRef Name="CFCrm"
			RefModelName="com-github-msobkow-CFCrm-3-1-CFCrm"
			IncludeRoot="com.github.msobkow.CFCrm.3.1.CFCrm" />

	<StringType Name="ACCode"
			IsNullable="false"
			MaxLen="64"
			InitValue="" />

	<StringType Name="ACDescription"
			IsNullable="false"
			MaxLen="128"
			InitValue="" />

	<StringType Name="ACIdCode"
			IsNullable="false"
			MaxLen="128"
			InitValue="" />

	<NumberType Name="ACInterest"
			IsNullable="false"
			Digits="8"
			Precis="5"
			InitValue="0" />

	<StringType Name="ACMeasure"
			IsNullable="false"
			MaxLen="20"
			InitValue="" />

	<NumberType Name="ACMoney"
			IsNullable="false"
			Digits="31"
			Precis="5"
			InitValue="0" />

	<NumberType Name="ACUnits"
			IsNullable="false"
			Digits="20"
			Precis="5"
			InitValue="0" />

	<Id64Gen Name="AccountContactIdGen"
			IsNullable="false"
			DbName="AcctContIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="801"
			BlockSize="1" />

	<Id64Gen Name="AccountIdGen"
			IsNullable="false"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="802"
			BlockSize="1" />

	<EnumType Name="AccountTypeEnum"
			IsNullable="false"
			MinValue="0"
			InitValue="0" >
		<EnumTag Name="General" />
		<EnumTag Name="Bank" />
		<EnumTag Name="Payable" />
		<EnumTag Name="Receivable" />
	</EnumType>

	<Id64Gen Name="BillIdGen"
			IsNullable="false"
			DbName="BillIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="803"
			BlockSize="1" />

	<Id64Gen Name="BillItemIdGen"
			IsNullable="false"
			DbName="BillItemIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="804"
			BlockSize="1" />

	<Id64Gen Name="ChequeDetailIdGen"
			IsNullable="false"
			DbName="ChequeDtlIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="805"
			BlockSize="1" />

	<Id64Gen Name="ChequeIdGen"
			IsNullable="false"
			DbName="ChequeIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="806"
			BlockSize="1" />

	<Id64Gen Name="DepositDetailIdGen"
			IsNullable="false"
			DbName="DepositDtlIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="807"
			BlockSize="1" />

	<Id64Gen Name="DepositIdGen"
			IsNullable="false"
			DbName="DepositIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="808"
			BlockSize="1" />

	<Id64Gen Name="FeeDetailIdGen"
			IsNullable="false"
			DbName="FeeDtlIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="809"
			BlockSize="1" />

	<Id64Gen Name="FeeIdGen"
			IsNullable="false"
			DbName="FeeIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="810"
			BlockSize="1" />

	<Id64Gen Name="InvoiceIdGen"
			IsNullable="false"
			DbName="InvoiceIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="811"
			BlockSize="1" />

	<Id64Gen Name="InvoiceItemIdGen"
			IsNullable="false"
			DbName="InvItemIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="812"
			BlockSize="1" />

	<Id64Gen Name="LedgerIdGen"
			IsNullable="false"
			DbName="LedgerIdGen"
			Dispenser="Tenant"
			Slice="813"
			BlockSize="1" />

	<Id64Gen Name="POItemIdGen"
			IsNullable="false"
			DbName="POItemIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="814"
			BlockSize="1" />

	<Id64Gen Name="PaymentDetailIdGen"
			IsNullable="false"
			DbName="PaymentDtlIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="815"
			BlockSize="1" />

	<Id64Gen Name="PaymentIdGen"
			IsNullable="false"
			DbName="PaymentIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="816"
			BlockSize="1" />

	<Id64Gen Name="PurchaseOrderIdGen"
			IsNullable="false"
			DbName="POIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="817"
			BlockSize="1" />

	<Id64Gen Name="TaxIdGen"
			IsNullable="false"
			DbName="TaxIdGen"
			MinValue="0"
			InitValue="0"
			Slice="818"
			BlockSize="1" />

	<Id64Gen Name="TransferIdGen"
			IsNullable="false"
			DbName="TransferIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="819"
			BlockSize="1" />

	<Id32Gen Name="VendorUnitIdGen"
			IsNullable="false"
			DbName="VendorUnitIdGen"
			MinValue="0"
			InitValue="0"
			Dispenser="Tenant"
			Slice="820"
			BlockSize="1" />

	<Table Name="Account"
			TableClassCode="a501"
			DbName="acct"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="AccountUCodeIdx"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				GenerateId="true"
				DataType="AccountIdGen" />
		<TableCol Name="AccountType"
				IsNullable="false"
				DbName="AccTyp"
				DataType="AccountTypeEnum" />
		<TableCol Name="AccountCode"
				IsNullable="false"
				DataType="ACCode" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="CcyId"
				IsNullable="false"
				DataType="ISOCcyIdGen" />
		<TableCol Name="Balance"
				IsNullable="false"
				DataType="ACMoney" />
		<BoolCol Name="IsRollupAccount"
				IsNullable="false"
				DbName="IsRollAcct"
				InitValue="false" />
		<TableCol Name="RollupTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="RollupAccountId"
				IsNullable="true"
				DataType="AccountIdGen" />
		<BoolCol Name="ChequeAlwaysEFT"
				IsNullable="false"
				DbName="ChqAllEFT"
				InitValue="false" />
		<Int32Col Name="NextChequeNum"
				Label="Next Cheque Number"
				IsNullable="false"
				DbName="nxt_chq_num"
				MinValue="0"
				MaxValue="999999999"
				InitValue="1" />
		<Int16Col Name="ChequeNumDigits"
				Label="Cheque Number Digits"
				IsNullable="false"
				DbName="chq_num_digits"
				MinValue="1"
				MaxValue="9"
				InitValue="4" />
		<Int32Col Name="NextTransferNum"
				Label="Next Transfer Number"
				IsNullable="false"
				DbName="nxt_xfer_num"
				MinValue="0"
				MaxValue="999999999"
				InitValue="1" />
		<Int16Col Name="TransferNumDigits"
				Label="Transfer Number Digits"
				IsNullable="false"
				DbName="xfer_num_digits"
				MinValue="1"
				MaxValue="9"
				InitValue="6" />
		<Int32Col Name="NextInvoiceNum"
				Label="Next Invoice Number"
				IsNullable="false"
				DbName="nxt_invc_num"
				MinValue="0"
				MaxValue="999999999"
				InitValue="1" />
		<Int16Col Name="InvoiceNumDigits"
				Label="Invoice Number Digits"
				IsNullable="false"
				DbName="invc_num_digits"
				MinValue="1"
				MaxValue="9"
				InitValue="6" />
		<Int32Col Name="NextPurchaseOrderNum"
				Label="Next Purchase Order Number"
				IsNullable="false"
				DbName="nxt_po_num"
				MinValue="0"
				MaxValue="999999999"
				InitValue="1" />
		<Int16Col Name="PurchaseOrderNumDigits"
				Label="Purchase Order Number Digits"
				IsNullable="false"
				DbName="po_num_digits"
				MinValue="1"
				MaxValue="9"
				InitValue="6" />
		<PrimaryIndex Name="AccountIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="acct_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="AccountUCodeIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="acct_xucode"
				ShortName="UCode"
				Suffix="UCodeIdx"
				Label="Unique Account Code Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountCode" IsAscending="true" />
		</Index>
		<Index Name="AccountTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acct_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="AccountTenantRollupIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acct_tenantrollidx"
				ShortName="TenantRoll"
				Suffix="TenantRollIdx"
				Label="Tenant Rollup Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="RollupAccountId" IsAscending="true" />
		</Index>
		<Index Name="AccountTenantTypeRollupIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acct_tenanttprollidx"
				ShortName="TenantTypeRoll"
				Suffix="TentTypRollIdx"
				Label="Tenant Type IsRollup Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountType" IsAscending="true" />
			<IndexCol Name="IsRollupAccount" IsAscending="true" />
		</Index>
		<Index Name="AccountRollupAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acct_rollupidx"
				ShortName="RollupIdx"
				Suffix="RollupAcctIdx"
				Label="Rollup account index" >
			<IndexCol Name="RollupTenantId" IsAscending="true" />
			<IndexCol Name="RollupAccountId" IsAscending="true" />
		</Index>
		<Index Name="AccountCcyIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acct_ccyidx"
				ShortName="CcyIdx"
				Suffix="CcyIdx"
				Label="Ccy Index" >
			<IndexCol Name="CcyId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="AccountConfig"
			TableClassCode="a502"
			DbName="acct_cfg"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="DefaultCcyId"
				IsNullable="false"
				DbName="DefCcyId"
				DataType="ISOCcyIdGen" />
		<TableCol Name="DefaultTZoneId"
				IsNullable="false"
				DbName="DefTzId"
				DataType="ISOTZoneIdGen" />
		<PrimaryIndex Name="AccountConfigIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="acctcfg_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="AccountConfigTenantIdx"
				IsDbMapped="false"
				IsUnique="false"
				DbName="acctcfg_xtent"
				ShortName="TenantIdx"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="AccountConfigDefaultCcyIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctcfg_xdefccy"
				ShortName="DefCcyIdx"
				Suffix="DefCcyIdx"
				Label="Default Ccy Index" >
			<IndexCol Name="DefaultCcyId" IsAscending="true" />
		</Index>
		<Index Name="AccountConfigDefaultTZoneIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctcfg_xdeftz"
				ShortName="DefTzIdx"
				Suffix="DefTzIdx"
				Label="Default Timezone Index" >
			<IndexCol Name="DefaultTZoneId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="AccountContact"
			TableClassCode="a503"
			DbName="ac_contact"
			IsInstantiable="true"
			HasHistory="false"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountContactId"
				IsNullable="false"
				GenerateId="true"
				DataType="AccountContactIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="ContactListId"
				IsNullable="false"
				DataType="ContactListIdGen" />
		<TableCol Name="ContactId"
				IsNullable="false"
				DataType="ContactIdGen" />
		<PrimaryIndex Name="AccountContactIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="acctct_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountContactId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="AccountContactAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctct_xacct"
				ShortName="AcctIdx"
				Suffix="AccountIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="AccountContactTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctct_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="AccountContactContactListIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctct_ctctlstidx"
				ShortName="ContactList"
				Suffix="CtctLstIdx"
				Label="Contact List Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ContactListId" IsAscending="true" />
		</Index>
		<Index Name="AccountContactContactIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctct_ctctidx"
				ShortName="Contact"
				Suffix="CtctIdx"
				Label="Contact Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ContactId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="AccountTaxId"
			TableClassCode="a504"
			DbName="acctaxid"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="TaxId"
				IsNullable="false"
				DataType="TaxIdGen" />
		<StringCol Name="TaxIdCode"
				IsNullable="false"
				MaxLen="64"
				InitValue="" />
		<PrimaryIndex Name="AccountTaxIdIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="acctaxid_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="TaxId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="AccountTaxIdTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctaxid_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="AccountTaxIdAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctaxid_acctidx"
				ShortName="Account"
				Suffix="InvAcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="AccountTaxIdTaxIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acctaxid_taxidx"
				ShortName="ACTaxIdx"
				Suffix="ACTaxIdx"
				Label="Tax Index" >
			<IndexCol Name="TaxId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Bill"
			TableClassCode="a506"
			DbName="bill"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="BillId"
				IsNullable="false"
				GenerateId="true"
				DataType="BillIdGen" />
		<DateCol Name="BillDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="BillingCode"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="Amount"
				IsNullable="true"
				DbName="amt"
				DataType="ACMoney" />
		<TableCol Name="LedgerTenantId"
				IsNullable="true"
				DbName="ledg_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="true"
				DbName="ledg_id"
				DataType="LedgerIdGen" />
		<PrimaryIndex Name="BillIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="bill_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="BillId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="BillDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="bill_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Bill Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="BillDate" IsAscending="true" />
		</Index>
		<Index Name="BillTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="bill_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="BillAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="bill_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="BillBillingCodeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="bill_billcdidx"
				ShortName="BillCodeIdx"
				Suffix="BillCdIdx"
				Label="Billing Code Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="BillingCode" IsAscending="true" />
		</Index>
		<Index Name="BillLedgerIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="bill_ledgidx"
				ShortName="LedgerIdx"
				Suffix="LedgerIdx"
				Label="Ledger Index" >
			<IndexCol Name="LedgerTenantId" IsAscending="true" />
			<IndexCol Name="LedgerId" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="BillItem"
			TableClassCode="a507"
			DbName="billitem"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="BillId"
				IsNullable="false"
				DataType="BillIdGen" />
		<TableCol Name="BillItemId"
				IsNullable="false"
				GenerateId="true"
				DataType="BillItemIdGen" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="NumOrdered"
				IsNullable="false"
				DataType="ACUnits" />
		<TableCol Name="VendorUnitTenantId"
				IsNullable="true"
				DbName="vendtentid"
				DataType="TenantIdGen" />
		<TableCol Name="VendorUnitAccountId"
				IsNullable="true"
				DbName="vendaccid"
				DataType="AccountIdGen" />
		<TableCol Name="VendorUnitId"
				IsNullable="true"
				DbName="vendunitid"
				DataType="VendorUnitIdGen" />
		<TableCol Name="UnitPrice"
				IsNullable="false"
				DbName="unit_price"
				DataType="ACMoney" />
		<TableCol Name="AmountBilled"
				IsNullable="false"
				DbName="amt_billed"
				DataType="ACMoney" />
		<TableCol Name="TaxId"
				IsNullable="true"
				DataType="TaxIdGen" />
		<TableCol Name="PurchaseOrderTenantId"
				IsNullable="true"
				DbName="purchordtentid"
				DataType="TenantIdGen" />
		<TableCol Name="PurchaseOrderId"
				IsNullable="true"
				DbName="purchordunitid"
				DataType="PurchaseOrderIdGen" />
		<TableCol Name="POItemTenantId"
				IsNullable="true"
				DbName="poitemtentid"
				DataType="TenantIdGen" />
		<TableCol Name="POItemId"
				IsNullable="true"
				DbName="poitemid"
				DataType="POItemIdGen" />
		<PrimaryIndex Name="BillItemIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="billitem_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="BillItemId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="BillItemTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billitem_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="BillItemBillIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billitem_billidx"
				ShortName="BillIdx"
				Suffix="BillIdx"
				Label="Bill Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="BillId" IsAscending="true" />
		</Index>
		<Index Name="BillItemVendorUnitIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billitem_xvunit"
				ShortName="VUnit"
				Suffix="VUnitIdx"
				Label="Vendor Unit Index" >
			<IndexCol Name="VendorUnitTenantId" IsAscending="true" />
			<IndexCol Name="VendorUnitAccountId" IsAscending="true" />
			<IndexCol Name="VendorUnitId" IsAscending="true" />
		</Index>
		<Index Name="BillItemTaxIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billitem_xtax"
				ShortName="Tax"
				Suffix="BITaxIdx"
				Label="Tax Index" >
			<IndexCol Name="TaxId" IsAscending="true" />
		</Index>
		<Index Name="BillItemPurchaseOrderIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billitem_xpurchord"
				ShortName="PurchOrd"
				Suffix="PurchOrdIdx"
				Label="Purchase Order Index" >
			<IndexCol Name="PurchaseOrderTenantId" IsAscending="true" />
			<IndexCol Name="PurchaseOrderId" IsAscending="true" />
		</Index>
		<Index Name="BillItemPOItemIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billitem_xpoitem"
				ShortName="POItem"
				Suffix="POItemIdx"
				Label="Purchase Order Item Index" >
			<IndexCol Name="POItemTenantId" IsAscending="true" />
			<IndexCol Name="POItemId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="BillTax"
			TableClassCode="a508"
			DbName="billtax"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="BillItemId"
				IsNullable="false"
				DataType="BillItemIdGen" />
		<TableCol Name="TaxId"
				IsNullable="false"
				DataType="TaxIdGen" />
		<PrimaryIndex Name="BillTaxIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="billtax_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="BillItemId" IsAscending="true" />
			<IndexCol Name="TaxId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="BillTaxTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billtax_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="BillTaxItemIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billtax_billitmidx"
				ShortName="InvItem"
				Suffix="InvItemIdx"
				Label="Bill Item Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="BillItemId" IsAscending="true" />
		</Index>
		<Index Name="BillTaxTaxIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="billtax_taxidx"
				ShortName="BITaxIdx"
				Suffix="BTTaxIdx"
				Label="Tax Index" >
			<IndexCol Name="TaxId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Cheque"
			TableClassCode="a509"
			DbName="cheque"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="ChequeId"
				IsNullable="false"
				GenerateId="true"
				DataType="ChequeIdGen" />
		<DateCol Name="ChequeDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<BoolCol Name="IsEFT"
				Label="EFT"
				IsNullable="false"
				InitValue="false" />
		<TableCol Name="ChequeNumber"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="Amount"
				IsNullable="true"
				DbName="amt"
				DataType="ACMoney" />
		<TableCol Name="LedgerTenantId"
				IsNullable="true"
				DbName="ledg_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="true"
				DbName="ledg_id"
				DataType="LedgerIdGen" />
		<PrimaryIndex Name="ChequeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="cheque_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="ChequeId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="ChequeDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="cheque_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Cheque Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="ChequeDate" IsAscending="true" />
		</Index>
		<Index Name="ChequeTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="cheque_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="ChequeAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="cheque_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="ChequeNumberIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="cheque_numberidx"
				ShortName="ChqNumIdx"
				Suffix="ChqNmIdx"
				Label="Cheque Number Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="ChequeNumber" IsAscending="true" />
		</Index>
		<Index Name="ChequeLedgerIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="cheque_ledgidx"
				ShortName="LedgerIdx"
				Suffix="LedgerIdx"
				Label="Ledger Index" >
			<IndexCol Name="LedgerTenantId" IsAscending="true" />
			<IndexCol Name="LedgerId" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="ChequeDetail"
			TableClassCode="a50a"
			DbName="chqdtl"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="ChequeId"
				IsNullable="false"
				DataType="ChequeIdGen" />
		<TableCol Name="ChequeDetailId"
				IsNullable="false"
				GenerateId="true"
				DataType="ChequeDetailIdGen" />
		<TableCol Name="BillTenantId"
				IsNullable="true"
				DbName="bill_tentid"
				DataType="TenantIdGen" />
		<TableCol Name="BillId"
				IsNullable="true"
				DbName="bill_id"
				DataType="BillIdGen" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="AmountPaid"
				IsNullable="false"
				DbName="amt_paid"
				DataType="ACMoney" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevChequeDetailId"
				IsNullable="true"
				DataType="ChequeDetailIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextChequeDetailId"
				IsNullable="true"
				DataType="ChequeDetailIdGen" />
		<PrimaryIndex Name="ChequeDetailIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="chqdtl_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ChequeDetailId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="ChequeDetailTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chqdtl_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="ChequeDetailChequeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chqdtl_chqidx"
				ShortName="ChequeIdx"
				Suffix="ChequeIdx"
				Label="Cheque Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="ChequeId" IsAscending="true" />
		</Index>
		<Index Name="ChequeDetailBillIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chqdtl_billidx"
				ShortName="BillIdx"
				Suffix="BillIdx"
				Label="Bill Index" >
			<IndexCol Name="BillTenantId" IsAscending="true" />
			<IndexCol Name="BillId" IsAscending="true" />
		</Index>
		<Index Name="PrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chqdtl_prvidx"
				Suffix="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevChequeDetailId" IsAscending="true" />
		</Index>
		<Index Name="NextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="chqdtl_nxtidx"
				Suffix="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextChequeDetailId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Deposit"
			TableClassCode="a50b"
			DbName="deposit"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="DepositId"
				IsNullable="false"
				GenerateId="true"
				DataType="DepositIdGen" />
		<DateCol Name="DepositDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<BoolCol Name="IsEFT"
				Label="EFT"
				IsNullable="false"
				InitValue="false" />
		<TableCol Name="DepositCode"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="Amount"
				IsNullable="true"
				DbName="amt"
				DataType="ACMoney" />
		<TableCol Name="LedgerTenantId"
				IsNullable="true"
				DbName="ledg_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="true"
				DbName="ledg_id"
				DataType="LedgerIdGen" />
		<PrimaryIndex Name="DepositIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="deposit_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="DepositId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="DepositDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deposit_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Deposit Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="DepositDate" IsAscending="true" />
		</Index>
		<Index Name="DepositTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deposit_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="DepositAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deposit_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="DepositCodeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deposit_codeidx"
				ShortName="DepCodeIdx"
				Suffix="DepCodeIdx"
				Label="Deposit Code Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="DepositCode" IsAscending="true" />
		</Index>
		<Index Name="DepositLedgerIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="deposit_ledgidx"
				ShortName="LedgerIdx"
				Suffix="LedgerIdx"
				Label="Ledger Index" >
			<IndexCol Name="LedgerTenantId" IsAscending="true" />
			<IndexCol Name="LedgerId" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="DepositDetail"
			TableClassCode="a50c"
			DbName="depdtl"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="DepositId"
				IsNullable="false"
				DataType="DepositIdGen" />
		<TableCol Name="DepositDetailId"
				IsNullable="false"
				GenerateId="true"
				DataType="DepositDetailIdGen" />
		<TableCol Name="PaymentTenantId"
				IsNullable="true"
				DbName="pymt_tentid"
				DataType="TenantIdGen" />
		<TableCol Name="PaymentId"
				IsNullable="true"
				DbName="pymt_id"
				DataType="PaymentIdGen" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="AmountPaid"
				IsNullable="false"
				DbName="amt_paid"
				DataType="ACMoney" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextDepositDetailId"
				IsNullable="true"
				DataType="DepositDetailIdGen" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevDepositDetailId"
				IsNullable="true"
				DataType="DepositDetailIdGen" />
		<PrimaryIndex Name="DepositDetailIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="depdtl_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="DepositDetailId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="DepositDetailTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="depdtl_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="DepositDetailDepositIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="depdtl_depidx"
				ShortName="DepositIdx"
				Suffix="DepositIdx"
				Label="Deposit Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="DepositId" IsAscending="true" />
		</Index>
		<Index Name="DepositDetailPaymentIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="depdtl_pymtidx"
				ShortName="PaymentIdx"
				Suffix="PaymentIdx"
				Label="Payment Index" >
			<IndexCol Name="PaymentTenantId" IsAscending="true" />
			<IndexCol Name="PaymentId" IsAscending="true" />
		</Index>
		<Index Name="DepositDetailPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="depdtl_prvidx"
				Suffix="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevDepositDetailId" IsAscending="true" />
		</Index>
		<Index Name="DepositDetailNextidx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="depdtl_nextidx"
				Suffix="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextDepositDetailId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Fee"
			TableClassCode="a50e"
			DbName="fee"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="FeeId"
				IsNullable="false"
				GenerateId="true"
				DataType="FeeIdGen" />
		<DateCol Name="FeeDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="Amount"
				IsNullable="true"
				DbName="amt"
				DataType="ACMoney" />
		<TableCol Name="LedgerTenantId"
				IsNullable="true"
				DbName="ledg_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="true"
				DbName="ledg_id"
				DataType="LedgerIdGen" />
		<PrimaryIndex Name="FeeIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="fee_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="FeeId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="FeeDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="fee_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Fee Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="FeeDate" IsAscending="true" />
		</Index>
		<Index Name="FeeTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="fee_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="FeeAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="fee_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="FeeLedgerIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="fee_ledgidx"
				ShortName="LedgerIdx"
				Suffix="LedgerIdx"
				Label="Ledger Index" >
			<IndexCol Name="LedgerTenantId" IsAscending="true" />
			<IndexCol Name="LedgerId" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="FeeDetail"
			TableClassCode="a50f"
			DbName="feedtl"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="FeeId"
				IsNullable="false"
				DataType="FeeIdGen" />
		<TableCol Name="FeeDetailId"
				IsNullable="false"
				GenerateId="true"
				DataType="FeeDetailIdGen" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="AmountCharged"
				IsNullable="false"
				DbName="amt_chg"
				DataType="ACMoney" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevFeeDetailId"
				IsNullable="true"
				DataType="FeeDetailIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextFeeDetailId"
				IsNullable="true"
				DataType="FeeDetailIdGen" />
		<PrimaryIndex Name="FeeDetailIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="feedtl_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="FeeDetailId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="FeeDetailTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="feedtl_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="FeeDetailFeeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="feedtl_depidx"
				ShortName="FeeIdx"
				Suffix="FeeIdx"
				Label="Fee Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="FeeId" IsAscending="true" />
		</Index>
		<Index Name="FeeDetailPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="feedtl_previdx"
				Suffix="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevFeeDetailId" IsAscending="true" />
		</Index>
		<Index Name="FeeDetailNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="feedtl_nextidx"
				Suffix="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextFeeDetailId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Invoice"
			TableClassCode="a510"
			DbName="invoice"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="InvoiceId"
				IsNullable="false"
				GenerateId="true"
				DataType="InvoiceIdGen" />
		<DateCol Name="InvoiceDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="IdCode"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="Amount"
				IsNullable="true"
				DbName="amt"
				DataType="ACMoney" />
		<TableCol Name="LedgerTenantId"
				IsNullable="true"
				DbName="ledg_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="true"
				DbName="ledg_id"
				DataType="LedgerIdGen" />
		<PrimaryIndex Name="InvoiceIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="invoice_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="InvoiceId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="InvoiceDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invoice_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Invoice Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="InvoiceDate" IsAscending="true" />
		</Index>
		<Index Name="InvoiceTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invoice_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invoice_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceIdCodeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invoice_idcdidx"
				ShortName="InvIdCodeIdx"
				Suffix="InvIdCdIdx"
				Label="Invoice ID Code Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="IdCode" IsAscending="true" />
		</Index>
		<Index Name="InvoiceLedgerIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invoice_ledgidx"
				ShortName="LedgerIdx"
				Suffix="LedgerIdx"
				Label="Ledger Index" >
			<IndexCol Name="LedgerTenantId" IsAscending="true" />
			<IndexCol Name="LedgerId" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="InvoiceItem"
			TableClassCode="a511"
			DbName="invitem"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="InvoiceId"
				IsNullable="false"
				DataType="InvoiceIdGen" />
		<TableCol Name="InvoiceItemId"
				IsNullable="false"
				GenerateId="true"
				DataType="InvoiceItemIdGen" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="NumCharged"
				IsNullable="false"
				DataType="ACUnits" />
		<TableCol Name="VendorUnitTenantId"
				IsNullable="true"
				DbName="vendtentid"
				DataType="TenantIdGen" />
		<TableCol Name="VendorUnitAccountId"
				IsNullable="true"
				DbName="vendaccid"
				DataType="AccountIdGen" />
		<TableCol Name="VendorUnitId"
				IsNullable="true"
				DbName="vendunitid"
				DataType="VendorUnitIdGen" />
		<TableCol Name="UnitPrice"
				IsNullable="false"
				DbName="unit_price"
				DataType="ACMoney" />
		<TableCol Name="AmountInvoiced"
				IsNullable="false"
				DbName="amt_invoiced"
				DataType="ACMoney" />
		<TableCol Name="TaxId"
				IsNullable="true"
				DataType="TaxIdGen" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevInvoiceItemId"
				IsNullable="true"
				DataType="InvoiceItemIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextInvoiceItemId"
				IsNullable="true"
				DataType="InvoiceItemIdGen" />
		<PrimaryIndex Name="InvoiceItemIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="invitem_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="InvoiceItemId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="InvoiceItemTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invitem_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceItemInvoiceIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invitem_invidx"
				ShortName="Invoice"
				Suffix="InvIdx"
				Label="Invoice Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="InvoiceId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceItemVendorUnitIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invitem_xvunit"
				ShortName="VUnit"
				Suffix="VUnitIdx"
				Label="Vendor Unit Index" >
			<IndexCol Name="VendorUnitTenantId" IsAscending="true" />
			<IndexCol Name="VendorUnitAccountId" IsAscending="true" />
			<IndexCol Name="VendorUnitId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceItemTaxIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invitem_xtax"
				ShortName="IITax"
				Suffix="IITaxIdx"
				Label="Tax Index" >
			<IndexCol Name="TaxId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceItemPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invitm_previdx"
				Suffix="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevInvoiceItemId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceItemNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invitem_nextidx"
				Suffix="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextInvoiceItemId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="InvoiceTax"
			TableClassCode="a512"
			DbName="invtax"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="InvoiceItemId"
				IsNullable="false"
				DataType="InvoiceItemIdGen" />
		<TableCol Name="TaxId"
				IsNullable="false"
				DataType="TaxIdGen" />
		<PrimaryIndex Name="InvoiceTaxIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="invtax_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="InvoiceItemId" IsAscending="true" />
			<IndexCol Name="TaxId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="InvoiceTaxTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invtax_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceTaxItemIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invtax_invitmidx"
				ShortName="InvItem"
				Suffix="InvItemIdx"
				Label="Invoice Item Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="InvoiceItemId" IsAscending="true" />
		</Index>
		<Index Name="InvoiceTaxTaxIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="invtax_taxidx"
				ShortName="ITTaxIdx"
				Suffix="ITTaxIdx"
				Label="Tax Index" >
			<IndexCol Name="TaxId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Ledger"
			TableClassCode="a513"
			DbName="ledger"
			IsInstantiable="true"
			HasHistory="false"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="false"
				GenerateId="true"
				DataType="LedgerIdGen" />
		<TimestampCol Name="EntryStamp"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="IdCode"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="TransferTenantId"
				IsNullable="true"
				DbName="XfrTentId"
				DataType="TenantIdGen" />
		<TableCol Name="TransferAccountId"
				IsNullable="true"
				DbName="XfrAcctId"
				DataType="AccountIdGen" />
		<TableCol Name="Debit"
				IsNullable="true"
				DataType="ACMoney" />
		<TableCol Name="Credit"
				IsNullable="true"
				DataType="ACMoney" />
		<TableCol Name="ConvertedAmount"
				IsNullable="true"
				DbName="cvsn_amt"
				DataType="ACMoney" />
		<TableCol Name="ConversionCcy"
				IsNullable="true"
				DbName="cvsn_ccy"
				DataType="ISOCcyIdGen" />
		<TableCol Name="Balance"
				IsNullable="false"
				DataType="ACMoney" />
		<PrimaryIndex Name="LedgerIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="ledger_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="LedgerId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="LedgerAccountTStampIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="ledger_accstmp"
				ShortName="AccTsIdx"
				Suffix="AccTsIdx"
				Label="Account Timestamp Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="EntryStamp" IsAscending="true" />
		</Index>
		<Index Name="LedgerEStampIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="ledger_estamp"
				ShortName="EStampIdx"
				Suffix="EStampIdx"
				Label="Account Entry Stamp Index" >
			<IndexCol Name="EntryStamp" IsAscending="true" />
		</Index>
		<Index Name="LedgerTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="ledger_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="LedgerAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="ledger_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="LedgerIdCodeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="ledger_acctidcdidx"
				ShortName="AccountIdCode"
				Suffix="AcctIdCdIdx"
				Label="Account ID Code Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="IdCode" IsAscending="true" />
		</Index>
		<Index Name="LedgerTransferAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="ledger_xfracctidx"
				ShortName="XfrAccount"
				Suffix="XfrAcctIdx"
				Label="Transfer Account Index" >
			<IndexCol Name="TransferTenantId" IsAscending="true" />
			<IndexCol Name="TransferAccountId" IsAscending="true" />
		</Index>
		<Index Name="LedgerConversionCcyIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="ledger_cvsnccyidx"
				ShortName="CvtCcy"
				Suffix="CvtCcyIdx"
				Label="Transfer Account Index" >
			<IndexCol Name="ConversionCcy" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="POItem"
			TableClassCode="a514"
			DbName="poitem"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="PurchaseOrderId"
				IsNullable="false"
				DataType="PurchaseOrderIdGen" />
		<TableCol Name="POItemId"
				IsNullable="false"
				GenerateId="true"
				DataType="POItemIdGen" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="NumOrdered"
				IsNullable="false"
				DataType="ACUnits" />
		<TableCol Name="VendorUnitTenantId"
				IsNullable="true"
				DbName="vendtentid"
				DataType="TenantIdGen" />
		<TableCol Name="VendorUnitAccountId"
				IsNullable="true"
				DbName="vendaccid"
				DataType="AccountIdGen" />
		<TableCol Name="VendorUnitId"
				IsNullable="true"
				DbName="vendunitid"
				DataType="VendorUnitIdGen" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevPOItemId"
				IsNullable="true"
				DataType="POItemIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextPOItemId"
				IsNullable="true"
				DataType="POItemIdGen" />
		<PrimaryIndex Name="POItemIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="poitem_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="POItemId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="POItemTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="poitem_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="POItemPurchaseOrderIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="poitem_poidx"
				ShortName="POrder"
				Suffix="POIdx"
				Label="Purchase Order Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="PurchaseOrderId" IsAscending="true" />
		</Index>
		<Index Name="POItemVendorUnitIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="poitem_xvunit"
				ShortName="VUnit"
				Suffix="VUnitIdx"
				Label="Vendor Unit Index" >
			<IndexCol Name="VendorUnitTenantId" IsAscending="true" />
			<IndexCol Name="VendorUnitAccountId" IsAscending="true" />
			<IndexCol Name="VendorUnitId" IsAscending="true" />
		</Index>
		<Index Name="POItemPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="poitem_previdx"
				Suffix="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevPOItemId" IsAscending="true" />
		</Index>
		<Index Name="POItemNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="poitem_nextidx"
				Suffix="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextPOItemId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Payment"
			TableClassCode="a515"
			DbName="pymt"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="PaymentId"
				IsNullable="false"
				GenerateId="true"
				DataType="PaymentIdGen" />
		<DateCol Name="PaymentDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="IdCode"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="Amount"
				IsNullable="true"
				DbName="amt"
				DataType="ACMoney" />
		<TableCol Name="LedgerTenantId"
				IsNullable="true"
				DbName="ledg_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="true"
				DbName="ledg_id"
				DataType="LedgerIdGen" />
		<PrimaryIndex Name="PaymentIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="pymt_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="PaymentId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="PaymentDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymt_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Payment Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="PaymentDate" IsAscending="true" />
		</Index>
		<Index Name="PaymentTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymt_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="PaymentAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymt_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="PaymentIdCodeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymt_idcdidx"
				ShortName="PymtIdCodeIdx"
				Suffix="PymtIdCdIdx"
				Label="Payment ID Code Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="IdCode" IsAscending="true" />
		</Index>
		<Index Name="PaymentLedgerIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymt_ledgidx"
				ShortName="LedgerIdx"
				Suffix="LedgerIdx"
				Label="Ledger Index" >
			<IndexCol Name="LedgerTenantId" IsAscending="true" />
			<IndexCol Name="LedgerId" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="PaymentDetail"
			TableClassCode="a516"
			DbName="pymtdtl"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="PaymentId"
				IsNullable="false"
				DataType="PaymentIdGen" />
		<TableCol Name="PaymentDetailId"
				IsNullable="false"
				GenerateId="true"
				DataType="PaymentDetailIdGen" />
		<TableCol Name="InvoiceTenantId"
				IsNullable="true"
				DbName="inv_tentid"
				DataType="TenantIdGen" />
		<TableCol Name="InvoiceId"
				IsNullable="true"
				DbName="inv_id"
				DataType="InvoiceIdGen" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="AmountApplied"
				IsNullable="false"
				DbName="amt_applied"
				DataType="ACMoney" />
		<TableCol Name="PrevTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="PrevPaymentDetailId"
				IsNullable="true"
				DataType="PaymentDetailIdGen" />
		<TableCol Name="NextTenantId"
				IsNullable="true"
				DataType="TenantIdGen" />
		<TableCol Name="NextPaymentDetailId"
				IsNullable="true"
				DataType="PaymentDetailIdGen" />
		<PrimaryIndex Name="PaymentDetailIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="pymtdtl_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="PaymentDetailId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="PaymentDetailTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymtdtl_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="PaymentDetailPaymentIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymtdtl_pymtidx"
				ShortName="PaymentIdx"
				Suffix="PaymentIdx"
				Label="Payment Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="PaymentId" IsAscending="true" />
		</Index>
		<Index Name="PaymentDetailInvoiceIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymtdtl_invidx"
				ShortName="InvoiceIdx"
				Suffix="InvoiceIdx"
				Label="Invoice Index" >
			<IndexCol Name="InvoiceTenantId" IsAscending="true" />
			<IndexCol Name="InvoiceId" IsAscending="true" />
		</Index>
		<Index Name="PaymentDetailPrevIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymtdtl_previdx"
				Suffix="PrevIdx" >
			<IndexCol Name="PrevTenantId" IsAscending="true" />
			<IndexCol Name="PrevPaymentDetailId" IsAscending="true" />
		</Index>
		<Index Name="PaymentDetailNextIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="pymtdtl_nextidx"
				Suffix="NextIdx" >
			<IndexCol Name="NextTenantId" IsAscending="true" />
			<IndexCol Name="NextPaymentDetailId" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="PurchaseOrder"
			TableClassCode="a517"
			DbName="purchord"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="PurchaseOrderId"
				IsNullable="false"
				GenerateId="true"
				DataType="PurchaseOrderIdGen" />
		<DateCol Name="OrderDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="IdCode"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="ApprovedAmount"
				IsNullable="true"
				DbName="amt_approved"
				DataType="ACMoney" />
		<TimestampCol Name="OrderPlaced"
				IsNullable="true"
				DbName="OrderPlaced" />
		<PrimaryIndex Name="PurchaseOrderIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="purchord_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="PurchaseOrderId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="PurchaseOrderDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="purchord_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Purchase Order Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="OrderDate" IsAscending="true" />
		</Index>
		<Index Name="PurchaseOrderTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="purchord_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="PurchaseOrderAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="purchord_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="PurchaseOrderIdCodeIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="purchord_idcdidx"
				ShortName="POIdCode"
				Suffix="POIdCdIdx"
				Label="Purchase Order ID Code Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="IdCode" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="Tax"
			TableClassCode="a518"
			DbName="tax"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			LookupIndex="TaxUNameIdx"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="TaxId"
				IsNullable="false"
				GenerateId="true"
				DataType="TaxIdGen" />
		<StringCol Name="Name"
				IsNullable="false"
				DbName="safe_name"
				MaxLen="32"
				InitValue="" />
		<TableCol Name="Fee"
				Label="Fee (In default currency)"
				IsNullable="false"
				DbName="fee"
				DataType="ACMoney" />
		<TableCol Name="Percent"
				Label="Percentage"
				IsNullable="false"
				DbName="pct"
				DataType="ACInterest" />
		<PrimaryIndex Name="TaxIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tax_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TaxId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="TaxTenantIdx"
				IsDbMapped="false"
				IsUnique="false"
				DbName="tax_xtent"
				ShortName="TenantIdx"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="TaxUNameIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="tax_xuname"
				ShortName="UNameIdx"
				Suffix="UNameIdx"
				Label="Unique Name Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="Name" IsAscending="true" />
		</Index>
	</Table>

	<Table Name="Transfer"
			TableClassCode="a519"
			DbName="transfer"
			IsInstantiable="true"
			HasHistory="true"
			HasAuditColumns="true"
			PageData="true"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="TransferId"
				IsNullable="false"
				GenerateId="true"
				DataType="TransferIdGen" />
		<DateCol Name="TransferDate"
				IsNullable="false" />
		<TableCol Name="Description"
				IsNullable="false"
				DataType="ACDescription" />
		<TableCol Name="TransferNumber"
				IsNullable="false"
				DataType="ACIdCode" />
		<TableCol Name="Amount"
				IsNullable="true"
				DbName="amt"
				DataType="ACMoney" />
		<TableCol Name="ToAccountTenantId"
				IsNullable="true"
				DbName="toacct_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="ToAccountId"
				IsNullable="true"
				DbName="toacct_id"
				DataType="AccountIdGen" />
		<TableCol Name="LedgerTenantId"
				IsNullable="true"
				DbName="ledg_tent_id"
				DataType="TenantIdGen" />
		<TableCol Name="LedgerId"
				IsNullable="true"
				DbName="ledg_id"
				DataType="LedgerIdGen" />
		<PrimaryIndex Name="TransferIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="transfer_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="false" />
			<IndexCol Name="TransferId" IsAscending="false" />
		</PrimaryIndex>
		<Index Name="TransferDateIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="transfer_date"
				ShortName="DateIdx"
				Suffix="DateIdx"
				Label="Transfer Date Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="TransferDate" IsAscending="true" />
		</Index>
		<Index Name="TransferTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="transfer_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
		<Index Name="TransferAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="transfer_acctidx"
				ShortName="Account"
				Suffix="AcctIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="TransferNumberIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="transfer_numberidx"
				ShortName="ChqNumIdx"
				Suffix="ChqNmIdx"
				Label="Transfer Number Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="TransferNumber" IsAscending="true" />
		</Index>
		<Index Name="TransferLedgerIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="transfer_ledgidx"
				ShortName="LedgerIdx"
				Suffix="LedgerIdx"
				Label="Ledger Index" >
			<IndexCol Name="LedgerTenantId" IsAscending="true" />
			<IndexCol Name="LedgerId" IsAscending="true" />
		</Index>
		<Index Name="TransferToAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="transfer_toacctidx"
				ShortName="ToAccount"
				Suffix="ToAcctIdx"
				Label="To Account Index" >
			<IndexCol Name="ToAccountTenantId" IsAscending="true" />
			<IndexCol Name="ToAccountId" IsAscending="true" />
		</Index>

		<CPlusDb2LUWTableInclude>
</CPlusDb2LUWTableInclude>

		<CPlusMySqlTableInclude>
</CPlusMySqlTableInclude>

		<CPlusOracleTableInclude>
</CPlusOracleTableInclude>

		<CPlusPgSqlTableInclude>
</CPlusPgSqlTableInclude>

		<CPlusRamTableInclude>
</CPlusRamTableInclude>

		<CSharpDb2LUWTableUsing>
</CSharpDb2LUWTableUsing>

		<CSharpMySqlTableUsing>
</CSharpMySqlTableUsing>

		<CSharpOracleTableUsing>
</CSharpOracleTableUsing>

		<CSharpPgSqlTableUsing>
</CSharpPgSqlTableUsing>

		<CSharpRamTableUsing>
</CSharpRamTableUsing>
	</Table>

	<Table Name="VendorUnit"
			TableClassCode="a51a"
			DbName="ac_vunit"
			IsInstantiable="true"
			HasHistory="false"
			HasAuditColumns="true"
			PageData="true"
			LookupIndex="VendorUnitMeasurementIdx"
			LoaderBehaviour="Insert"
			SecScope="Tenant" >
		<TableCol Name="TenantId"
				IsNullable="false"
				DataType="TenantIdGen" />
		<TableCol Name="AccountId"
				IsNullable="false"
				DataType="AccountIdGen" />
		<TableCol Name="VendorUnitId"
				IsNullable="false"
				GenerateId="true"
				DataType="VendorUnitIdGen" />
		<TableCol Name="Measurement"
				IsNullable="false"
				DbName="meas"
				DataType="ACMeasure" />
		<Int32Col Name="UnitDigits"
				IsNullable="false"
				MinValue="0"
				MaxValue="5"
				InitValue="0" />
		<PrimaryIndex Name="VendorUnitIdIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="acvunit_pk"
				ShortName="PIdx"
				Suffix="IdIdx"
				Label="Id Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="VendorUnitId" IsAscending="true" />
		</PrimaryIndex>
		<Index Name="VendorUnitMeasurementIdx"
				IsDbMapped="true"
				IsUnique="true"
				DbName="acvunit_xumeas"
				ShortName="MeasureIdx"
				Suffix="MeasureIdx"
				Label="Measurement Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
			<IndexCol Name="Measurement" IsAscending="true" />
		</Index>
		<Index Name="VendorUnitAccountIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acvunit_xacct"
				ShortName="AcctIdx"
				Suffix="AccountIdx"
				Label="Account Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
			<IndexCol Name="AccountId" IsAscending="true" />
		</Index>
		<Index Name="VendorUnitTenantIdx"
				IsDbMapped="true"
				IsUnique="false"
				DbName="acvunit_tenantidx"
				ShortName="Tenant"
				Suffix="TenantIdx"
				Label="Tenant Index" >
			<IndexCol Name="TenantId" IsAscending="true" />
		</Index>
	</Table>

	<TableAddendum FromTable="Account">
		<Relation Name="Tenant"
				RelationType="Container"
				DbName="acct_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="AccountTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="SubAccounts"
				RelationType="Children"
				DbName="acct_subacct"
				Label="Sub Accounts"
				Suffix="SubAccts"
				FromIndex="AccountIdIdx"
				ToIndex="Account.AccountRollupAccountIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="RollupTenantId" />
			<RelationCol Name="AccountId" ToCol="RollupAccountId" />
		</Relation>
		<Relation Name="Ccy"
				RelationType="Lookup"
				DbName="acct_ccy"
				Label="Ccy"
				Suffix="Ccy"
				FromIndex="AccountCcyIdx"
				ToIndex="ISOCcy.ISOCcyIdIdx"
				IsRequired="false" >
			<RelationCol Name="CcyId" ToCol="ISOCcyId" />
		</Relation>
		<Relation Name="AccountContact"
				RelationType="Components"
				DbName="acct_contact"
				Label="Account Contact"
				Suffix="AccCont"
				FromIndex="AccountIdIdx"
				ToIndex="AccountContact.AccountContactAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Entry"
				RelationType="Components"
				DbName="acct_entry"
				Label="Account Entry"
				Suffix="Entry"
				FromIndex="AccountIdIdx"
				ToIndex="Ledger.LedgerAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="PurchaseOrder"
				RelationType="Components"
				DbName="acct_po"
				Label="Purchase Order"
				Suffix="POrder"
				FromIndex="AccountIdIdx"
				ToIndex="PurchaseOrder.PurchaseOrderAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Invoice"
				RelationType="Components"
				DbName="acct_invc"
				Label="Invoice"
				Suffix="Invoice"
				FromIndex="AccountIdIdx"
				ToIndex="Invoice.InvoiceAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Payment"
				RelationType="Components"
				DbName="acct_pymt"
				Label="Payment"
				Suffix="Payment"
				FromIndex="AccountIdIdx"
				ToIndex="Payment.PaymentAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Bill"
				RelationType="Components"
				DbName="acct_bill"
				Label="Bill"
				Suffix="Bill"
				FromIndex="AccountIdIdx"
				ToIndex="Bill.BillAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Cheque"
				RelationType="Components"
				DbName="acct_chq"
				Label="Cheque"
				Suffix="Cheque"
				FromIndex="AccountIdIdx"
				ToIndex="Cheque.ChequeAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Deposit"
				RelationType="Components"
				DbName="acct_dep"
				Label="Deposit"
				Suffix="Deposit"
				FromIndex="AccountIdIdx"
				ToIndex="Deposit.DepositAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Fee"
				RelationType="Components"
				DbName="acct_fee"
				Label="Fee"
				Suffix="Fee"
				FromIndex="AccountIdIdx"
				ToIndex="Fee.FeeAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="VendorUnit"
				RelationType="Components"
				DbName="acct_vendunit"
				Label="Vendor Unit Measurement"
				Suffix="VendorUnit"
				FromIndex="AccountIdIdx"
				ToIndex="VendorUnit.VendorUnitAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="TaxId"
				RelationType="Components"
				DbName="acct_taxid"
				Label="Tax Id"
				Suffix="TaxId"
				FromIndex="AccountIdIdx"
				ToIndex="AccountTaxId.AccountTaxIdAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Transfer"
				RelationType="Components"
				DbName="acct_xfer"
				Label="Transfer"
				Suffix="Transfer"
				FromIndex="AccountIdIdx"
				ToIndex="Transfer.TransferAccountIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="AccountConfig">
		<Relation Name="Tenant"
				RelationType="Container"
				DbName="acctconf_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="AccountConfigIdIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="DefaultCcy"
				RelationType="Lookup"
				DbName="acctconf_defccy"
				Label="Default Ccy"
				Suffix="DefCcy"
				FromIndex="AccountConfigDefaultCcyIdx"
				ToIndex="ISOCcy.ISOCcyIdIdx"
				IsRequired="true" >
			<RelationCol Name="DefaultCcyId" ToCol="ISOCcyId" />
		</Relation>
		<Relation Name="DefaultTimezone"
				RelationType="Lookup"
				DbName="acctconf_deftz"
				Label="Default Timezone"
				Suffix="DefTz"
				FromIndex="AccountConfigDefaultTZoneIdx"
				ToIndex="ISOTZone.ISOTZoneIdIdx"
				IsRequired="true" >
			<RelationCol Name="DefaultTZoneId" ToCol="ISOTZoneId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="AccountContact">
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="acctcont_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="AccountContactTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Account"
				RelationType="Container"
				DbName="acctcont_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="AccountContactAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="ContactList"
				RelationType="Parent"
				DbName="acctcont_contlist"
				Label="Contact List"
				Suffix="ContList"
				FromIndex="AccountContactContactListIdx"
				ToIndex="ContactList.ContactListIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ContactListId" ToCol="ContactListId" />
		</Relation>
		<Relation Name="Contact"
				RelationType="Parent"
				DbName="acctcont_cont"
				Label="Contact"
				Suffix="Contact"
				FromIndex="AccountContactContactIdx"
				ToIndex="Contact.ContactIdIdx"
				IsRequired="true"
				PopDepChain="ContactList.ContactListContact" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ContactId" ToCol="ContactId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="AccountTaxId">
		<Relation Name="Account"
				RelationType="Container"
				DbName="accttax_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="AccountTaxIdAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="accttax_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="AccountTaxIdTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Bill">
		<Relation Name="Account"
				RelationType="Container"
				DbName="bill_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="BillAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="bill_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="BillTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Ledger"
				RelationType="Lookup"
				DbName="bill_ledger"
				Label="Bill Ledger Entry"
				Suffix="Ledger"
				FromIndex="BillLedgerIdx"
				ToIndex="Ledger.LedgerIdIdx"
				IsRequired="false" >
			<RelationCol Name="LedgerTenantId" ToCol="TenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="BillItem"
				RelationType="Components"
				DbName="bill_billitem"
				Label="Bill Item"
				Suffix="BillItem"
				FromIndex="BillIdIdx"
				ToIndex="BillItem.BillItemBillIdx"
				IsRequired="true"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="BillId" ToCol="BillId" />
		</Relation>
		<Relation Name="ChequeDetail"
				RelationType="Children"
				ShortName="ChequeDetail"
				DbName="bill_chqdtl"
				Suffix="ChequeDetail"
				FromIndex="BillIdIdx"
				ToIndex="ChequeDetail.ChequeDetailBillIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="BillTenantId" />
			<RelationCol Name="BillId" ToCol="BillId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BillItem">
		<Relation Name="Bill"
				RelationType="Container"
				DbName="billitem_bill"
				Label="Bill"
				Suffix="Bill"
				FromIndex="BillItemBillIdx"
				ToIndex="Bill.BillIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="BillId" ToCol="BillId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="billitem_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="BillItemTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="VendorUnit"
				RelationType="Lookup"
				DbName="billitem_vendunit"
				Label="Vendor Unit"
				Suffix="VUnit"
				FromIndex="BillItemVendorUnitIdx"
				ToIndex="VendorUnit.VendorUnitIdIdx"
				IsRequired="false"
				PopDepChain="Bill.Account.VendorUnit" >
			<RelationCol Name="VendorUnitTenantId" ToCol="TenantId" />
			<RelationCol Name="VendorUnitAccountId" ToCol="AccountId" />
			<RelationCol Name="VendorUnitId" ToCol="VendorUnitId" />
		</Relation>
		<Relation Name="Tax"
				RelationType="Components"
				DbName="billitem_tax"
				Label="Tax Applied"
				Suffix="Tax"
				FromIndex="BillItemIdIdx"
				ToIndex="BillTax.BillTaxItemIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="BillItemId" ToCol="BillItemId" />
		</Relation>
		<Relation Name="PurchaseOrder"
				RelationType="Lookup"
				DbName="billitem_po"
				Label="Purchase Order"
				Suffix="PurchOrd"
				FromIndex="BillItemPurchaseOrderIdx"
				ToIndex="PurchaseOrder.PurchaseOrderIdIdx"
				IsRequired="false"
				PopDepChain="Bill.Account.PurchaseOrder" >
			<RelationCol Name="PurchaseOrderTenantId" ToCol="TenantId" />
			<RelationCol Name="PurchaseOrderId" ToCol="PurchaseOrderId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BillTax">
		<Relation Name="BillItem"
				RelationType="Container"
				DbName="billtax_billitem"
				Label="Bill Item"
				Suffix="BillItem"
				FromIndex="BillTaxItemIdx"
				ToIndex="BillItem.BillItemIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="BillItemId" ToCol="BillItemId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="billtax_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="BillTaxTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Cheque">
		<Relation Name="Account"
				RelationType="Container"
				DbName="chq_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="ChequeAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="chq_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="ChequeTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Ledger"
				RelationType="Lookup"
				DbName="chq_ledger"
				Label="Cheque Ledger Entry"
				Suffix="Ledger"
				FromIndex="ChequeLedgerIdx"
				ToIndex="Ledger.LedgerIdIdx"
				IsRequired="false" >
			<RelationCol Name="LedgerTenantId" ToCol="TenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="ChequeDetail"
				RelationType="Components"
				DbName="chq_chqdtl"
				Label="Cheque Detail"
				Suffix="Detail"
				FromIndex="ChequeIdIdx"
				ToIndex="ChequeDetail.ChequeDetailChequeIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ChequeId" ToCol="ChequeId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ChequeDetail">
		<Relation Name="Cheque"
				RelationType="Container"
				DbName="chqdtl_chq"
				Label="Cheque"
				Suffix="Cheque"
				FromIndex="ChequeDetailChequeIdx"
				ToIndex="Cheque.ChequeIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ChequeId" ToCol="ChequeId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="chqdtl_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="ChequeDetailTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Bill"
				RelationType="Parent"
				DbName="chqdtl_bill"
				Label="Bill"
				Suffix="Bill"
				FromIndex="ChequeDetailBillIdx"
				ToIndex="Bill.BillIdIdx"
				IsRequired="false" >
			<RelationCol Name="BillTenantId" ToCol="TenantId" />
			<RelationCol Name="BillId" ToCol="BillId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="chqdtl_prev"
				Suffix="Prev"
				FromIndex="PrevIdx"
				ToIndex="ChequeDetail.ChequeDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevChequeDetailId" ToCol="ChequeDetailId" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="chqdtl_next"
				Suffix="Next"
				FromIndex="NextIdx"
				ToIndex="ChequeDetail.ChequeDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextChequeDetailId" ToCol="ChequeDetailId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Contact">
		<Relation Name="AccountContact"
				RelationType="Children"
				DbName="ctct_acctctct"
				Label="Account Contact"
				Suffix="AccCont"
				FromIndex="ContactIdIdx"
				ToIndex="AccountContact.AccountContactContactIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ContactId" ToCol="ContactId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ContactList">
		<Relation Name="AccountContact"
				RelationType="Children"
				DbName="ctctlst_acctcont"
				Label="Account Contact"
				Suffix="AccCont"
				FromIndex="ContactListIdIdx"
				ToIndex="AccountContact.AccountContactContactListIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="ContactListId" ToCol="ContactListId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Deposit">
		<Relation Name="Account"
				RelationType="Container"
				DbName="depsit_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="DepositAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="depsit_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="DepositTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Ledger"
				RelationType="Lookup"
				DbName="depsit_ledger"
				Label="Deposit Ledger Entry"
				Suffix="Ledger"
				FromIndex="DepositLedgerIdx"
				ToIndex="Ledger.LedgerIdIdx"
				IsRequired="false" >
			<RelationCol Name="LedgerTenantId" ToCol="TenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="DepositDetail"
				RelationType="Components"
				DbName="depsit_depdtl"
				Label="Deposit Detail"
				Suffix="Detail"
				FromIndex="DepositIdIdx"
				ToIndex="DepositDetail.DepositDetailDepositIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="DepositId" ToCol="DepositId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="DepositDetail">
		<Relation Name="Deposit"
				RelationType="Container"
				DbName="depdtl_depsit"
				Label="Deposit"
				Suffix="Deposit"
				FromIndex="DepositDetailDepositIdx"
				ToIndex="Deposit.DepositIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="DepositId" ToCol="DepositId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="depdtl_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="DepositDetailTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Payment"
				RelationType="Parent"
				DbName="depdtl_pymt"
				Label="Payment"
				Suffix="Payment"
				FromIndex="DepositDetailPaymentIdx"
				ToIndex="Payment.PaymentIdIdx"
				IsRequired="false" >
			<RelationCol Name="PaymentTenantId" ToCol="TenantId" />
			<RelationCol Name="PaymentId" ToCol="PaymentId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="depdtl_prev"
				Suffix="Prev"
				FromIndex="DepositDetailPrevIdx"
				ToIndex="DepositDetail.DepositDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevDepositDetailId" ToCol="DepositDetailId" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="depdtl_next"
				Suffix="Next"
				FromIndex="DepositDetailNextidx"
				ToIndex="DepositDetail.DepositDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextDepositDetailId" ToCol="DepositDetailId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Fee">
		<Relation Name="Account"
				RelationType="Container"
				DbName="fee_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="FeeAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="fee_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="FeeTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Ledger"
				RelationType="Lookup"
				DbName="fee_ledger"
				Label="Fee Ledger Entry"
				Suffix="Ledger"
				FromIndex="FeeLedgerIdx"
				ToIndex="Ledger.LedgerIdIdx"
				IsRequired="false" >
			<RelationCol Name="LedgerTenantId" ToCol="TenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="FeeDetail"
				RelationType="Components"
				DbName="fee_feedtl"
				Label="Fee Detail"
				Suffix="Detail"
				FromIndex="FeeIdIdx"
				ToIndex="FeeDetail.FeeDetailFeeIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="FeeId" ToCol="FeeId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="FeeDetail">
		<Relation Name="Fee"
				RelationType="Container"
				DbName="feedtl_fee"
				Label="Fee"
				Suffix="Fee"
				FromIndex="FeeDetailFeeIdx"
				ToIndex="Fee.FeeIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="FeeId" ToCol="FeeId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="feedtl_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="FeeDetailTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="feedtl_prev"
				Suffix="Prev"
				FromIndex="FeeDetailPrevIdx"
				ToIndex="FeeDetail.FeeDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevFeeDetailId" ToCol="FeeDetailId" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="feedtl_next"
				Suffix="Next"
				FromIndex="FeeDetailNextIdx"
				ToIndex="FeeDetail.FeeDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextFeeDetailId" ToCol="FeeDetailId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Invoice">
		<Relation Name="Account"
				RelationType="Container"
				DbName="invc_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="InvoiceAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="invc_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="InvoiceTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Ledger"
				RelationType="Lookup"
				DbName="invc_ledger"
				Label="Invoice Ledger Entry"
				Suffix="Ledger"
				FromIndex="InvoiceLedgerIdx"
				ToIndex="Ledger.LedgerIdIdx"
				IsRequired="false" >
			<RelationCol Name="LedgerTenantId" ToCol="TenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="InvoiceItem"
				RelationType="Components"
				DbName="invc_invcitem"
				Label="Invoice Item"
				Suffix="InvoiceItem"
				FromIndex="InvoiceIdIdx"
				ToIndex="InvoiceItem.InvoiceItemInvoiceIdx"
				IsRequired="true"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="InvoiceId" ToCol="InvoiceId" />
		</Relation>
		<Relation Name="PaymentDetail"
				RelationType="Children"
				DbName="invc_pymtdtl"
				Label="Payment Detail"
				Suffix="PaymentDetail"
				FromIndex="InvoiceIdIdx"
				ToIndex="PaymentDetail.PaymentDetailInvoiceIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="InvoiceTenantId" />
			<RelationCol Name="InvoiceId" ToCol="InvoiceId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="InvoiceItem">
		<Relation Name="Invoice"
				RelationType="Container"
				DbName="invcitm_invc"
				Label="Invoice"
				Suffix="Invoice"
				FromIndex="InvoiceItemInvoiceIdx"
				ToIndex="Invoice.InvoiceIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="InvoiceId" ToCol="InvoiceId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="invcitm_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="InvoiceItemTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="VendorUnit"
				RelationType="Lookup"
				DbName="invcitm_vendunit"
				Label="Vendor Unit"
				Suffix="VUnit"
				FromIndex="InvoiceItemVendorUnitIdx"
				ToIndex="VendorUnit.VendorUnitIdIdx"
				IsRequired="false"
				PopDepChain="Invoice.Account.VendorUnit" >
			<RelationCol Name="VendorUnitTenantId" ToCol="TenantId" />
			<RelationCol Name="VendorUnitAccountId" ToCol="AccountId" />
			<RelationCol Name="VendorUnitId" ToCol="VendorUnitId" />
		</Relation>
		<Relation Name="Tax"
				RelationType="Components"
				DbName="invcitem_tax"
				Label="Tax Applied"
				Suffix="Tax"
				FromIndex="InvoiceItemIdIdx"
				ToIndex="InvoiceTax.InvoiceTaxItemIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="InvoiceItemId" ToCol="InvoiceItemId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="invitem_prev"
				Suffix="Prev"
				FromIndex="InvoiceItemPrevIdx"
				ToIndex="InvoiceItem.InvoiceItemIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevInvoiceItemId" ToCol="InvoiceItemId" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="invitem_next"
				Suffix="Next"
				FromIndex="InvoiceItemNextIdx"
				ToIndex="InvoiceItem.InvoiceItemIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextInvoiceItemId" ToCol="InvoiceItemId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="InvoiceTax">
		<Relation Name="InvoiceItem"
				RelationType="Container"
				DbName="invctax_invcitem"
				Label="Invoice Item"
				Suffix="InvItem"
				FromIndex="InvoiceTaxItemIdx"
				ToIndex="InvoiceItem.InvoiceItemIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="InvoiceItemId" ToCol="InvoiceItemId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="invctax_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="InvoiceTaxTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Ledger">
		<Relation Name="Account"
				RelationType="Container"
				DbName="ledger_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="LedgerAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="ledger_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="LedgerTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="TransferAccount"
				RelationType="Lookup"
				DbName="ledger_xferacct"
				Label="Transfer Account"
				Suffix="XfrAccount"
				FromIndex="LedgerTransferAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="false" >
			<RelationCol Name="TransferTenantId" ToCol="TenantId" />
			<RelationCol Name="TransferAccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="ConversionCcy"
				RelationType="Lookup"
				DbName="ledger_convccy"
				Label="Conversion Ccy"
				Suffix="ConvertCcy"
				FromIndex="LedgerConversionCcyIdx"
				ToIndex="ISOCcy.ISOCcyIdIdx"
				IsRequired="false" >
			<RelationCol Name="ConversionCcy" ToCol="ISOCcyId" />
		</Relation>
		<Relation Name="Invoice"
				RelationType="Children"
				DbName="ledger_invc"
				Label="Invoice"
				Suffix="Invoice"
				FromIndex="LedgerIdIdx"
				ToIndex="Invoice.InvoiceLedgerIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="LedgerTenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="Payment"
				RelationType="Children"
				DbName="ledger_pymt"
				Label="Payment"
				Suffix="Payment"
				FromIndex="LedgerIdIdx"
				ToIndex="Payment.PaymentLedgerIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="LedgerTenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="Bill"
				RelationType="Children"
				DbName="ledger_bill"
				Label="Bill"
				Suffix="Bill"
				FromIndex="LedgerIdIdx"
				ToIndex="Bill.BillLedgerIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="LedgerTenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="Cheque"
				RelationType="Children"
				DbName="ledger_chq"
				Label="Cheque"
				Suffix="Cheque"
				FromIndex="LedgerIdIdx"
				ToIndex="Cheque.ChequeLedgerIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="LedgerTenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="Deposit"
				RelationType="Children"
				DbName="ledger_depsit"
				Label="Deposit"
				Suffix="Deposit"
				FromIndex="LedgerIdIdx"
				ToIndex="Deposit.DepositLedgerIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="LedgerTenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="Fee"
				RelationType="Children"
				DbName="ledger_fee"
				Label="Fee"
				Suffix="Fee"
				FromIndex="LedgerIdIdx"
				ToIndex="Fee.FeeLedgerIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="LedgerTenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="Transfer"
				RelationType="Children"
				DbName="ledger_xfer"
				Label="Transfer"
				Suffix="Transfer"
				FromIndex="LedgerIdIdx"
				ToIndex="Transfer.TransferLedgerIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="LedgerTenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="POItem">
		<Relation Name="PurchaseOrder"
				RelationType="Container"
				DbName="poitem_po"
				Label="Purchase Order"
				Suffix="POrder"
				FromIndex="POItemPurchaseOrderIdx"
				ToIndex="PurchaseOrder.PurchaseOrderIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="PurchaseOrderId" ToCol="PurchaseOrderId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="poitem_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="POItemTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="BillItem"
				RelationType="Children"
				DbName="poitem_billitem"
				Label="Bill Item"
				Suffix="BillItem"
				FromIndex="POItemIdIdx"
				ToIndex="BillItem.BillItemPOItemIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="POItemTenantId" />
			<RelationCol Name="POItemId" ToCol="POItemId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="poitem_prev"
				Suffix="Prev"
				FromIndex="POItemPrevIdx"
				ToIndex="POItem.POItemIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevPOItemId" ToCol="POItemId" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="poitem_next"
				Suffix="Next"
				FromIndex="POItemNextIdx"
				ToIndex="POItem.POItemIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextPOItemId" ToCol="POItemId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Payment">
		<Relation Name="Account"
				RelationType="Container"
				DbName="pymt_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="PaymentAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="pymt_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="PaymentTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Ledger"
				RelationType="Lookup"
				DbName="pymt_ledger"
				Label="Payment Ledger Entry"
				Suffix="Ledger"
				FromIndex="PaymentLedgerIdx"
				ToIndex="Ledger.LedgerIdIdx"
				IsRequired="false" >
			<RelationCol Name="LedgerTenantId" ToCol="TenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
		<Relation Name="PaymentDetail"
				RelationType="Components"
				DbName="pymt_pymtdtl"
				Label="Payment Detail"
				Suffix="Detail"
				FromIndex="PaymentIdIdx"
				ToIndex="PaymentDetail.PaymentDetailPaymentIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="PaymentId" ToCol="PaymentId" />
		</Relation>
		<Relation Name="DepositDetail"
				RelationType="Children"
				DbName="pymt_depdtl"
				Label="Deposit Detail"
				Suffix="DepositDetail"
				FromIndex="PaymentIdIdx"
				ToIndex="DepositDetail.DepositDetailPaymentIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="PaymentTenantId" />
			<RelationCol Name="PaymentId" ToCol="PaymentId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="PaymentDetail">
		<Relation Name="Payment"
				RelationType="Container"
				DbName="pymtdtl_pymt"
				Label="Payment"
				Suffix="Payment"
				FromIndex="PaymentDetailPaymentIdx"
				ToIndex="Payment.PaymentIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="PaymentId" ToCol="PaymentId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="pymtdtl_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="PaymentDetailTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Invoice"
				RelationType="Parent"
				DbName="pymtdtl_invc"
				Label="Invoice"
				Suffix="Invoice"
				FromIndex="PaymentDetailInvoiceIdx"
				ToIndex="Invoice.InvoiceIdIdx"
				IsRequired="false" >
			<RelationCol Name="InvoiceTenantId" ToCol="TenantId" />
			<RelationCol Name="InvoiceId" ToCol="InvoiceId" />
		</Relation>
		<Relation Name="Prev"
				RelationType="Lookup"
				DbName="pymtdtl_prev"
				Suffix="Prev"
				FromIndex="PaymentDetailPrevIdx"
				ToIndex="PaymentDetail.PaymentDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="PrevTenantId" ToCol="TenantId" />
			<RelationCol Name="PrevPaymentDetailId" ToCol="PaymentDetailId" />
		</Relation>
		<Relation Name="Next"
				RelationType="Lookup"
				DbName="pymtdtl_next"
				Suffix="Next"
				FromIndex="PaymentDetailNextIdx"
				ToIndex="PaymentDetail.PaymentDetailIdIdx"
				IsRequired="false" >
			<RelationCol Name="NextTenantId" ToCol="TenantId" />
			<RelationCol Name="NextPaymentDetailId" ToCol="PaymentDetailId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="PurchaseOrder">
		<Relation Name="Account"
				RelationType="Container"
				DbName="po_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="PurchaseOrderAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="po_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="PurchaseOrderTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="POItem"
				RelationType="Components"
				DbName="po_poitem"
				Label="Purchase Order Item"
				Suffix="POItem"
				FromIndex="PurchaseOrderIdIdx"
				ToIndex="POItem.POItemPurchaseOrderIdx"
				IsRequired="true"
				IsXsdContainer="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="PurchaseOrderId" ToCol="PurchaseOrderId" />
		</Relation>
		<Relation Name="BillItem"
				RelationType="Children"
				DbName="po_billitem"
				Label="Bill Item"
				Suffix="BillItem"
				FromIndex="PurchaseOrderIdIdx"
				ToIndex="BillItem.BillItemPurchaseOrderIdx"
				IsRequired="false" >
			<RelationCol Name="TenantId" ToCol="PurchaseOrderTenantId" />
			<RelationCol Name="PurchaseOrderId" ToCol="PurchaseOrderId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Tax">
		<Relation Name="Tenant"
				RelationType="Container"
				DbName="tax_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="TaxTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Tenant">
		<Relation Name="AccountConfig"
				RelationType="Components"
				DbName="tenant_acctconf"
				Label="Account Configuration"
				Suffix="AcctCfg"
				FromIndex="TenantIdIdx"
				ToIndex="AccountConfig.AccountConfigIdIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="Id" ToCol="TenantId" />
		</Relation>
		<Relation Name="Tax"
				RelationType="Components"
				DbName="tenant_tax"
				Label="Tax Configuration"
				Suffix="Tax"
				FromIndex="TenantIdIdx"
				ToIndex="Tax.TaxTenantIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="Id" ToCol="TenantId" />
		</Relation>
		<Relation Name="Account"
				RelationType="Components"
				DbName="tenant_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="TenantIdIdx"
				ToIndex="Account.AccountTenantIdx"
				IsRequired="false"
				IsXsdContainer="true" >
			<RelationCol Name="Id" ToCol="TenantId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Transfer">
		<Relation Name="Account"
				RelationType="Container"
				DbName="transfer_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="TransferAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="transfer_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="TransferTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="ToAccount"
				RelationType="Parent"
				DbName="transfer_toacct"
				Label="ToAccount"
				Suffix="ToAccount"
				FromIndex="TransferToAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true"
				PopDepChain="Tenant.Account" >
			<RelationCol Name="ToAccountTenantId" ToCol="TenantId" />
			<RelationCol Name="ToAccountId" ToCol="AccountId" />
		</Relation>
		<Relation Name="Ledger"
				RelationType="Lookup"
				DbName="transfer_ledger"
				Label="Transfer Ledger Entry"
				Suffix="Ledger"
				FromIndex="TransferLedgerIdx"
				ToIndex="Ledger.LedgerIdIdx"
				IsRequired="false" >
			<RelationCol Name="LedgerTenantId" ToCol="TenantId" />
			<RelationCol Name="LedgerId" ToCol="LedgerId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="VendorUnit">
		<Relation Name="Tenant"
				RelationType="Owner"
				DbName="vendunit_tenant"
				Label="Tenant"
				Suffix="Tenant"
				FromIndex="VendorUnitTenantIdx"
				ToIndex="Tenant.TenantIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="Id" />
		</Relation>
		<Relation Name="Account"
				RelationType="Container"
				DbName="vendunit_acct"
				Label="Account"
				Suffix="Account"
				FromIndex="VendorUnitAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="true" >
			<RelationCol Name="TenantId" ToCol="TenantId" />
			<RelationCol Name="AccountId" ToCol="AccountId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="Account">
		<Relation Name="RollupAccount"
				RelationType="Parent"
				DbName="acct_rollupacct"
				Label="Rollup Account"
				Suffix="RollupAcct"
				FromIndex="AccountRollupAccountIdx"
				ToIndex="Account.AccountIdIdx"
				IsRequired="false"
				PopDepChain="Tenant.Account" >
			<RelationCol Name="RollupTenantId" ToCol="TenantId" />
			<RelationCol Name="RollupAccountId" ToCol="AccountId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="AccountTaxId">
		<Relation Name="Tax"
				RelationType="Parent"
				DbName="accttaxid_tax"
				Label="Tax"
				Suffix="Tax"
				FromIndex="AccountTaxIdTaxIdx"
				ToIndex="Tax.TaxIdIdx"
				IsRequired="true"
				PopDepChain="Tenant.Tax" >
			<RelationCol Name="TaxId" ToCol="TaxId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BillItem">
		<Relation Name="LineForTax"
				RelationType="Lookup"
				DbName="billitem_lnfortax"
				Label="Line For Tax"
				Suffix="LineForTax"
				FromIndex="BillItemTaxIdx"
				ToIndex="Tax.TaxIdIdx"
				IsRequired="true"
				PopDepChain="Tenant.Tax" >
			<RelationCol Name="TaxId" ToCol="TaxId" />
		</Relation>
		<Relation Name="POItem"
				RelationType="Lookup"
				DbName="billitem_poitm"
				Label="Purchase Order Item"
				Suffix="POItem"
				FromIndex="BillItemPOItemIdx"
				ToIndex="POItem.POItemIdIdx"
				IsRequired="false"
				PopDepChain="PurchaseOrder.POItem" >
			<RelationCol Name="POItemTenantId" ToCol="TenantId" />
			<RelationCol Name="POItemId" ToCol="POItemId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="BillTax">
		<Relation Name="Tax"
				RelationType="Parent"
				DbName="billtax_tax"
				Label="Tax"
				Suffix="Tax"
				FromIndex="BillTaxTaxIdx"
				ToIndex="Tax.TaxIdIdx"
				IsRequired="true"
				PopDepChain="Tenant.Tax" >
			<RelationCol Name="TaxId" ToCol="TaxId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="InvoiceItem">
		<Relation Name="LineForTax"
				RelationType="Lookup"
				DbName="invcitem_lnfortax"
				Label="Line For Tax"
				Suffix="LineForTax"
				FromIndex="InvoiceItemTaxIdx"
				ToIndex="Tax.TaxIdIdx"
				IsRequired="true"
				PopDepChain="Tenant.Tax" >
			<RelationCol Name="TaxId" ToCol="TaxId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="InvoiceTax">
		<Relation Name="Tax"
				RelationType="Parent"
				DbName="invctax_tax"
				Label="Tax"
				Suffix="Tax"
				FromIndex="InvoiceTaxTaxIdx"
				ToIndex="Tax.TaxIdIdx"
				IsRequired="true"
				PopDepChain="Tenant.Tax" >
			<RelationCol Name="TaxId" ToCol="TaxId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="POItem">
		<Relation Name="VendorUnit"
				RelationType="Lookup"
				DbName="poitem_vendunit"
				Label="Vendor Unit"
				Suffix="VUnit"
				FromIndex="POItemVendorUnitIdx"
				ToIndex="VendorUnit.VendorUnitIdIdx"
				IsRequired="false"
				PopDepChain="PurchaseOrder.Account.VendorUnit" >
			<RelationCol Name="VendorUnitTenantId" ToCol="TenantId" />
			<RelationCol Name="VendorUnitAccountId" ToCol="AccountId" />
			<RelationCol Name="VendorUnitId" ToCol="VendorUnitId" />
		</Relation>
	</TableAddendum>

	<TableAddendum FromTable="ChequeDetail">
		<Chain Name="Order"
				Suffix="Order"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="DepositDetail">
		<Chain Name="Order"
				Suffix="Order"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="FeeDetail">
		<Chain Name="Order"
				Suffix="Order"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="InvoiceItem">
		<Chain Name="Order"
				Suffix="Order"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="POItem">
		<Chain Name="Order"
				Suffix="Order"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="PaymentDetail">
		<Chain Name="Order"
				Suffix="Order"
				PrevRel="Prev"
				NextRel="Next" />
	</TableAddendum>

	<TableAddendum FromTable="Account">
		<ClearDep Name="ClearPaymentDtlInvoice" ClearDepChain="Payment.PaymentDetail.Invoice" />
		<ClearDep Name="ClearChequeDtlBill" ClearDepChain="Cheque.ChequeDetail.Bill" />
		<ClearDep Name="ClearDepositDtlPayment" ClearDepChain="Deposit.DepositDetail.Payment" />
		<ClearDep Name="ClearInvoiceItmTax" ClearDepChain="Invoice.InvoiceItem.LineForTax" />
		<ClearDep Name="ClearBillItmTax" ClearDepChain="Bill.BillItem.LineForTax" />
	</TableAddendum>

	<TableAddendum FromTable="Tenant">
		<ClearDep Name="ClearRollupAccount" ClearDepChain="Account.RollupAccount" />
	</TableAddendum>

	<TableAddendum FromTable="Account">
		<DelDep Name="DelFeeDetail" DelDepChain="Fee.FeeDetail" />
		<DelDep Name="DelFee" DelDepChain="Fee" />
		<DelDep Name="DelCheque" DelDepChain="Cheque" />
		<DelDep Name="DelTransfer" DelDepChain="Transfer" />
		<DelDep Name="DelBillTax" DelDepChain="Bill.BillItem.Tax" />
		<DelDep Name="DelBill" DelDepChain="Bill" />
		<DelDep Name="DelPOItem" DelDepChain="PurchaseOrder.POItem" />
		<DelDep Name="DelPurchaseOrder" DelDepChain="PurchaseOrder" />
		<DelDep Name="DelDeposit" DelDepChain="Deposit" />
		<DelDep Name="DelPayment" DelDepChain="Payment" />
		<DelDep Name="DelInvoiceTax" DelDepChain="Invoice.InvoiceItem.Tax" />
		<DelDep Name="DelInvoiceItem" DelDepChain="Invoice.InvoiceItem" />
		<DelDep Name="DelInvoice" DelDepChain="Invoice" />
		<DelDep Name="DelAccountContact" DelDepChain="AccountContact" />
		<DelDep Name="DelVendorUnit" DelDepChain="VendorUnit" />
		<DelDep Name="DelTaxId" DelDepChain="TaxId" />
		<DelDep Name="DelEntries" DelDepChain="Entry" />
	</TableAddendum>

	<TableAddendum FromTable="Bill">
		<DelDep Name="DelBillItem" DelDepChain="BillItem" />
		<DelDep Name="DelBillTax" DelDepChain="BillItem.Tax" />
	</TableAddendum>

	<TableAddendum FromTable="BillItem">
		<DelDep Name="DelBillTax" DelDepChain="Tax" />
	</TableAddendum>

	<TableAddendum FromTable="Cheque">
		<DelDep Name="DelChequeDetail" DelDepChain="ChequeDetail" />
	</TableAddendum>

	<TableAddendum FromTable="Deposit">
		<DelDep Name="DelDepositDetail" DelDepChain="DepositDetail" />
	</TableAddendum>

	<TableAddendum FromTable="Fee">
		<DelDep Name="DelFeeDetail" DelDepChain="FeeDetail" />
	</TableAddendum>

	<TableAddendum FromTable="Invoice">
		<DelDep Name="DelInvoiceTax" DelDepChain="InvoiceItem.Tax" />
		<DelDep Name="DelInvoiceItem" DelDepChain="InvoiceItem" />
	</TableAddendum>

	<TableAddendum FromTable="InvoiceItem">
		<DelDep Name="DelInvoiceTax" DelDepChain="Tax" />
	</TableAddendum>

	<TableAddendum FromTable="Ledger">
		<DelDep Name="DelFee" DelDepChain="Fee" />
		<DelDep Name="DelDeposit" DelDepChain="Deposit" />
		<DelDep Name="DelPayment" DelDepChain="Payment" />
		<DelDep Name="DelInvoice" DelDepChain="Invoice" />
		<DelDep Name="DelCheque" DelDepChain="Cheque" />
		<DelDep Name="DelBill" DelDepChain="Bill" />
	</TableAddendum>

	<TableAddendum FromTable="Payment">
		<DelDep Name="DelPaymentDetail" DelDepChain="PaymentDetail" />
	</TableAddendum>

	<TableAddendum FromTable="PurchaseOrder">
		<DelDep Name="DelPOItem" DelDepChain="POItem" />
	</TableAddendum>

	<TableAddendum FromTable="Tenant">
		<DelDep Name="DelAccountContact" DelDepChain="Account.AccountContact" />
		<DelDep Name="DelAccount" DelDepChain="Account" />
		<DelDep Name="DelTax" DelDepChain="Tax" />
		<DelDep Name="DelAccountConfigs" DelDepChain="AccountConfig" />
	</TableAddendum>

	<TableAddendum FromTable="Bill">
		<ServerObjFunc Name="FinalizeBill"
				IsInstanceMethod="true"
				ReturnTable="Bill" >
			<CafeMethodBody>		final String S_ProcName = &quot;finalizeBill&quot;;

		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}

		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}

		I$DefSchemaName$BillEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		Calendar currentDate = Calendar.getInstance();
		currentDate.set( Calendar.HOUR_OF_DAY, 0 );
		currentDate.set( Calendar.MINUTE, 0 );
		currentDate.set( Calendar.SECOND, 0 );
		currentDate.set( Calendar.MILLISECOND, 0 );
		editObj.setRequiredBillDate( currentDate );

		BigDecimal total = new BigDecimal( &quot;0.0&quot; );
		BigDecimal addme;
		I$DefSchemaName$BillItemObj billItem;
		List&lt;I$DefSchemaName$BillItemObj&gt; billItemList = editObj.getRequiredComponentsBillItem( true );
		if( billItemList.size() &gt; 0 ) {
			Iterator&lt;I$DefSchemaName$BillItemObj&gt; iterBillItem = billItemList.iterator();
			while( iterBillItem.hasNext() ) {
				billItem = iterBillItem.next();
				addme = billItem.getRequiredAmountBilled();
				total = total.add( addme );
			}
			editObj.setOptionalAmount( total );
		}
		else {
			total = editObj.getOptionalAmount();
			if( total == null ) {
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					&quot;editObj.getOptionalAmount&quot; );
			}
		}
		editAccount.setRequiredBalance( editAccount.getRequiredBalance().subtract( total ) );
		editAccount.update();
		editAccount = null;

		I$DefSchemaName$LedgerObj ledger = schemaObj.getLedgerTableObj().newInstance();
		I$DefSchemaName$LedgerEditObj editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( editObj.getRequiredContainerAccount() );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		editLedger.setRequiredDescription( &quot;Bill &quot; + editObj.getRequiredDescription() );
		editLedger.setOptionalDebit( total );
		editLedger.setOptionalCredit( null );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( editObj.getRequiredContainerAccount().getRequiredBalance() );
		ledger = editLedger.create();
		editLedger = null;

		editObj.setOptionalLookupLedger( ledger );
		editObj.update();
		editObj = null;

		return( obj.getBillBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;finalizeBill&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$BillEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$BillEditObj*&gt;( obj->beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( editObj-&gt;getRequiredContainerAccount()-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point billUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setRequiredBillDate( billUTCDate );

		cflib::TCFLibBigDecimal&lt;31,5&gt; total( "0" );
		$CPlusDefNamespace$::I$DefSchemaName$BillItemObj* billItem;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$BillItemObj*&gt; billItemList = editObj-&gt;getRequiredComponentsBillItem( true );
		if( ! billItemList.empty() ) {
			for( auto iterBillItem = billItemList.begin(); iterBillItem != billItemList.end(); iterBillItem ++ ) {
				billItem = *iterBillItem;
				total += billItem-&gt;getRequiredAmountBilled();
			}
			editObj-&gt;setOptionalAmountValue( total );
		}
		else {
			if( editObj-&gt;isOptionalAmountNull() ) {
				editAccount-&gt;endEdit();
				editAccount = NULL;
				editObj-&gt;endEdit();
				editObj = NULL;
				throw cflib::CFLibNullArgumentException( CLASS_NAME,
					S_ProcName,
					0,
					&quot;editObj.getOptionalAmount&quot; );
			}
			total = editObj-&gt;getOptionalAmountValue();
		}
		cflib::TCFLibBigDecimal&lt;31,5&gt; calc = editAccount-&gt;getRequiredBalance();
		calc -= total;
		editAccount-&gt;setRequiredBalance( calc );
		editAccount-&gt;update();
		editAccount = NULL;

		$CPlusDefNamespace$::I$DefSchemaName$LedgerObj* ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj* editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( editObj-&gt;getRequiredContainerAccount() );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		editLedger-&gt;setRequiredDescription( &quot;Bill &quot; + editObj-&gt;getRequiredDescription() );
		editLedger-&gt;setOptionalDebitValue( total );
		editLedger-&gt;setOptionalCreditNull();
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( obj-&gt;getRequiredContainerAccount()-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );

		editObj-&gt;setOptionalLookupLedger( ledger );
		editObj-&gt;update();
		editObj = NULL;

		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$BillBuff*&gt;( obj-&gt;getBillBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;finalizeBill&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>

	<TableAddendum FromTable="Cheque">
		<ServerObjFunc Name="FinalizeCheque"
				IsInstanceMethod="true"
				ReturnTable="Cheque" >
			<CafeMethodBody>		final String S_ProcName = &quot;finalizeCheque&quot;;

		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}

		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}

		I$DefSchemaName$ChequeEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		boolean isEFT = editObj.getRequiredIsEFT();

		Calendar currentDate = Calendar.getInstance();
		currentDate.set( Calendar.HOUR_OF_DAY, 0 );
		currentDate.set( Calendar.MINUTE, 0 );
		currentDate.set( Calendar.SECOND, 0 );
		currentDate.set( Calendar.MILLISECOND, 0 );
		editObj.setRequiredChequeDate( currentDate );

		I$DefSchemaName$AccountObj objAccount = editAccount.getOrig();
		if( ! isEFT ) {
			short chequeNumDigits = objAccount.getRequiredChequeNumDigits();
			int maxChequeNum;
			switch( chequeNumDigits ) {
				case 1: maxChequeNum = 9; break;
				case 2: maxChequeNum = 99; break;
				case 3: maxChequeNum = 999; break;
				case 4: maxChequeNum = 9999; break;
				case 5: maxChequeNum = 99999; break;
				case 6: maxChequeNum = 999999; break;
				case 7: maxChequeNum = 9999999; break;
				case 8: maxChequeNum = 99999999; break;
				case 9: maxChequeNum = 999999999; break;
				default:
					editAccount.endEdit();
					editAccount = null;
					editObj.endEdit();
					editObj = null;
					if( chequeNumDigits &gt; 0 ) {
						throw new CFLibArgumentOverflowException( getClass(),
							S_ProcName,
							0,
							&quot;Account.ChequeNumDigits&quot;,
							(int)chequeNumDigits,
							9 );
					}
					else {
						throw new CFLibArgumentUnderflowException( getClass(),
							S_ProcName,
							0,
							&quot;Account.ChequeNumDigits&quot;,
							(int)chequeNumDigits,
							1 );
					}
			}

			int nextChequeNum = objAccount.getRequiredNextChequeNum();
			if( nextChequeNum &gt; maxChequeNum ) {
				nextChequeNum = 1;
				editAccount.setRequiredNextChequeNum( 2 );
			}
			else {
				editAccount.setRequiredNextChequeNum( nextChequeNum + 1 );
			}
			NumberFormat fmtChequeNum = NumberFormat.getInstance();
			fmtChequeNum.setMaximumFractionDigits( 0 );
			fmtChequeNum.setMinimumFractionDigits( 0 );
			fmtChequeNum.setMaximumIntegerDigits( chequeNumDigits );
			fmtChequeNum.setMinimumIntegerDigits( chequeNumDigits );
			String formattedChequeNum = fmtChequeNum.format( (long)nextChequeNum );
			editObj.setRequiredChequeNumber( formattedChequeNum );
		}
		BigDecimal total = new BigDecimal( &quot;0.0&quot; );
		BigDecimal addme;
		I$DefSchemaName$ChequeDetailObj chequeDetail;
		List&lt;I$DefSchemaName$ChequeDetailObj&gt; chequeDetailList = editObj.getOptionalComponentsDetail( true );
		if( chequeDetailList.size() &gt; 0 ) {
			Iterator&lt;I$DefSchemaName$ChequeDetailObj&gt; iterChequeDetail = chequeDetailList.iterator();
			while( iterChequeDetail.hasNext() ) {
				chequeDetail = iterChequeDetail.next();
				addme = chequeDetail.getRequiredAmountPaid();
				total = total.add( addme );
			}
			editObj.setOptionalAmount( total );
		}
		else {
			total = editObj.getOptionalAmount();
			if( total == null ) {
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					&quot;editObj.getOptionalAmount&quot; );
			}
		}
		editAccount.setRequiredBalance( editAccount.getRequiredBalance().subtract( total ) );
		editAccount.update();
		editAccount = null;

		I$DefSchemaName$LedgerObj ledger = schemaObj.getLedgerTableObj().newInstance();
		I$DefSchemaName$LedgerEditObj editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( editObj.getRequiredContainerAccount() );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		if( isEFT ) {
			editLedger.setRequiredDescription( &quot;EFT &quot; + editObj.getRequiredChequeNumber() );
		}
		else {
			editLedger.setRequiredDescription( &quot;Cheque &quot; + editObj.getRequiredChequeNumber() );
		}
		editLedger.setOptionalDebit( total );
		editLedger.setOptionalCredit( null );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( objAccount.getRequiredBalance() );
		ledger = editLedger.create();
		editLedger = null;

		editObj.setOptionalLookupLedger( ledger );
		editObj.update();
		editObj = null;

		return( obj.getChequeBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;finalizeCheque&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );
		static const std::string S_AChequeEditIsAlreadyOpen( "A cheque edit is already open" );
		static const std::string S_AnAccountEditIsAlreadyOpen( "An account edit is already open" );
		static const std::string S_AccountChequeNumDigits( "Account.ChequeNumDigits" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$ChequeEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$ChequeEditObj*&gt;( obj-&gt;beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				S_AChequeEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( editObj-&gt;getRequiredContainerAccount()-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_AnAccountEditIsAlreadyOpen );
		}

		bool isEFT = editObj-&gt;getRequiredIsEFT();

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point chequeUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setRequiredChequeDate( chequeUTCDate );

		$CPlusDefNamespace$::I$DefSchemaName$AccountObj* objAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountObj*&gt;( editAccount-&gt;getOrig() );
		if( ! isEFT ) {
			int32_t chequeNumDigits = objAccount-&gt;getRequiredChequeNumDigits();
			int32_t maxChequeNum;
			switch( chequeNumDigits ) {
				case 1: maxChequeNum = 9; break;
				case 2: maxChequeNum = 99; break;
				case 3: maxChequeNum = 999; break;
				case 4: maxChequeNum = 9999; break;
				case 5: maxChequeNum = 99999; break;
				case 6: maxChequeNum = 999999; break;
				case 7: maxChequeNum = 9999999; break;
				case 8: maxChequeNum = 99999999; break;
				case 9: maxChequeNum = 999999999; break;
				default:
					editAccount-&gt;endEdit();
					editAccount = NULL;
					editObj-&gt;endEdit();
					editObj = NULL;
					if( chequeNumDigits &gt; 0 ) {
						throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
							S_ProcName,
							0,
							S_AccountChequeNumDigits,
							chequeNumDigits,
							9 );
					}
					else {
						throw cflib::CFLibArgumentUnderflowException( CLASS_NAME,
							S_ProcName,
							0,
							S_AccountChequeNumDigits,
							chequeNumDigits,
							1 );
					}
			}

			int32_t nextChequeNum = objAccount-&gt;getRequiredNextChequeNum();
			if( nextChequeNum &gt; maxChequeNum ) {
				nextChequeNum = 1;
				editAccount-&gt;setRequiredNextChequeNum( 2 );
			}
			else {
				editAccount-&gt;setRequiredNextChequeNum( nextChequeNum + 1 );
			}

			char buff[32] = { 0 };
			snprintf( buff, 32, "%0*d", chequeNumDigits, nextChequeNum );
			std::string formattedChequeNum( buff );
			editObj-&gt;setRequiredChequeNumber( formattedChequeNum );
		}

		cflib::TCFLibBigDecimal&lt;31,5&gt; total( "0" );

		$CPlusDefNamespace$::I$DefSchemaName$ChequeDetailObj* chequeDetail;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$ChequeDetailObj*&gt; chequeDetailList = editObj-&gt;getOptionalComponentsDetail( true );
		if( ! chequeDetailList.empty() ) {
			for( auto iterChequeDetail = chequeDetailList.begin(); iterChequeDetail != chequeDetailList.end(); iterChequeDetail ++ ) {
				chequeDetail = *iterChequeDetail;
				total += chequeDetail-&gt;getRequiredAmountPaid();
			}
			editObj-&gt;setOptionalAmountValue( total );
		}
		else if( editObj-&gt;isOptionalAmountNull() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				&quot;editObj.getOptionalAmount&quot; );
		}
		else {
			total += editObj-&gt;getOptionalAmountValue();
		}
		cflib::TCFLibBigDecimal&lt;31,5&gt; calc = editAccount-&gt;getRequiredBalance();
		calc -= total;
		editAccount-&gt;setRequiredBalance( calc );
		editAccount-&gt;update();
		editAccount = NULL;

		$CPlusDefNamespace$::I$DefSchemaName$LedgerObj* ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj* editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( editObj-&gt;getRequiredContainerAccount() );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		if( isEFT ) {
			editLedger-&gt;setRequiredDescription( &quot;EFT &quot; + editObj-&gt;getRequiredChequeNumber() );
		}
		else {
			editLedger-&gt;setRequiredDescription( &quot;Cheque &quot; + editObj-&gt;getRequiredChequeNumber() );
		}
		editLedger-&gt;setOptionalDebitValue( total );
		editLedger-&gt;setOptionalCreditNull();
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( obj-&gt;getRequiredContainerAccount()-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );
		editLedger = NULL;

		editObj-&gt;setOptionalLookupLedger( ledger );
		editObj-&gt;update();
		editObj = NULL;

		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$ChequeBuff*&gt;( obj-&gt;getChequeBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;finalizeCheque&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>

	<TableAddendum FromTable="Deposit">
		<ServerObjFunc Name="FinalizeDeposit"
				IsInstanceMethod="true"
				ReturnTable="Deposit" >
			<CafeMethodBody>		final String S_ProcName = &quot;finalizeDeposit&quot;;

		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}

		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}

		I$DefSchemaName$DepositEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		Calendar currentDate = Calendar.getInstance();
		currentDate.set( Calendar.HOUR_OF_DAY, 0 );
		currentDate.set( Calendar.MINUTE, 0 );
		currentDate.set( Calendar.SECOND, 0 );
		currentDate.set( Calendar.MILLISECOND, 0 );
		editObj.setRequiredDepositDate( currentDate );

		I$DefSchemaName$AccountObj objAccount = editAccount.getOrig();

		BigDecimal total = new BigDecimal( &quot;0.0&quot; );
		BigDecimal addme;
		I$DefSchemaName$DepositDetailObj chequeDetail;
		List&lt;I$DefSchemaName$DepositDetailObj&gt; chequeDetailList = editObj.getOptionalComponentsDetail( true );
		if( chequeDetailList.size() &gt; 0 ) {
			Iterator&lt;I$DefSchemaName$DepositDetailObj&gt; iterDepositDetail = chequeDetailList.iterator();
			while( iterDepositDetail.hasNext() ) {
				chequeDetail = iterDepositDetail.next();
				addme = chequeDetail.getRequiredAmountPaid();
				total = total.add( addme );
			}
			editObj.setOptionalAmount( total );
		}
		else {
			total = editObj.getOptionalAmount();
			if( total == null ) {
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					&quot;editObj.getOptionalAmount&quot; );
			}
		}
		editAccount.setRequiredBalance( editAccount.getRequiredBalance().add( total ) );
		editAccount.update();
		editAccount = null;

		I$DefSchemaName$LedgerObj ledger = schemaObj.getLedgerTableObj().newInstance();
		I$DefSchemaName$LedgerEditObj editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( editObj.getRequiredContainerAccount() );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		editLedger.setRequiredDescription( &quot;Deposit &quot; + editObj.getRequiredDescription() );
		editLedger.setOptionalDebit( null );
		editLedger.setOptionalCredit( total );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( editObj.getRequiredContainerAccount().getRequiredBalance() );
		ledger = editLedger.create();
		editLedger = null;

		editObj.setOptionalLookupLedger( ledger );
		editObj.update();
		editObj = null;

		return( obj.getDepositBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;finalizeDeposit&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );
		static const std::string S_ADepositEditIsAlreadyOpen( "A deposit edit is already open" );
		static const std::string S_AnAccountEditIsAlreadyOpen( "An account edit is already open" );
		static const std::string S_DepositOptionalAmount( "Deposit.OptionalAmount" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$DepositEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$DepositEditObj*&gt;( obj-&gt;beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				S_ADepositEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( editObj-&gt;getRequiredContainerAccount()-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_AnAccountEditIsAlreadyOpen );
		}

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point depositUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setRequiredDepositDate( depositUTCDate );

		cflib::TCFLibBigDecimal&lt;31,5&gt; total( "0" );

		$CPlusDefNamespace$::I$DefSchemaName$DepositDetailObj* depositDetail;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$DepositDetailObj*&gt; depositDetailList = editObj-&gt;getOptionalComponentsDetail( true );
		if( ! depositDetailList.empty() ) {
			for( auto iterDepositDetail = depositDetailList.begin(); iterDepositDetail != depositDetailList.end(); iterDepositDetail ++ ) {
				depositDetail = *iterDepositDetail;
				total += depositDetail-&gt;getRequiredAmountPaid();
			}
			editObj-&gt;setOptionalAmountValue( total );
		}
		else if( editObj-&gt;isOptionalAmountNull() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_DepositOptionalAmount );
		}
		else {
			total += editObj-&gt;getOptionalAmountValue();
		}
		cflib::TCFLibBigDecimal&lt;31,5&gt; calc = editAccount-&gt;getRequiredBalance();
		calc += total;
		editAccount-&gt;setRequiredBalance( calc );
		editAccount-&gt;update();
		editAccount = NULL;

		$CPlusDefNamespace$::I$DefSchemaName$LedgerObj* ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj* editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( editObj-&gt;getRequiredContainerAccount() );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		editLedger-&gt;setRequiredDescription( "Deposit " + editObj-&gt;getRequiredDescription() );
		editLedger-&gt;setOptionalDebitNull();
		editLedger-&gt;setOptionalCreditValue( total );
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( obj-&gt;getRequiredContainerAccount()-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );

		editObj-&gt;setOptionalLookupLedger( ledger );
		editObj-&gt;update();
		editObj = NULL;

		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$DepositBuff*&gt;( obj-&gt;getDepositBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;finalizeDeposit&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>

	<TableAddendum FromTable="Fee">
		<ServerObjFunc Name="FinalizeFee"
				IsInstanceMethod="true"
				ReturnTable="Fee" >
			<CafeMethodBody>		final String S_ProcName = &quot;finalizeFee&quot;;

		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}

		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}

		I$DefSchemaName$FeeEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		Calendar currentDate = Calendar.getInstance();
		currentDate.set( Calendar.HOUR_OF_DAY, 0 );
		currentDate.set( Calendar.MINUTE, 0 );
		currentDate.set( Calendar.SECOND, 0 );
		currentDate.set( Calendar.MILLISECOND, 0 );
		editObj.setRequiredFeeDate( currentDate );

		I$DefSchemaName$AccountObj objAccount = editAccount.getOrig();

		BigDecimal total = new BigDecimal( &quot;0.0&quot; );
		BigDecimal addme;
		I$DefSchemaName$FeeDetailObj feeDetail;
		List&lt;I$DefSchemaName$FeeDetailObj&gt; feeDetailList = editObj.getOptionalComponentsDetail( true );
		if( feeDetailList.size() &gt; 0 ) {
			Iterator&lt;I$DefSchemaName$FeeDetailObj&gt; iterFeeDetail = feeDetailList.iterator();
			while( iterFeeDetail.hasNext() ) {
				feeDetail = iterFeeDetail.next();
				addme = feeDetail.getRequiredAmountCharged();
				total = total.add( addme );
			}
			editObj.setOptionalAmount( total );
		}
		else {
			total = editObj.getOptionalAmount();
			if( total == null ) {
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					&quot;editObj.getOptionalAmount&quot; );
			}
		}
		editAccount.setRequiredBalance( editAccount.getRequiredBalance().subtract( total ) );
		editAccount.update();
		editAccount = null;

		I$DefSchemaName$LedgerObj ledger = schemaObj.getLedgerTableObj().newInstance();
		I$DefSchemaName$LedgerEditObj editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( editObj.getRequiredContainerAccount() );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		editLedger.setRequiredDescription( editObj.getRequiredDescription() );
		editLedger.setOptionalDebit( total );
		editLedger.setOptionalCredit( null );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( objAccount.getRequiredBalance() );
		ledger = editLedger.create();
		editLedger = null;

		editObj.setOptionalLookupLedger( ledger );
		editObj.update();
		editObj = null;

		return( obj.getFeeBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;finalizeFee&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );
		static const std::string S_AFeeEditIsAlreadyOpen( "A fee edit is already open" );
		static const std::string S_AnAccountEditIsAlreadyOpen( "An account edit is already open" );
		static const std::string S_AccountFeeNumDigits( "Account.FeeNumDigits" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$FeeEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$FeeEditObj*&gt;( obj-&gt;beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				S_AFeeEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( editObj-&gt;getRequiredContainerAccount()-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_AnAccountEditIsAlreadyOpen );
		}

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point feeUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setRequiredFeeDate( feeUTCDate );

		cflib::TCFLibBigDecimal&lt;31,5&gt; total( "0" );

		$CPlusDefNamespace$::I$DefSchemaName$FeeDetailObj* feeDetail;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$FeeDetailObj*&gt; feeDetailList = editObj-&gt;getOptionalComponentsDetail( true );
		if( ! feeDetailList.empty() ) {
			for( auto iterFeeDetail = feeDetailList.begin(); iterFeeDetail != feeDetailList.end(); iterFeeDetail ++ ) {
				feeDetail = *iterFeeDetail;
				total += feeDetail-&gt;getRequiredAmountCharged();
			}
			editObj-&gt;setOptionalAmountValue( total );
		}
		else if( editObj-&gt;isOptionalAmountNull() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				&quot;editObj.getOptionalAmount&quot; );
		}
		else {
			total += editObj-&gt;getOptionalAmountValue();
		}
		cflib::TCFLibBigDecimal&lt;31,5&gt; calc = editAccount-&gt;getRequiredBalance();
		calc -= total;
		editAccount-&gt;setRequiredBalance( calc );
		editAccount-&gt;update();
		editAccount = NULL;

		$CPlusDefNamespace$::I$DefSchemaName$LedgerObj* ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj* editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( editObj-&gt;getRequiredContainerAccount() );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		editLedger-&gt;setRequiredDescription( editObj-&gt;getRequiredDescription() );
		editLedger-&gt;setOptionalDebitValue( total );
		editLedger-&gt;setOptionalCreditNull();
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( obj-&gt;getRequiredContainerAccount()-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );
		editLedger = NULL;

		editObj-&gt;setOptionalLookupLedger( ledger );
		editObj-&gt;update();
		editObj = NULL;

		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$FeeBuff*&gt;( obj-&gt;getFeeBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;finalizeFee&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>

	<TableAddendum FromTable="Invoice">
		<ServerObjFunc Name="FinalizeInvoice"
				IsInstanceMethod="true"
				ReturnTable="Invoice" >
			<CafeMethodBody>		final String S_ProcName = &quot;finalizeInvoice&quot;;

		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}

		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}

		I$DefSchemaName$InvoiceEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		Calendar currentDate = Calendar.getInstance();
		currentDate.set( Calendar.HOUR_OF_DAY, 0 );
		currentDate.set( Calendar.MINUTE, 0 );
		currentDate.set( Calendar.SECOND, 0 );
		currentDate.set( Calendar.MILLISECOND, 0 );
		editObj.setRequiredInvoiceDate( currentDate );

		short invoiceNumDigits = editAccount.getRequiredInvoiceNumDigits();
		int maxInvoiceNum;
		switch( invoiceNumDigits ) {
			case 1: maxInvoiceNum = 9; break;
			case 2: maxInvoiceNum = 99; break;
			case 3: maxInvoiceNum = 999; break;
			case 4: maxInvoiceNum = 9999; break;
			case 5: maxInvoiceNum = 99999; break;
			case 6: maxInvoiceNum = 999999; break;
			case 7: maxInvoiceNum = 9999999; break;
			case 8: maxInvoiceNum = 99999999; break;
			case 9: maxInvoiceNum = 999999999; break;
			default:
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				if( invoiceNumDigits &gt; 0 ) {
					throw new CFLibArgumentOverflowException( getClass(),
						S_ProcName,
						0,
						&quot;Account.InvoiceNumDigits&quot;,
						(int)invoiceNumDigits,
						9 );
				}
				else {
					throw new CFLibArgumentUnderflowException( getClass(),
						S_ProcName,
						0,
						&quot;Account.InvoiceNumDigits&quot;,
						(int)invoiceNumDigits,
						1 );
				}
		}

		int nextInvoiceNum = editAccount.getRequiredNextInvoiceNum();
		if( nextInvoiceNum &gt; maxInvoiceNum ) {
			nextInvoiceNum = 1;
			editAccount.setRequiredNextInvoiceNum( 2 );
		}
		else {
			editAccount.setRequiredNextInvoiceNum( nextInvoiceNum + 1 );
		}
		NumberFormat fmtInvoiceNum = NumberFormat.getInstance();
		fmtInvoiceNum.setMaximumFractionDigits( 0 );
		fmtInvoiceNum.setMinimumFractionDigits( 0 );
		fmtInvoiceNum.setMaximumIntegerDigits( invoiceNumDigits );
		fmtInvoiceNum.setMinimumIntegerDigits( invoiceNumDigits );
		String formattedInvoiceNum = fmtInvoiceNum.format( (long)nextInvoiceNum );
		editObj.setRequiredIdCode( formattedInvoiceNum );

		BigDecimal total = new BigDecimal( &quot;0.0&quot; );
		BigDecimal addme;
		I$DefSchemaName$InvoiceItemObj invoiceItem;
		List&lt;I$DefSchemaName$InvoiceItemObj&gt; invoiceItemList = editObj.getRequiredComponentsInvoiceItem( true );
		if( invoiceItemList.size() &gt; 0 ) {
			Iterator&lt;I$DefSchemaName$InvoiceItemObj&gt; iterInvoiceItem = invoiceItemList.iterator();
			while( iterInvoiceItem.hasNext() ) {
				invoiceItem = iterInvoiceItem.next();
				addme = invoiceItem.getRequiredAmountInvoiced();
				total = total.add( addme );
			}
			editObj.setOptionalAmount( total );
		}
		else {
			total = editObj.getOptionalAmount();
			if( total == null ) {
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					&quot;editObj.getOptionalAmount&quot; );
			}
		}
		editAccount.setRequiredBalance( editAccount.getRequiredBalance().add( total ) );
		editAccount.update();
		editAccount = null;

		I$DefSchemaName$LedgerObj ledger = schemaObj.getLedgerTableObj().newInstance();
		I$DefSchemaName$LedgerEditObj editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( editObj.getRequiredContainerAccount() );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		editLedger.setRequiredDescription( &quot;Invoice &quot; + editObj.getRequiredDescription() );
		editLedger.setOptionalDebit( null );
		editLedger.setOptionalCredit( total );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( editObj.getRequiredContainerAccount().getRequiredBalance() );
		ledger = editLedger.create();
		editLedger = null;

		editObj.setOptionalLookupLedger( ledger );
		editObj.update();
		editObj = null;

		return( obj.getInvoiceBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;finalizeInvoice&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );
		static const std::string S_AnInvoiceEditIsAlreadyOpen( "An invoice edit is already open" );
		static const std::string S_AnAccountEditIsAlreadyOpen( "An account edit is already open" );
		static const std::string S_InvoiceOptionalAmount( "Invoice.OptionalAmount" );
		static const std::string S_AccountInvoiceNumDigits( "Account.InvoiceNumDigits" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$InvoiceEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$InvoiceEditObj*&gt;( obj-&gt;beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				S_AnInvoiceEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountObj* objAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountObj*&gt;( editObj-&gt;getRequiredContainerAccount() );
		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( objAccount-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_AnAccountEditIsAlreadyOpen );
		}

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point invoiceUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setRequiredInvoiceDate( invoiceUTCDate );

		int32_t invoiceNumDigits = objAccount-&gt;getRequiredInvoiceNumDigits();
		int32_t maxInvoiceNum;
		switch( invoiceNumDigits ) {
			case 1: maxInvoiceNum = 9; break;
			case 2: maxInvoiceNum = 99; break;
			case 3: maxInvoiceNum = 999; break;
			case 4: maxInvoiceNum = 9999; break;
			case 5: maxInvoiceNum = 99999; break;
			case 6: maxInvoiceNum = 999999; break;
			case 7: maxInvoiceNum = 9999999; break;
			case 8: maxInvoiceNum = 99999999; break;
			case 9: maxInvoiceNum = 999999999; break;
			default:
				editAccount-&gt;endEdit();
				editAccount = NULL;
				editObj-&gt;endEdit();
				editObj = NULL;
				if( invoiceNumDigits &gt; 0 ) {
					throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
						S_ProcName,
						0,
						S_AccountInvoiceNumDigits,
						invoiceNumDigits,
						9 );
				}
				else {
					throw cflib::CFLibArgumentUnderflowException( CLASS_NAME,
						S_ProcName,
						0,
						S_AccountInvoiceNumDigits,
						invoiceNumDigits,
						1 );
				}
		}

		int32_t nextInvoiceNum = editAccount-&gt;getRequiredNextInvoiceNum();
		if( nextInvoiceNum &gt; maxInvoiceNum ) {
			nextInvoiceNum = 1;
			editAccount-&gt;setRequiredNextInvoiceNum( 2 );
		}
		else {
			editAccount-&gt;setRequiredNextInvoiceNum( nextInvoiceNum + 1 );
		}

		char buff[32] = { 0 };
		snprintf( buff, 32, "%0*d", invoiceNumDigits, nextInvoiceNum );
		std::string formattedInvoiceNum( buff );
		editObj-&gt;setRequiredIdCode( formattedInvoiceNum );

		cflib::TCFLibBigDecimal&lt;31,5&gt; total( "0" );

		$CPlusDefNamespace$::I$DefSchemaName$InvoiceItemObj* invoiceItem;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$InvoiceItemObj*&gt; invoiceItemList = editObj-&gt;getRequiredComponentsInvoiceItem( true );
		if( ! invoiceItemList.empty() ) {
			for( auto iterInvoiceItem = invoiceItemList.begin(); iterInvoiceItem != invoiceItemList.end(); iterInvoiceItem ++ ) {
				invoiceItem = *iterInvoiceItem;
				total += invoiceItem-&gt;getRequiredAmountInvoiced();
			}
			editObj-&gt;setOptionalAmountValue( total );
		}
		else if( editObj-&gt;isOptionalAmountNull() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_InvoiceOptionalAmount );
		}
		else {
			total += editObj-&gt;getOptionalAmountValue();
		}
		cflib::TCFLibBigDecimal&lt;31,5&gt; calc = editAccount-&gt;getRequiredBalance();
		calc += total;
		editAccount-&gt;setRequiredBalance( calc );
		editAccount-&gt;update();
		editAccount = NULL;

		$CPlusDefNamespace$::I$DefSchemaName$LedgerObj* ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj* editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( editObj-&gt;getRequiredContainerAccount() );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		editLedger-&gt;setRequiredDescription( "Invoice " + editObj-&gt;getRequiredDescription() );
		editLedger-&gt;setOptionalDebitNull();
		editLedger-&gt;setOptionalCreditValue( total );
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( obj-&gt;getRequiredContainerAccount()-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );

		editObj-&gt;setOptionalLookupLedger( ledger );
		editObj-&gt;update();
		editObj = NULL;

		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$InvoiceBuff*&gt;( obj-&gt;getInvoiceBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;finalizeInvoice&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>

	<TableAddendum FromTable="Payment">
		<ServerObjFunc Name="FinalizePayment"
				IsInstanceMethod="true"
				ReturnTable="Payment" >
			<CafeMethodBody>		final String S_ProcName = &quot;finalizePayment&quot;;
		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}
		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}
		I$DefSchemaName$PaymentEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}
		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		Calendar currentDate = Calendar.getInstance();
		currentDate.set( Calendar.HOUR_OF_DAY, 0 );
		currentDate.set( Calendar.MINUTE, 0 );
		currentDate.set( Calendar.SECOND, 0 );
		currentDate.set( Calendar.MILLISECOND, 0 );
		editObj.setRequiredPaymentDate( currentDate );

		BigDecimal total = new BigDecimal( &quot;0.0&quot; );
		BigDecimal addme;
		I$DefSchemaName$PaymentDetailObj paymentDetail;
		List&lt;I$DefSchemaName$PaymentDetailObj&gt; paymentDetailList = editObj.getOptionalComponentsDetail( true );
		if( paymentDetailList.size() &gt; 0 ) {
			Iterator&lt;I$DefSchemaName$PaymentDetailObj&gt; iterPaymentDetail = paymentDetailList.iterator();
			while( iterPaymentDetail.hasNext() ) {
				paymentDetail = iterPaymentDetail.next();
				addme = paymentDetail.getRequiredAmountApplied();
				total = total.add( addme );
			}
			editObj.setOptionalAmount( total );
		}
		else {
			total = editObj.getOptionalAmount();
			if( total == null ) {
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				throw new CFLibNullArgumentException( getClass(),
					S_ProcName,
					0,
					&quot;editObj.getOptionalAmount&quot; );
			}
		}
		editAccount.setRequiredBalance( editAccount.getRequiredBalance().subtract( total ) );
		editAccount.update();
		I$DefSchemaName$LedgerObj ledger = schemaObj.getLedgerTableObj().newInstance();
		I$DefSchemaName$LedgerEditObj editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( editObj.getRequiredContainerAccount() );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		editLedger.setRequiredDescription( &quot;Payment &quot; + editObj.getRequiredDescription() );
		editLedger.setOptionalDebit( total );
		editLedger.setOptionalCredit( null );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( editAccount.getRequiredBalance() );
		ledger = editLedger.create();
		editObj.setOptionalLookupLedger( ledger );
		editObj.update();
		return( editObj.getPaymentBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;finalizePayment&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );
		static const std::string S_APaymentEditIsAlreadyOpen( "A payment edit is already open" );
		static const std::string S_AnAccountEditIsAlreadyOpen( "An account edit is already open" );
		static const std::string S_PaymentOptionalAmount( "Payment.OptionalAmount" );
		static const std::string S_AccountPaymentNumDigits( "Account.PaymentNumDigits" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$PaymentEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$PaymentEditObj*&gt;( obj-&gt;beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				S_APaymentEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountObj* objAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountObj*&gt;( editObj-&gt;getRequiredContainerAccount() );
		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( objAccount-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_AnAccountEditIsAlreadyOpen );
		}

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point paymentUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setRequiredPaymentDate( paymentUTCDate );

		cflib::TCFLibBigDecimal&lt;31,5&gt; total( "0" );

		$CPlusDefNamespace$::I$DefSchemaName$PaymentDetailObj* paymentDetail;
		std::vector&lt;$CPlusDefNamespace$::I$DefSchemaName$PaymentDetailObj*&gt; paymentDetailList = editObj-&gt;getOptionalComponentsDetail( true );
		if( ! paymentDetailList.empty() ) {
			for( auto iterPaymentDetail = paymentDetailList.begin(); iterPaymentDetail != paymentDetailList.end(); iterPaymentDetail ++ ) {
				paymentDetail = *iterPaymentDetail;
				total += paymentDetail-&gt;getRequiredAmountApplied();
			}
			editObj-&gt;setOptionalAmountValue( total );
		}
		else if( editObj-&gt;isOptionalAmountNull() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_PaymentOptionalAmount );
		}
		else {
			total += editObj-&gt;getOptionalAmountValue();
		}

		cflib::TCFLibBigDecimal&lt;31,5&gt; calc = editAccount-&gt;getRequiredBalance();
		calc -= total;
		editAccount-&gt;setRequiredBalance( calc );
		editAccount-&gt;update();
		editAccount = NULL;

		$CPlusDefNamespace$::I$DefSchemaName$LedgerObj* ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj* editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( editObj-&gt;getRequiredContainerAccount() );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		editLedger-&gt;setRequiredDescription( "Payment " + editObj-&gt;getRequiredDescription() );
		editLedger-&gt;setOptionalDebitValue( total );
		editLedger-&gt;setOptionalCreditNull();
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( obj-&gt;getRequiredContainerAccount()-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );

		editObj-&gt;setOptionalLookupLedger( ledger );
		editObj-&gt;update();
		editObj = NULL;

		return( obj-&gt;getPaymentBuff() );
		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$PaymentBuff*&gt;( obj-&gt;getPaymentBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;finalizePayment&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>

	<TableAddendum FromTable="PurchaseOrder">
		<ServerObjFunc Name="PlaceOrder"
				Description="Place the order"
				IsInstanceMethod="true"
				ReturnTable="PurchaseOrder" >
			<CafeMethodBody>		final String S_ProcName = &quot;placeOrder&quot;;

		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}

		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}

		I$DefSchemaName$PurchaseOrderEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		if( obj.getOptionalOrderPlaced() != null ) {
			editAccount.endEdit();
			editAccount = null;
			editObj.endEdit();
			editObj = null;
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				&quot;Order was already placed&quot; );
		}

		if( obj.getRequiredComponentsPOItem().size() &lt;= 0 ) {
			editAccount.endEdit();
			editAccount = null;
			editObj.endEdit();
			editObj = null;
			throw new CFLibUsageException( getClass(),
				S_ProcName,
				&quot;Cannot place empty order&quot; );
		}

		editObj.setOptionalOrderPlaced( Calendar.getInstance() );

		short purchaseOrderNumDigits = editAccount.getRequiredPurchaseOrderNumDigits();
		int maxPurchaseOrderNum;
		switch( purchaseOrderNumDigits ) {
			case 1: maxPurchaseOrderNum = 9; break;
			case 2: maxPurchaseOrderNum = 99; break;
			case 3: maxPurchaseOrderNum = 999; break;
			case 4: maxPurchaseOrderNum = 9999; break;
			case 5: maxPurchaseOrderNum = 99999; break;
			case 6: maxPurchaseOrderNum = 999999; break;
			case 7: maxPurchaseOrderNum = 9999999; break;
			case 8: maxPurchaseOrderNum = 99999999; break;
			case 9: maxPurchaseOrderNum = 999999999; break;
			default:
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				if( purchaseOrderNumDigits &gt; 0 ) {
					throw new CFLibArgumentOverflowException( getClass(),
						S_ProcName,
						0,
						&quot;Account.PurchaseOrderNumDigits&quot;,
						(int)purchaseOrderNumDigits,
						9 );
				}
				else {
					throw new CFLibArgumentUnderflowException( getClass(),
						S_ProcName,
						0,
						&quot;Account.PurchaseOrderNumDigits&quot;,
						(int)purchaseOrderNumDigits,
						1 );
				}
		}

		int nextPurchaseOrderNum = editAccount.getRequiredNextPurchaseOrderNum();
		if( nextPurchaseOrderNum &gt; maxPurchaseOrderNum ) {
			nextPurchaseOrderNum = 1;
			editAccount.setRequiredNextPurchaseOrderNum( 2 );
		}
		else {
			editAccount.setRequiredNextPurchaseOrderNum( nextPurchaseOrderNum + 1 );
		}
		editAccount.update();
		editAccount = null;

		NumberFormat fmtPurchaseOrderNum = NumberFormat.getInstance();
		fmtPurchaseOrderNum.setMaximumFractionDigits( 0 );
		fmtPurchaseOrderNum.setMinimumFractionDigits( 0 );
		fmtPurchaseOrderNum.setMaximumIntegerDigits( purchaseOrderNumDigits );
		fmtPurchaseOrderNum.setMinimumIntegerDigits( purchaseOrderNumDigits );
		String formattedPurchaseOrderNum = fmtPurchaseOrderNum.format( (long)nextPurchaseOrderNum );
		editObj.setRequiredIdCode( formattedPurchaseOrderNum );

		editObj.update();
		editObj = null;

		return( obj.getBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;placeOrder&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );
		static const std::string S_APurchaseOrderEditIsAlreadyOpen( "A purchaseOrder edit is already open" );
		static const std::string S_AnAccountEditIsAlreadyOpen( "An account edit is already open" );
		static const std::string S_PurchaseOrderOptionalAmount( "PurchaseOrder.OptionalAmount" );
		static const std::string S_AccountPurchaseOrderNumDigits( "Account.PurchaseOrderNumDigits" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$PurchaseOrderEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$PurchaseOrderEditObj*&gt;( obj-&gt;beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				S_APurchaseOrderEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountObj* objAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountObj*&gt;( editObj-&gt;getRequiredContainerAccount() );
		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( objAccount-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_AnAccountEditIsAlreadyOpen );
		}

		if( ! obj-&gt;isOptionalOrderPlacedNull() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				&quot;Order was already placed&quot; );
		}

		if( obj-&gt;getRequiredComponentsPOItem().empty() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				&quot;Cannot place empty order&quot; );
		}

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point purchaseOrderUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setOptionalOrderPlacedValue( purchaseOrderUTCDate );

		int32_t purchaseOrderNumDigits = objAccount-&gt;getRequiredPurchaseOrderNumDigits();
		int32_t maxPurchaseOrderNum;
		switch( purchaseOrderNumDigits ) {
			case 1: maxPurchaseOrderNum = 9; break;
			case 2: maxPurchaseOrderNum = 99; break;
			case 3: maxPurchaseOrderNum = 999; break;
			case 4: maxPurchaseOrderNum = 9999; break;
			case 5: maxPurchaseOrderNum = 99999; break;
			case 6: maxPurchaseOrderNum = 999999; break;
			case 7: maxPurchaseOrderNum = 9999999; break;
			case 8: maxPurchaseOrderNum = 99999999; break;
			case 9: maxPurchaseOrderNum = 999999999; break;
			default:
				editAccount-&gt;endEdit();
				editAccount = NULL;
				editObj-&gt;endEdit();
				editObj = NULL;
				if( purchaseOrderNumDigits &gt; 0 ) {
					throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
						S_ProcName,
						0,
						S_AccountPurchaseOrderNumDigits,
						purchaseOrderNumDigits,
						9 );
				}
				else {
					throw cflib::CFLibArgumentUnderflowException( CLASS_NAME,
						S_ProcName,
						0,
						S_AccountPurchaseOrderNumDigits,
						purchaseOrderNumDigits,
						1 );
				}
		}

		int32_t nextPurchaseOrderNum = objAccount-&gt;getRequiredNextPurchaseOrderNum();
		if( nextPurchaseOrderNum &gt; maxPurchaseOrderNum ) {
			nextPurchaseOrderNum = 1;
			editAccount-&gt;setRequiredNextPurchaseOrderNum( 2 );
		}
		else {
			editAccount-&gt;setRequiredNextPurchaseOrderNum( nextPurchaseOrderNum + 1 );
		}

		editAccount-&gt;update();
		editAccount = NULL;

		char buff[32] = { 0 };
		snprintf( buff, 32, "%0*d", purchaseOrderNumDigits, nextPurchaseOrderNum );
		std::string formattedPurchaseOrderNum( buff );
		editObj-&gt;setRequiredIdCode( formattedPurchaseOrderNum );

		editObj-&gt;update();
		editObj = NULL;

		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$PurchaseOrderBuff*&gt;( obj-&gt;getPurchaseOrderBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;placeOrder&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>

	<TableAddendum FromTable="Transfer">
		<ServerObjFunc Name="FinalizeTransfer"
				IsInstanceMethod="true"
				ReturnTable="Transfer" >
			<CafeMethodBody>		final String S_ProcName = &quot;finalizeTransfer&quot;;

		if( schemaObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				1,
				&quot;schemaObj&quot; );
		}

		if( obj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				2,
				&quot;obj&quot; );
		}

		I$DefSchemaName$TransferEditObj editObj = obj.beginEdit();
		if( editObj == null ) {
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj&quot; );
		}

		I$DefSchemaName$AccountEditObj editAccount = editObj.getRequiredContainerAccount().beginEdit();
		if( editAccount == null ) {
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editAccount&quot; );
		}

		I$DefSchemaName$AccountObj toAccount = editObj.getRequiredParentToAccount();
		if( toAccount == null ) {
			editAccount.endEdit();
			editAccount = null;
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj.ToAccount&quot; );
		}

		Calendar currentDate = Calendar.getInstance();
		currentDate.set( Calendar.HOUR_OF_DAY, 0 );
		currentDate.set( Calendar.MINUTE, 0 );
		currentDate.set( Calendar.SECOND, 0 );
		currentDate.set( Calendar.MILLISECOND, 0 );
		editObj.setRequiredTransferDate( currentDate );

		I$DefSchemaName$AccountObj objAccount = editAccount.getOrig();
		short transferNumDigits = objAccount.getRequiredTransferNumDigits();
		int maxTransferNum;
		switch( transferNumDigits ) {
			case 1: maxTransferNum = 9; break;
			case 2: maxTransferNum = 99; break;
			case 3: maxTransferNum = 999; break;
			case 4: maxTransferNum = 9999; break;
			case 5: maxTransferNum = 99999; break;
			case 6: maxTransferNum = 999999; break;
			case 7: maxTransferNum = 9999999; break;
			case 8: maxTransferNum = 99999999; break;
			case 9: maxTransferNum = 999999999; break;
			default:
				editAccount.endEdit();
				editAccount = null;
				editObj.endEdit();
				editObj = null;
				if( transferNumDigits &gt; 0 ) {
					throw new CFLibArgumentOverflowException( getClass(),
						S_ProcName,
						0,
						&quot;Account.TransferNumDigits&quot;,
						(int)transferNumDigits,
						9 );
				}
				else {
					throw new CFLibArgumentUnderflowException( getClass(),
						S_ProcName,
						0,
						&quot;Account.TransferNumDigits&quot;,
						(int)transferNumDigits,
						1 );
				}
		}

		int nextTransferNum = objAccount.getRequiredNextTransferNum();
		if( nextTransferNum &gt; maxTransferNum ) {
			nextTransferNum = 1;
			editAccount.setRequiredNextTransferNum( 2 );
		}
		else {
			editAccount.setRequiredNextTransferNum( nextTransferNum + 1 );
		}
		NumberFormat fmtTransferNum = NumberFormat.getInstance();
		fmtTransferNum.setMaximumFractionDigits( 0 );
		fmtTransferNum.setMinimumFractionDigits( 0 );
		fmtTransferNum.setMaximumIntegerDigits( transferNumDigits );
		fmtTransferNum.setMinimumIntegerDigits( transferNumDigits );
		String formattedTransferNum = fmtTransferNum.format( (long)nextTransferNum );
		editObj.setRequiredTransferNumber( formattedTransferNum );

		editObj.setRequiredDescription( &quot;Transfer &quot; + formattedTransferNum + &quot; to Account &quot; + toAccount.getRequiredAccountCode() + &quot; &quot; + toAccount.getRequiredDescription() );

		BigDecimal total = editObj.getOptionalAmount();
		if( total == null ) {
			editAccount.endEdit();
			editAccount = null;
			editObj.endEdit();
			editObj = null;
			throw new CFLibNullArgumentException( getClass(),
				S_ProcName,
				0,
				&quot;editObj.getOptionalAmount&quot; );
		}
		editAccount.setRequiredBalance( editAccount.getRequiredBalance().subtract( total ) );
		editAccount.update();
		editAccount = null;

		I$DefSchemaName$LedgerObj ledger = schemaObj.getLedgerTableObj().newInstance();
		I$DefSchemaName$LedgerEditObj editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( editObj.getRequiredContainerAccount() );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		editLedger.setRequiredDescription( editObj.getRequiredDescription() );
		editLedger.setOptionalDebit( total );
		editLedger.setOptionalCredit( null );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( editObj.getRequiredContainerAccount().getRequiredBalance() );
		ledger = editLedger.create();
		editObj.setOptionalLookupLedger( ledger );
		editObj.update();
		editObj = null;

		ledger = schemaObj.getLedgerTableObj().newInstance();
		editLedger = ledger.beginEdit();
		editLedger.setRequiredContainerAccount( toAccount );
		editLedger.setRequiredEntryStamp( Calendar.getInstance() );
		editLedger.setRequiredDescription( &quot;Transfer &quot; + formattedTransferNum + &quot; from Account &quot; + objAccount.getRequiredAccountCode() + &quot; &quot; + objAccount.getRequiredDescription() );
		editLedger.setOptionalDebit( null );
		editLedger.setOptionalCredit( total );
		editLedger.setOptionalLookupConvertCcy( null );
		editLedger.setOptionalConvertedAmount( null );
		editLedger.setOptionalLookupXfrAccount( null );
		editLedger.setRequiredBalance( editAccount.getOrig().getRequiredBalance() );
		ledger = editLedger.create();
		editLedger = null;

		return( obj.getTransferBuff() );
</CafeMethodBody>

			<CPlusMethodBody>		static const std::string S_ProcName( &quot;finalizeTransfer&quot; );
		static const std::string S_SchemaObj( "schemaObj" );
		static const std::string S_Obj( "obj" );
		static const std::string S_ATransferEditIsAlreadyOpen( "A transfer edit is already open" );
		static const std::string S_AnAccountEditIsAlreadyOpen( "An account edit is already open" );
		static const std::string S_TransferOptionalAmount( "Transfer.OptionalAmount" );
		static const std::string S_TransferToAccount( "Transfer.ToAccount" );
		static const std::string S_AccountTransferNumDigits( "Account.TransferNumDigits" );

		if( schemaObj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				1,
				S_SchemaObj );
		}

		if( obj == NULL ) {
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				2,
				S_Obj );
		}

		$CPlusDefNamespace$::I$DefSchemaName$TransferEditObj* editObj = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$TransferEditObj*&gt;( obj-&gt;beginEdit() );
		if( editObj == NULL ) {
			throw cflib::CFLibUsageException( CLASS_NAME,
				S_ProcName,
				S_ATransferEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountObj* objAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountObj*&gt;( editObj-&gt;getRequiredContainerAccount() );
		$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj* editAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountEditObj*&gt;( objAccount-&gt;beginEdit() );
		if( editAccount == NULL ) {
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_AnAccountEditIsAlreadyOpen );
		}

		$CPlusDefNamespace$::I$DefSchemaName$AccountObj* toAccount = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$AccountObj*&gt;( editObj->getRequiredParentToAccount() );
		if( toAccount == NULL ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_TransferToAccount );
		}

		std::chrono::system_clock::time_point currentUTCTimestamp = cflib::CFLib::getUTCTimestampInstance();
		std::string currentUTCDateString = cflib::CFLibXmlUtil::formatDate( currentUTCTimestamp );
		std::chrono::system_clock::time_point transferUTCDate = cflib::CFLibXmlUtil::evalDate( currentUTCDateString );

		editObj-&gt;setRequiredTransferDate( transferUTCDate );

		int32_t transferNumDigits = objAccount-&gt;getRequiredTransferNumDigits();
		int32_t maxTransferNum;
		switch( transferNumDigits ) {
			case 1: maxTransferNum = 9; break;
			case 2: maxTransferNum = 99; break;
			case 3: maxTransferNum = 999; break;
			case 4: maxTransferNum = 9999; break;
			case 5: maxTransferNum = 99999; break;
			case 6: maxTransferNum = 999999; break;
			case 7: maxTransferNum = 9999999; break;
			case 8: maxTransferNum = 99999999; break;
			case 9: maxTransferNum = 999999999; break;
			default:
				editAccount-&gt;endEdit();
				editAccount = NULL;
				editObj-&gt;endEdit();
				editObj = NULL;
				if( transferNumDigits &gt; 0 ) {
					throw cflib::CFLibArgumentOverflowException( CLASS_NAME,
						S_ProcName,
						0,
						S_AccountTransferNumDigits,
						transferNumDigits,
						9 );
				}
				else {
					throw cflib::CFLibArgumentUnderflowException( CLASS_NAME,
						S_ProcName,
						0,
						S_AccountTransferNumDigits,
						transferNumDigits,
						1 );
				}
		}

		int32_t nextTransferNum = objAccount-&gt;getRequiredNextTransferNum();
		if( nextTransferNum &gt; maxTransferNum ) {
			nextTransferNum = 1;
			editAccount-&gt;setRequiredNextTransferNum( 2 );
		}
		else {
			editAccount-&gt;setRequiredNextTransferNum( nextTransferNum + 1 );
		}

		char buff[32] = { 0 };
		snprintf( buff, 32, "%0*d", transferNumDigits, nextTransferNum );
		std::string formattedTransferNum( buff );
		editObj-&gt;setRequiredTransferNumber( formattedTransferNum );

		editObj-&gt;setRequiredDescription( &quot;Transfer &quot; + formattedTransferNum + &quot; to Account &quot; + toAccount-&gt;getRequiredAccountCode() + &quot; &quot; + toAccount-&gt;getRequiredDescription() );

		if( editObj-&gt;isOptionalAmountNull() ) {
			editAccount-&gt;endEdit();
			editAccount = NULL;
			editObj-&gt;endEdit();
			editObj = NULL;
			throw cflib::CFLibNullArgumentException( CLASS_NAME,
				S_ProcName,
				0,
				S_TransferOptionalAmount );
		}

		cflib::TCFLibBigDecimal&lt;31,5&gt; total = editObj-&gt;getOptionalAmountValue();

		cflib::TCFLibBigDecimal&lt;31,5&gt; calc = editAccount-&gt;getRequiredBalance();
		calc -= total;
		editAccount-&gt;setRequiredBalance( calc );
		editAccount-&gt;update();
		editAccount = NULL;

		$CPlusDefNamespace$::I$DefSchemaName$LedgerObj* ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj* editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( editObj-&gt;getRequiredContainerAccount() );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		editLedger-&gt;setRequiredDescription( editObj-&gt;getRequiredDescription() );
		editLedger-&gt;setOptionalDebitValue( total );
		editLedger-&gt;setOptionalCreditNull();
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( obj-&gt;getRequiredContainerAccount()-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );

		editObj-&gt;setOptionalLookupLedger( ledger );
		editObj-&gt;update();
		editObj = NULL;

		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( schemaObj-&gt;getLedgerTableObj()-&gt;newInstance() );
		editLedger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerEditObj*&gt;( ledger-&gt;beginEdit() );
		editLedger-&gt;setRequiredContainerAccount( toAccount );
		editLedger-&gt;setRequiredEntryStamp( currentUTCTimestamp );
		editLedger-&gt;setRequiredDescription( "Transfer " + formattedTransferNum + " from Account " + objAccount-&gt;getRequiredAccountCode() + " " + objAccount-&gt;getRequiredDescription() );
		editLedger-&gt;setOptionalDebitNull();
		editLedger-&gt;setOptionalCreditValue( total );
		editLedger-&gt;setOptionalLookupConvertCcy( NULL );
		editLedger-&gt;setOptionalConvertedAmountNull();
		editLedger-&gt;setOptionalLookupXfrAccount( NULL );
		editLedger-&gt;setRequiredBalance( objAccount-&gt;getRequiredBalance() );
		ledger = dynamic_cast&lt;$CPlusDefNamespace$::I$DefSchemaName$LedgerObj*&gt;( editLedger-&gt;create() );
		editLedger = NULL;

		return( dynamic_cast&lt;$CPlusDefNamespace$::$DefSchemaName$TransferBuff*&gt;( obj-&gt;getTransferBuff()-&gt;clone() ) );
</CPlusMethodBody>

			<CSharpMethodBody>
		static const std::string S_ProcName( &quot;finalizeTransfer&quot; );
		throw cflib::CFLibNotImplementedYetException( CLASS_NAME, S_ProcName );
</CSharpMethodBody>
		</ServerObjFunc>
	</TableAddendum>
</SchemaDef>
						</MinorVersion>
					</MajorVersion>
				</SubProject>
			</TopProject>
		</TopDomain>
	</Tld>
</MSSBam>
